
Motor Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000997c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008997c  0008997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b50  20070000  00089984  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004a4  20070b50  0008a4d4  00020b50  2**2
                  ALLOC
  4 .stack        00002004  20070ff4  0008a978  00020b50  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b79  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cf94  00000000  00000000  00020bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b3f  00000000  00000000  0003db66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c3c  00000000  00000000  000416a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f58  00000000  00000000  0004a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ea0  00000000  00000000  0004b239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008673  00000000  00000000  0004c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013305  00000000  00000000  0005474c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000637e5  00000000  00000000  00067a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004de4  00000000  00000000  000cb238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 2f 07 20 c5 3f 08 00 bd 3f 08 00 bd 3f 08 00     ./. .?...?...?..
   80010:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 00 00 00 00     .?...?...?......
	...
   8002c:	bd 3f 08 00 bd 3f 08 00 00 00 00 00 bd 3f 08 00     .?...?.......?..
   8003c:	35 2f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     5/...?...?...?..
   8004c:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..
   8005c:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 00 00 00 00     .?...?...?......
   8006c:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..
	...
   80084:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..
   80094:	bd 3f 08 00 25 11 08 00 bd 3f 08 00 bd 3f 08 00     .?..%....?...?..
   800a4:	00 00 00 00 bd 3f 08 00 bd 3f 08 00 25 2c 08 00     .....?...?..%,..
   800b4:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..
   800c4:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..
   800d4:	bd 3f 08 00 bd 3f 08 00 45 0c 08 00 bd 3f 08 00     .?...?..E....?..
   800e4:	bd 3f 08 00 bd 3f 08 00 bd 3f 08 00 bd 3f 08 00     .?...?...?...?..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b50 	.word	0x20070b50
   80110:	00000000 	.word	0x00000000
   80114:	00089984 	.word	0x00089984

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00089984 	.word	0x00089984
   80154:	20070b54 	.word	0x20070b54
   80158:	00089984 	.word	0x00089984
   8015c:	00000000 	.word	0x00000000

00080160 <usart_spi_enable>:
/*! \brief Enable the USART for the specified USART in SPI mode.
 *
 * \param p_usart Base address of the USART instance.
 */
void usart_spi_enable(Usart *p_usart)
{
   80160:	b580      	push	{r7, lr}
   80162:	b082      	sub	sp, #8
   80164:	af00      	add	r7, sp, #0
   80166:	6078      	str	r0, [r7, #4]
	usart_enable_tx(p_usart);
   80168:	6878      	ldr	r0, [r7, #4]
   8016a:	4b04      	ldr	r3, [pc, #16]	; (8017c <usart_spi_enable+0x1c>)
   8016c:	4798      	blx	r3
	usart_enable_rx(p_usart);
   8016e:	6878      	ldr	r0, [r7, #4]
   80170:	4b03      	ldr	r3, [pc, #12]	; (80180 <usart_spi_enable+0x20>)
   80172:	4798      	blx	r3
}
   80174:	bf00      	nop
   80176:	3708      	adds	r7, #8
   80178:	46bd      	mov	sp, r7
   8017a:	bd80      	pop	{r7, pc}
   8017c:	000808a1 	.word	0x000808a1
   80180:	000808e9 	.word	0x000808e9

00080184 <usart_spi_disable>:
 *
 * \param p_usart Base address of the USART instance.
 *
 */
void usart_spi_disable(Usart *p_usart)
{
   80184:	b580      	push	{r7, lr}
   80186:	b082      	sub	sp, #8
   80188:	af00      	add	r7, sp, #0
   8018a:	6078      	str	r0, [r7, #4]
	usart_disable_tx(p_usart);
   8018c:	6878      	ldr	r0, [r7, #4]
   8018e:	4b04      	ldr	r3, [pc, #16]	; (801a0 <usart_spi_disable+0x1c>)
   80190:	4798      	blx	r3
	usart_disable_rx(p_usart);
   80192:	6878      	ldr	r0, [r7, #4]
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <usart_spi_disable+0x20>)
   80196:	4798      	blx	r3
}
   80198:	bf00      	nop
   8019a:	3708      	adds	r7, #8
   8019c:	46bd      	mov	sp, r7
   8019e:	bd80      	pop	{r7, pc}
   801a0:	000808b9 	.word	0x000808b9
   801a4:	00080901 	.word	0x00080901

000801a8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801a8:	b480      	push	{r7}
   801aa:	b085      	sub	sp, #20
   801ac:	af00      	add	r7, sp, #0
   801ae:	60f8      	str	r0, [r7, #12]
   801b0:	60b9      	str	r1, [r7, #8]
   801b2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801b4:	68bb      	ldr	r3, [r7, #8]
   801b6:	2b00      	cmp	r3, #0
   801b8:	d007      	beq.n	801ca <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   801ba:	68bb      	ldr	r3, [r7, #8]
   801bc:	681a      	ldr	r2, [r3, #0]
   801be:	68fb      	ldr	r3, [r7, #12]
   801c0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   801c2:	68bb      	ldr	r3, [r7, #8]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	68fb      	ldr	r3, [r7, #12]
   801c8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   801ca:	687b      	ldr	r3, [r7, #4]
   801cc:	2b00      	cmp	r3, #0
   801ce:	d007      	beq.n	801e0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	681a      	ldr	r2, [r3, #0]
   801d4:	68fb      	ldr	r3, [r7, #12]
   801d6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	68fb      	ldr	r3, [r7, #12]
   801de:	61da      	str	r2, [r3, #28]
	}
}
   801e0:	bf00      	nop
   801e2:	3714      	adds	r7, #20
   801e4:	46bd      	mov	sp, r7
   801e6:	bc80      	pop	{r7}
   801e8:	4770      	bx	lr

000801ea <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   801ea:	b480      	push	{r7}
   801ec:	b085      	sub	sp, #20
   801ee:	af00      	add	r7, sp, #0
   801f0:	60f8      	str	r0, [r7, #12]
   801f2:	60b9      	str	r1, [r7, #8]
   801f4:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   801f6:	68bb      	ldr	r3, [r7, #8]
   801f8:	2b00      	cmp	r3, #0
   801fa:	d007      	beq.n	8020c <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   801fc:	68bb      	ldr	r3, [r7, #8]
   801fe:	681a      	ldr	r2, [r3, #0]
   80200:	68fb      	ldr	r3, [r7, #12]
   80202:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80204:	68bb      	ldr	r3, [r7, #8]
   80206:	685a      	ldr	r2, [r3, #4]
   80208:	68fb      	ldr	r3, [r7, #12]
   8020a:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b00      	cmp	r3, #0
   80210:	d007      	beq.n	80222 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   80212:	687b      	ldr	r3, [r7, #4]
   80214:	681a      	ldr	r2, [r3, #0]
   80216:	68fb      	ldr	r3, [r7, #12]
   80218:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8021a:	687b      	ldr	r3, [r7, #4]
   8021c:	685a      	ldr	r2, [r3, #4]
   8021e:	68fb      	ldr	r3, [r7, #12]
   80220:	615a      	str	r2, [r3, #20]
	}
}
   80222:	bf00      	nop
   80224:	3714      	adds	r7, #20
   80226:	46bd      	mov	sp, r7
   80228:	bc80      	pop	{r7}
   8022a:	4770      	bx	lr

0008022c <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8022c:	b480      	push	{r7}
   8022e:	b083      	sub	sp, #12
   80230:	af00      	add	r7, sp, #0
   80232:	6078      	str	r0, [r7, #4]
   80234:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80236:	683a      	ldr	r2, [r7, #0]
   80238:	f240 1301 	movw	r3, #257	; 0x101
   8023c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8023e:	687a      	ldr	r2, [r7, #4]
   80240:	6213      	str	r3, [r2, #32]
}
   80242:	bf00      	nop
   80244:	370c      	adds	r7, #12
   80246:	46bd      	mov	sp, r7
   80248:	bc80      	pop	{r7}
   8024a:	4770      	bx	lr

0008024c <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   8024c:	b480      	push	{r7}
   8024e:	b083      	sub	sp, #12
   80250:	af00      	add	r7, sp, #0
   80252:	6078      	str	r0, [r7, #4]
   80254:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   80256:	683a      	ldr	r2, [r7, #0]
   80258:	f240 2302 	movw	r3, #514	; 0x202
   8025c:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
   8025e:	687a      	ldr	r2, [r7, #4]
   80260:	6213      	str	r3, [r2, #32]
}
   80262:	bf00      	nop
   80264:	370c      	adds	r7, #12
   80266:	46bd      	mov	sp, r7
   80268:	bc80      	pop	{r7}
   8026a:	4770      	bx	lr

0008026c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8026c:	b4b0      	push	{r4, r5, r7}
   8026e:	b091      	sub	sp, #68	; 0x44
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
   80274:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <pwm_clocks_generate+0x78>)
   80278:	f107 040c 	add.w	r4, r7, #12
   8027c:	461d      	mov	r5, r3
   8027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8028e:	2300      	movs	r3, #0
   80290:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80294:	009b      	lsls	r3, r3, #2
   80296:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8029a:	4413      	add	r3, r2
   8029c:	f853 3c34 	ldr.w	r3, [r3, #-52]
   802a0:	683a      	ldr	r2, [r7, #0]
   802a2:	fbb2 f2f3 	udiv	r2, r2, r3
   802a6:	687b      	ldr	r3, [r7, #4]
   802a8:	fbb2 f3f3 	udiv	r3, r2, r3
   802ac:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   802b4:	d906      	bls.n	802c4 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
   802b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802b8:	3301      	adds	r3, #1
   802ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802be:	2b0a      	cmp	r3, #10
   802c0:	d9e7      	bls.n	80292 <pwm_clocks_generate+0x26>
   802c2:	e000      	b.n	802c6 <pwm_clocks_generate+0x5a>
			break;
   802c4:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802c8:	2b0a      	cmp	r3, #10
   802ca:	d804      	bhi.n	802d6 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
   802cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   802ce:	021a      	lsls	r2, r3, #8
   802d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   802d2:	4313      	orrs	r3, r2
   802d4:	e001      	b.n	802da <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
   802da:	4618      	mov	r0, r3
   802dc:	3744      	adds	r7, #68	; 0x44
   802de:	46bd      	mov	sp, r7
   802e0:	bcb0      	pop	{r4, r5, r7}
   802e2:	4770      	bx	lr
   802e4:	0008957c 	.word	0x0008957c

000802e8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b084      	sub	sp, #16
   802ec:	af00      	add	r7, sp, #0
   802ee:	6078      	str	r0, [r7, #4]
   802f0:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
   802f2:	2300      	movs	r3, #0
   802f4:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   802f6:	683b      	ldr	r3, [r7, #0]
   802f8:	681b      	ldr	r3, [r3, #0]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d011      	beq.n	80322 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	681a      	ldr	r2, [r3, #0]
   80302:	683b      	ldr	r3, [r7, #0]
   80304:	689b      	ldr	r3, [r3, #8]
   80306:	4619      	mov	r1, r3
   80308:	4610      	mov	r0, r2
   8030a:	4b16      	ldr	r3, [pc, #88]	; (80364 <pwm_init+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
   80310:	68bb      	ldr	r3, [r7, #8]
   80312:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80316:	4293      	cmp	r3, r2
   80318:	d101      	bne.n	8031e <pwm_init+0x36>
			return result;
   8031a:	68bb      	ldr	r3, [r7, #8]
   8031c:	e01e      	b.n	8035c <pwm_init+0x74>
		}

		clock = result;
   8031e:	68bb      	ldr	r3, [r7, #8]
   80320:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80322:	683b      	ldr	r3, [r7, #0]
   80324:	685b      	ldr	r3, [r3, #4]
   80326:	2b00      	cmp	r3, #0
   80328:	d014      	beq.n	80354 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	685a      	ldr	r2, [r3, #4]
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	689b      	ldr	r3, [r3, #8]
   80332:	4619      	mov	r1, r3
   80334:	4610      	mov	r0, r2
   80336:	4b0b      	ldr	r3, [pc, #44]	; (80364 <pwm_init+0x7c>)
   80338:	4798      	blx	r3
   8033a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
   8033c:	68bb      	ldr	r3, [r7, #8]
   8033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80342:	4293      	cmp	r3, r2
   80344:	d101      	bne.n	8034a <pwm_init+0x62>
			return result;
   80346:	68bb      	ldr	r3, [r7, #8]
   80348:	e008      	b.n	8035c <pwm_init+0x74>
		}

		clock |= (result << 16);
   8034a:	68bb      	ldr	r3, [r7, #8]
   8034c:	041b      	lsls	r3, r3, #16
   8034e:	68fa      	ldr	r2, [r7, #12]
   80350:	4313      	orrs	r3, r2
   80352:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	68fa      	ldr	r2, [r7, #12]
   80358:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8035a:	2300      	movs	r3, #0
}
   8035c:	4618      	mov	r0, r3
   8035e:	3710      	adds	r7, #16
   80360:	46bd      	mov	sp, r7
   80362:	bd80      	pop	{r7, pc}
   80364:	0008026d 	.word	0x0008026d

00080368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80368:	b480      	push	{r7}
   8036a:	b087      	sub	sp, #28
   8036c:	af00      	add	r7, sp, #0
   8036e:	6078      	str	r0, [r7, #4]
   80370:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
   80372:	2300      	movs	r3, #0
   80374:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
   80376:	683b      	ldr	r3, [r7, #0]
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	685b      	ldr	r3, [r3, #4]
   80380:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
   80384:	683a      	ldr	r2, [r7, #0]
   80386:	7a92      	ldrb	r2, [r2, #10]
   80388:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8038a:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8038c:	683a      	ldr	r2, [r7, #0]
   8038e:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
   80390:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
   80392:	683a      	ldr	r2, [r7, #0]
   80394:	7d92      	ldrb	r2, [r2, #22]
   80396:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
   80398:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
   8039a:	683a      	ldr	r2, [r7, #0]
   8039c:	7dd2      	ldrb	r2, [r2, #23]
   8039e:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
   803a0:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	7e12      	ldrb	r2, [r2, #24]
   803a6:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
   803a8:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
   803aa:	683a      	ldr	r2, [r7, #0]
   803ac:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ae:	4313      	orrs	r3, r2
   803b0:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803b2:	687a      	ldr	r2, [r7, #4]
   803b4:	693b      	ldr	r3, [r7, #16]
   803b6:	3310      	adds	r3, #16
   803b8:	015b      	lsls	r3, r3, #5
   803ba:	4413      	add	r3, r2
   803bc:	697a      	ldr	r2, [r7, #20]
   803be:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803c0:	683b      	ldr	r3, [r7, #0]
   803c2:	68da      	ldr	r2, [r3, #12]
   803c4:	6879      	ldr	r1, [r7, #4]
   803c6:	693b      	ldr	r3, [r7, #16]
   803c8:	3310      	adds	r3, #16
   803ca:	015b      	lsls	r3, r3, #5
   803cc:	440b      	add	r3, r1
   803ce:	3304      	adds	r3, #4
   803d0:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	691a      	ldr	r2, [r3, #16]
   803d6:	6879      	ldr	r1, [r7, #4]
   803d8:	693b      	ldr	r3, [r7, #16]
   803da:	015b      	lsls	r3, r3, #5
   803dc:	440b      	add	r3, r1
   803de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   803e2:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   803e4:	683b      	ldr	r3, [r7, #0]
   803e6:	7d9b      	ldrb	r3, [r3, #22]
   803e8:	2b00      	cmp	r3, #0
   803ea:	d00d      	beq.n	80408 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   803ec:	683b      	ldr	r3, [r7, #0]
   803ee:	8b9b      	ldrh	r3, [r3, #28]
   803f0:	041b      	lsls	r3, r3, #16
   803f2:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   803f4:	683b      	ldr	r3, [r7, #0]
   803f6:	8b5b      	ldrh	r3, [r3, #26]
   803f8:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   803fa:	6879      	ldr	r1, [r7, #4]
   803fc:	693b      	ldr	r3, [r7, #16]
   803fe:	015b      	lsls	r3, r3, #5
   80400:	440b      	add	r3, r1
   80402:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80406:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80408:	687b      	ldr	r3, [r7, #4]
   8040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   8040c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   80410:	693b      	ldr	r3, [r7, #16]
   80412:	fa01 f303 	lsl.w	r3, r1, r3
   80416:	43db      	mvns	r3, r3
   80418:	4013      	ands	r3, r2
   8041a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8041c:	683b      	ldr	r3, [r7, #0]
   8041e:	7f9b      	ldrb	r3, [r3, #30]
   80420:	461a      	mov	r2, r3
   80422:	693b      	ldr	r3, [r7, #16]
   80424:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	683b      	ldr	r3, [r7, #0]
   80428:	7fdb      	ldrb	r3, [r3, #31]
   8042a:	4619      	mov	r1, r3
   8042c:	693b      	ldr	r3, [r7, #16]
   8042e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80432:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80434:	4313      	orrs	r3, r2
   80436:	461a      	mov	r2, r3
   80438:	697b      	ldr	r3, [r7, #20]
   8043a:	4313      	orrs	r3, r2
   8043c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
   8043e:	687b      	ldr	r3, [r7, #4]
   80440:	697a      	ldr	r2, [r7, #20]
   80442:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   8044c:	693b      	ldr	r3, [r7, #16]
   8044e:	fa01 f303 	lsl.w	r3, r1, r3
   80452:	43db      	mvns	r3, r3
   80454:	4013      	ands	r3, r2
   80456:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80458:	683b      	ldr	r3, [r7, #0]
   8045a:	f893 3020 	ldrb.w	r3, [r3, #32]
   8045e:	461a      	mov	r2, r3
   80460:	693b      	ldr	r3, [r7, #16]
   80462:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80464:	683b      	ldr	r3, [r7, #0]
   80466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   8046a:	4619      	mov	r1, r3
   8046c:	693b      	ldr	r3, [r7, #16]
   8046e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
   80472:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80474:	4313      	orrs	r3, r2
   80476:	461a      	mov	r2, r3
   80478:	697b      	ldr	r3, [r7, #20]
   8047a:	4313      	orrs	r3, r2
   8047c:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
   8047e:	687b      	ldr	r3, [r7, #4]
   80480:	697a      	ldr	r2, [r7, #20]
   80482:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80484:	2201      	movs	r2, #1
   80486:	693b      	ldr	r3, [r7, #16]
   80488:	fa02 f303 	lsl.w	r3, r2, r3
   8048c:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
   8048e:	683b      	ldr	r3, [r7, #0]
   80490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   80494:	2b00      	cmp	r3, #0
   80496:	d006      	beq.n	804a6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	6a1a      	ldr	r2, [r3, #32]
   8049c:	68fb      	ldr	r3, [r7, #12]
   8049e:	431a      	orrs	r2, r3
   804a0:	687b      	ldr	r3, [r7, #4]
   804a2:	621a      	str	r2, [r3, #32]
   804a4:	e006      	b.n	804b4 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804a6:	687b      	ldr	r3, [r7, #4]
   804a8:	6a1a      	ldr	r2, [r3, #32]
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	43db      	mvns	r3, r3
   804ae:	401a      	ands	r2, r3
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   804b4:	683b      	ldr	r3, [r7, #0]
   804b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   804ba:	2b01      	cmp	r3, #1
   804bc:	d109      	bne.n	804d2 <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	2101      	movs	r1, #1
   804c4:	693a      	ldr	r2, [r7, #16]
   804c6:	fa01 f202 	lsl.w	r2, r1, r2
   804ca:	431a      	orrs	r2, r3
   804cc:	687b      	ldr	r3, [r7, #4]
   804ce:	669a      	str	r2, [r3, #104]	; 0x68
   804d0:	e009      	b.n	804e6 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   804d2:	687b      	ldr	r3, [r7, #4]
   804d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d6:	2101      	movs	r1, #1
   804d8:	693a      	ldr	r2, [r7, #16]
   804da:	fa01 f202 	lsl.w	r2, r1, r2
   804de:	43d2      	mvns	r2, r2
   804e0:	401a      	ands	r2, r3
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   804e6:	683b      	ldr	r3, [r7, #0]
   804e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   804ec:	2b01      	cmp	r3, #1
   804ee:	d10a      	bne.n	80506 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   804f0:	687b      	ldr	r3, [r7, #4]
   804f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f4:	2101      	movs	r1, #1
   804f6:	693a      	ldr	r2, [r7, #16]
   804f8:	fa01 f202 	lsl.w	r2, r1, r2
   804fc:	0412      	lsls	r2, r2, #16
   804fe:	431a      	orrs	r2, r3
   80500:	687b      	ldr	r3, [r7, #4]
   80502:	669a      	str	r2, [r3, #104]	; 0x68
   80504:	e00a      	b.n	8051c <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8050a:	2101      	movs	r1, #1
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	fa01 f202 	lsl.w	r2, r1, r2
   80512:	0412      	lsls	r2, r2, #16
   80514:	43d2      	mvns	r2, r2
   80516:	401a      	ands	r2, r3
   80518:	687b      	ldr	r3, [r7, #4]
   8051a:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	60bb      	str	r3, [r7, #8]
#if (SAM3XA)
	if (ch_num < 4) {
   80520:	693b      	ldr	r3, [r7, #16]
   80522:	2b03      	cmp	r3, #3
   80524:	d81d      	bhi.n	80562 <pwm_channel_init+0x1fa>
		ch_num *= 8;
   80526:	693b      	ldr	r3, [r7, #16]
   80528:	00db      	lsls	r3, r3, #3
   8052a:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE1;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   80530:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80532:	22ff      	movs	r2, #255	; 0xff
   80534:	693b      	ldr	r3, [r7, #16]
   80536:	fa02 f303 	lsl.w	r3, r2, r3
   8053a:	43db      	mvns	r3, r3
   8053c:	461a      	mov	r2, r3
   8053e:	68bb      	ldr	r3, [r7, #8]
   80540:	4013      	ands	r3, r2
   80542:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80544:	683b      	ldr	r3, [r7, #0]
   80546:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8054a:	461a      	mov	r2, r3
   8054c:	693b      	ldr	r3, [r7, #16]
   8054e:	fa02 f303 	lsl.w	r3, r2, r3
   80552:	461a      	mov	r2, r3
   80554:	68bb      	ldr	r3, [r7, #8]
   80556:	4313      	orrs	r3, r2
   80558:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	68ba      	ldr	r2, [r7, #8]
   8055e:	66da      	str	r2, [r3, #108]	; 0x6c
   80560:	e01f      	b.n	805a2 <pwm_channel_init+0x23a>
	} else {
		ch_num -= 4;
   80562:	693b      	ldr	r3, [r7, #16]
   80564:	3b04      	subs	r3, #4
   80566:	613b      	str	r3, [r7, #16]
		ch_num *= 8;
   80568:	693b      	ldr	r3, [r7, #16]
   8056a:	00db      	lsls	r3, r3, #3
   8056c:	613b      	str	r3, [r7, #16]
		fault_enable_reg = p_pwm->PWM_FPE2;
   8056e:	687b      	ldr	r3, [r7, #4]
   80570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80572:	60bb      	str	r3, [r7, #8]
		fault_enable_reg &= ~(0xFF << ch_num);
   80574:	22ff      	movs	r2, #255	; 0xff
   80576:	693b      	ldr	r3, [r7, #16]
   80578:	fa02 f303 	lsl.w	r3, r2, r3
   8057c:	43db      	mvns	r3, r3
   8057e:	461a      	mov	r2, r3
   80580:	68bb      	ldr	r3, [r7, #8]
   80582:	4013      	ands	r3, r2
   80584:	60bb      	str	r3, [r7, #8]
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80586:	683b      	ldr	r3, [r7, #0]
   80588:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   8058c:	461a      	mov	r2, r3
   8058e:	693b      	ldr	r3, [r7, #16]
   80590:	fa02 f303 	lsl.w	r3, r2, r3
   80594:	461a      	mov	r2, r3
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	4313      	orrs	r3, r2
   8059a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	68ba      	ldr	r2, [r7, #8]
   805a0:	671a      	str	r2, [r3, #112]	; 0x70
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
   805a2:	2300      	movs	r3, #0
}
   805a4:	4618      	mov	r0, r3
   805a6:	371c      	adds	r7, #28
   805a8:	46bd      	mov	sp, r7
   805aa:	bc80      	pop	{r7}
   805ac:	4770      	bx	lr

000805ae <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   805ae:	b480      	push	{r7}
   805b0:	b087      	sub	sp, #28
   805b2:	af00      	add	r7, sp, #0
   805b4:	60f8      	str	r0, [r7, #12]
   805b6:	60b9      	str	r1, [r7, #8]
   805b8:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   805c0:	68bb      	ldr	r3, [r7, #8]
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	429a      	cmp	r2, r3
   805c8:	d202      	bcs.n	805d0 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
   805ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805ce:	e00b      	b.n	805e8 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   805d0:	68bb      	ldr	r3, [r7, #8]
   805d2:	687a      	ldr	r2, [r7, #4]
   805d4:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   805d6:	68fa      	ldr	r2, [r7, #12]
   805d8:	697b      	ldr	r3, [r7, #20]
   805da:	015b      	lsls	r3, r3, #5
   805dc:	4413      	add	r3, r2
   805de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
   805e6:	2300      	movs	r3, #0
}
   805e8:	4618      	mov	r0, r3
   805ea:	371c      	adds	r7, #28
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr

000805f2 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
   805f2:	b480      	push	{r7}
   805f4:	b083      	sub	sp, #12
   805f6:	af00      	add	r7, sp, #0
   805f8:	6078      	str	r0, [r7, #4]
   805fa:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
   805fc:	2201      	movs	r2, #1
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	fa02 f303 	lsl.w	r3, r2, r3
   80604:	461a      	mov	r2, r3
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	605a      	str	r2, [r3, #4]
}
   8060a:	bf00      	nop
   8060c:	370c      	adds	r7, #12
   8060e:	46bd      	mov	sp, r7
   80610:	bc80      	pop	{r7}
   80612:	4770      	bx	lr

00080614 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
   8061e:	2201      	movs	r2, #1
   80620:	683b      	ldr	r3, [r7, #0]
   80622:	fa02 f303 	lsl.w	r3, r2, r3
   80626:	461a      	mov	r2, r3
   80628:	687b      	ldr	r3, [r7, #4]
   8062a:	609a      	str	r2, [r3, #8]
}
   8062c:	bf00      	nop
   8062e:	370c      	adds	r7, #12
   80630:	46bd      	mov	sp, r7
   80632:	bc80      	pop	{r7}
   80634:	4770      	bx	lr

00080636 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80636:	b480      	push	{r7}
   80638:	b087      	sub	sp, #28
   8063a:	af00      	add	r7, sp, #0
   8063c:	60f8      	str	r0, [r7, #12]
   8063e:	60b9      	str	r1, [r7, #8]
   80640:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80642:	68fa      	ldr	r2, [r7, #12]
   80644:	68bb      	ldr	r3, [r7, #8]
   80646:	019b      	lsls	r3, r3, #6
   80648:	4413      	add	r3, r2
   8064a:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8064c:	697b      	ldr	r3, [r7, #20]
   8064e:	2202      	movs	r2, #2
   80650:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80652:	697b      	ldr	r3, [r7, #20]
   80654:	f04f 32ff 	mov.w	r2, #4294967295
   80658:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8065a:	697b      	ldr	r3, [r7, #20]
   8065c:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8065e:	697b      	ldr	r3, [r7, #20]
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	605a      	str	r2, [r3, #4]
}
   80664:	bf00      	nop
   80666:	371c      	adds	r7, #28
   80668:	46bd      	mov	sp, r7
   8066a:	bc80      	pop	{r7}
   8066c:	4770      	bx	lr

0008066e <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   8066e:	b480      	push	{r7}
   80670:	b083      	sub	sp, #12
   80672:	af00      	add	r7, sp, #0
   80674:	6078      	str	r0, [r7, #4]
   80676:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80678:	687a      	ldr	r2, [r7, #4]
   8067a:	683b      	ldr	r3, [r7, #0]
   8067c:	019b      	lsls	r3, r3, #6
   8067e:	4413      	add	r3, r2
   80680:	2205      	movs	r2, #5
   80682:	601a      	str	r2, [r3, #0]
}
   80684:	bf00      	nop
   80686:	370c      	adds	r7, #12
   80688:	46bd      	mov	sp, r7
   8068a:	bc80      	pop	{r7}
   8068c:	4770      	bx	lr

0008068e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   8068e:	b480      	push	{r7}
   80690:	b085      	sub	sp, #20
   80692:	af00      	add	r7, sp, #0
   80694:	60f8      	str	r0, [r7, #12]
   80696:	60b9      	str	r1, [r7, #8]
   80698:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8069a:	68fa      	ldr	r2, [r7, #12]
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	019b      	lsls	r3, r3, #6
   806a0:	4413      	add	r3, r2
   806a2:	331c      	adds	r3, #28
   806a4:	687a      	ldr	r2, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
}
   806a8:	bf00      	nop
   806aa:	3714      	adds	r7, #20
   806ac:	46bd      	mov	sp, r7
   806ae:	bc80      	pop	{r7}
   806b0:	4770      	bx	lr

000806b2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   806b2:	b480      	push	{r7}
   806b4:	b087      	sub	sp, #28
   806b6:	af00      	add	r7, sp, #0
   806b8:	60f8      	str	r0, [r7, #12]
   806ba:	60b9      	str	r1, [r7, #8]
   806bc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806be:	68fa      	ldr	r2, [r7, #12]
   806c0:	68bb      	ldr	r3, [r7, #8]
   806c2:	019b      	lsls	r3, r3, #6
   806c4:	4413      	add	r3, r2
   806c6:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   806c8:	697b      	ldr	r3, [r7, #20]
   806ca:	687a      	ldr	r2, [r7, #4]
   806cc:	625a      	str	r2, [r3, #36]	; 0x24
}
   806ce:	bf00      	nop
   806d0:	371c      	adds	r7, #28
   806d2:	46bd      	mov	sp, r7
   806d4:	bc80      	pop	{r7}
   806d6:	4770      	bx	lr

000806d8 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   806d8:	b480      	push	{r7}
   806da:	b085      	sub	sp, #20
   806dc:	af00      	add	r7, sp, #0
   806de:	6078      	str	r0, [r7, #4]
   806e0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	683b      	ldr	r3, [r7, #0]
   806e6:	019b      	lsls	r3, r3, #6
   806e8:	4413      	add	r3, r2
   806ea:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	6a1b      	ldr	r3, [r3, #32]
}
   806f0:	4618      	mov	r0, r3
   806f2:	3714      	adds	r7, #20
   806f4:	46bd      	mov	sp, r7
   806f6:	bc80      	pop	{r7}
   806f8:	4770      	bx	lr

000806fa <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806fa:	b480      	push	{r7}
   806fc:	b087      	sub	sp, #28
   806fe:	af00      	add	r7, sp, #0
   80700:	60f8      	str	r0, [r7, #12]
   80702:	60b9      	str	r1, [r7, #8]
   80704:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   80706:	68bb      	ldr	r3, [r7, #8]
   80708:	085a      	lsrs	r2, r3, #1
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	441a      	add	r2, r3
   8070e:	68bb      	ldr	r3, [r7, #8]
   80710:	fbb2 f3f3 	udiv	r3, r2, r3
   80714:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   80716:	697b      	ldr	r3, [r7, #20]
   80718:	2b03      	cmp	r3, #3
   8071a:	d903      	bls.n	80724 <usart_set_spi_master_baudrate+0x2a>
   8071c:	697b      	ldr	r3, [r7, #20]
   8071e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   80722:	d301      	bcc.n	80728 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   80724:	2301      	movs	r3, #1
   80726:	e003      	b.n	80730 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80728:	68fb      	ldr	r3, [r7, #12]
   8072a:	697a      	ldr	r2, [r7, #20]
   8072c:	621a      	str	r2, [r3, #32]

	return 0;
   8072e:	2300      	movs	r3, #0
}
   80730:	4618      	mov	r0, r3
   80732:	371c      	adds	r7, #28
   80734:	46bd      	mov	sp, r7
   80736:	bc80      	pop	{r7}
   80738:	4770      	bx	lr
	...

0008073c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8073c:	b580      	push	{r7, lr}
   8073e:	b082      	sub	sp, #8
   80740:	af00      	add	r7, sp, #0
   80742:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   80744:	6878      	ldr	r0, [r7, #4]
   80746:	4b0d      	ldr	r3, [pc, #52]	; (8077c <usart_reset+0x40>)
   80748:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8074a:	687b      	ldr	r3, [r7, #4]
   8074c:	2200      	movs	r2, #0
   8074e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   80750:	687b      	ldr	r3, [r7, #4]
   80752:	2200      	movs	r2, #0
   80754:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80756:	687b      	ldr	r3, [r7, #4]
   80758:	2200      	movs	r2, #0
   8075a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8075c:	6878      	ldr	r0, [r7, #4]
   8075e:	4b08      	ldr	r3, [pc, #32]	; (80780 <usart_reset+0x44>)
   80760:	4798      	blx	r3
	usart_reset_rx(p_usart);
   80762:	6878      	ldr	r0, [r7, #4]
   80764:	4b07      	ldr	r3, [pc, #28]	; (80784 <usart_reset+0x48>)
   80766:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   80768:	6878      	ldr	r0, [r7, #4]
   8076a:	4b07      	ldr	r3, [pc, #28]	; (80788 <usart_reset+0x4c>)
   8076c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8076e:	6878      	ldr	r0, [r7, #4]
   80770:	4b06      	ldr	r3, [pc, #24]	; (8078c <usart_reset+0x50>)
   80772:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   80774:	bf00      	nop
   80776:	3708      	adds	r7, #8
   80778:	46bd      	mov	sp, r7
   8077a:	bd80      	pop	{r7, pc}
   8077c:	00080999 	.word	0x00080999
   80780:	000808d1 	.word	0x000808d1
   80784:	00080919 	.word	0x00080919
   80788:	00080931 	.word	0x00080931
   8078c:	0008094b 	.word	0x0008094b

00080790 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80790:	b580      	push	{r7, lr}
   80792:	b084      	sub	sp, #16
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	60b9      	str	r1, [r7, #8]
   8079a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8079c:	68f8      	ldr	r0, [r7, #12]
   8079e:	4b3d      	ldr	r3, [pc, #244]	; (80894 <usart_init_spi_master+0x104>)
   807a0:	4798      	blx	r3

	ul_reg_val = 0;
   807a2:	4b3d      	ldr	r3, [pc, #244]	; (80898 <usart_init_spi_master+0x108>)
   807a4:	2200      	movs	r2, #0
   807a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807a8:	68bb      	ldr	r3, [r7, #8]
   807aa:	2b00      	cmp	r3, #0
   807ac:	d00d      	beq.n	807ca <usart_init_spi_master+0x3a>
   807ae:	68bb      	ldr	r3, [r7, #8]
   807b0:	689b      	ldr	r3, [r3, #8]
   807b2:	2b03      	cmp	r3, #3
   807b4:	d809      	bhi.n	807ca <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   807b6:	68bb      	ldr	r3, [r7, #8]
   807b8:	681b      	ldr	r3, [r3, #0]
   807ba:	687a      	ldr	r2, [r7, #4]
   807bc:	4619      	mov	r1, r3
   807be:	68f8      	ldr	r0, [r7, #12]
   807c0:	4b36      	ldr	r3, [pc, #216]	; (8089c <usart_init_spi_master+0x10c>)
   807c2:	4798      	blx	r3
   807c4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   807c6:	2b00      	cmp	r3, #0
   807c8:	d001      	beq.n	807ce <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   807ca:	2301      	movs	r3, #1
   807cc:	e05d      	b.n	8088a <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   807ce:	68bb      	ldr	r3, [r7, #8]
   807d0:	685a      	ldr	r2, [r3, #4]
   807d2:	4b31      	ldr	r3, [pc, #196]	; (80898 <usart_init_spi_master+0x108>)
   807d4:	681b      	ldr	r3, [r3, #0]
   807d6:	4313      	orrs	r3, r2
   807d8:	4a2f      	ldr	r2, [pc, #188]	; (80898 <usart_init_spi_master+0x108>)
   807da:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   807dc:	68bb      	ldr	r3, [r7, #8]
   807de:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   807e0:	4b2d      	ldr	r3, [pc, #180]	; (80898 <usart_init_spi_master+0x108>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	4313      	orrs	r3, r2
   807e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   807ea:	f043 030e 	orr.w	r3, r3, #14
   807ee:	4a2a      	ldr	r2, [pc, #168]	; (80898 <usart_init_spi_master+0x108>)
   807f0:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   807f2:	68bb      	ldr	r3, [r7, #8]
   807f4:	689b      	ldr	r3, [r3, #8]
   807f6:	2b03      	cmp	r3, #3
   807f8:	d83e      	bhi.n	80878 <usart_init_spi_master+0xe8>
   807fa:	a201      	add	r2, pc, #4	; (adr r2, 80800 <usart_init_spi_master+0x70>)
   807fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80800:	00080811 	.word	0x00080811
   80804:	0008082b 	.word	0x0008082b
   80808:	00080845 	.word	0x00080845
   8080c:	0008085f 	.word	0x0008085f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   80810:	4b21      	ldr	r3, [pc, #132]	; (80898 <usart_init_spi_master+0x108>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   80818:	4a1f      	ldr	r2, [pc, #124]	; (80898 <usart_init_spi_master+0x108>)
   8081a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8081c:	4b1e      	ldr	r3, [pc, #120]	; (80898 <usart_init_spi_master+0x108>)
   8081e:	681b      	ldr	r3, [r3, #0]
   80820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80824:	4a1c      	ldr	r2, [pc, #112]	; (80898 <usart_init_spi_master+0x108>)
   80826:	6013      	str	r3, [r2, #0]
		break;
   80828:	e027      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8082a:	4b1b      	ldr	r3, [pc, #108]	; (80898 <usart_init_spi_master+0x108>)
   8082c:	681b      	ldr	r3, [r3, #0]
   8082e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80832:	4a19      	ldr	r2, [pc, #100]	; (80898 <usart_init_spi_master+0x108>)
   80834:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   80836:	4b18      	ldr	r3, [pc, #96]	; (80898 <usart_init_spi_master+0x108>)
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8083e:	4a16      	ldr	r2, [pc, #88]	; (80898 <usart_init_spi_master+0x108>)
   80840:	6013      	str	r3, [r2, #0]
		break;
   80842:	e01a      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   80844:	4b14      	ldr	r3, [pc, #80]	; (80898 <usart_init_spi_master+0x108>)
   80846:	681b      	ldr	r3, [r3, #0]
   80848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8084c:	4a12      	ldr	r2, [pc, #72]	; (80898 <usart_init_spi_master+0x108>)
   8084e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   80850:	4b11      	ldr	r3, [pc, #68]	; (80898 <usart_init_spi_master+0x108>)
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80858:	4a0f      	ldr	r2, [pc, #60]	; (80898 <usart_init_spi_master+0x108>)
   8085a:	6013      	str	r3, [r2, #0]
		break;
   8085c:	e00d      	b.n	8087a <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8085e:	4b0e      	ldr	r3, [pc, #56]	; (80898 <usart_init_spi_master+0x108>)
   80860:	681b      	ldr	r3, [r3, #0]
   80862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80866:	4a0c      	ldr	r2, [pc, #48]	; (80898 <usart_init_spi_master+0x108>)
   80868:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8086a:	4b0b      	ldr	r3, [pc, #44]	; (80898 <usart_init_spi_master+0x108>)
   8086c:	681b      	ldr	r3, [r3, #0]
   8086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80872:	4a09      	ldr	r2, [pc, #36]	; (80898 <usart_init_spi_master+0x108>)
   80874:	6013      	str	r3, [r2, #0]
		break;
   80876:	e000      	b.n	8087a <usart_init_spi_master+0xea>

	default:
		break;
   80878:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8087a:	68fb      	ldr	r3, [r7, #12]
   8087c:	685a      	ldr	r2, [r3, #4]
   8087e:	4b06      	ldr	r3, [pc, #24]	; (80898 <usart_init_spi_master+0x108>)
   80880:	681b      	ldr	r3, [r3, #0]
   80882:	431a      	orrs	r2, r3
   80884:	68fb      	ldr	r3, [r7, #12]
   80886:	605a      	str	r2, [r3, #4]

	return 0;
   80888:	2300      	movs	r3, #0
}
   8088a:	4618      	mov	r0, r3
   8088c:	3710      	adds	r7, #16
   8088e:	46bd      	mov	sp, r7
   80890:	bd80      	pop	{r7, pc}
   80892:	bf00      	nop
   80894:	0008073d 	.word	0x0008073d
   80898:	20070b6c 	.word	0x20070b6c
   8089c:	000806fb 	.word	0x000806fb

000808a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   808a0:	b480      	push	{r7}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   808a8:	687b      	ldr	r3, [r7, #4]
   808aa:	2240      	movs	r2, #64	; 0x40
   808ac:	601a      	str	r2, [r3, #0]
}
   808ae:	bf00      	nop
   808b0:	370c      	adds	r7, #12
   808b2:	46bd      	mov	sp, r7
   808b4:	bc80      	pop	{r7}
   808b6:	4770      	bx	lr

000808b8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
   808c0:	687b      	ldr	r3, [r7, #4]
   808c2:	2280      	movs	r2, #128	; 0x80
   808c4:	601a      	str	r2, [r3, #0]
}
   808c6:	bf00      	nop
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	bc80      	pop	{r7}
   808ce:	4770      	bx	lr

000808d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   808d0:	b480      	push	{r7}
   808d2:	b083      	sub	sp, #12
   808d4:	af00      	add	r7, sp, #0
   808d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   808d8:	687b      	ldr	r3, [r7, #4]
   808da:	2288      	movs	r2, #136	; 0x88
   808dc:	601a      	str	r2, [r3, #0]
}
   808de:	bf00      	nop
   808e0:	370c      	adds	r7, #12
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr

000808e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   808e8:	b480      	push	{r7}
   808ea:	b083      	sub	sp, #12
   808ec:	af00      	add	r7, sp, #0
   808ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   808f0:	687b      	ldr	r3, [r7, #4]
   808f2:	2210      	movs	r2, #16
   808f4:	601a      	str	r2, [r3, #0]
}
   808f6:	bf00      	nop
   808f8:	370c      	adds	r7, #12
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr

00080900 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	2220      	movs	r2, #32
   8090c:	601a      	str	r2, [r3, #0]
}
   8090e:	bf00      	nop
   80910:	370c      	adds	r7, #12
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr

00080918 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80920:	687b      	ldr	r3, [r7, #4]
   80922:	2224      	movs	r2, #36	; 0x24
   80924:	601a      	str	r2, [r3, #0]
}
   80926:	bf00      	nop
   80928:	370c      	adds	r7, #12
   8092a:	46bd      	mov	sp, r7
   8092c:	bc80      	pop	{r7}
   8092e:	4770      	bx	lr

00080930 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   80930:	b480      	push	{r7}
   80932:	b083      	sub	sp, #12
   80934:	af00      	add	r7, sp, #0
   80936:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   80938:	687b      	ldr	r3, [r7, #4]
   8093a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8093e:	601a      	str	r2, [r3, #0]
}
   80940:	bf00      	nop
   80942:	370c      	adds	r7, #12
   80944:	46bd      	mov	sp, r7
   80946:	bc80      	pop	{r7}
   80948:	4770      	bx	lr

0008094a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8094a:	b480      	push	{r7}
   8094c:	b083      	sub	sp, #12
   8094e:	af00      	add	r7, sp, #0
   80950:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80958:	601a      	str	r2, [r3, #0]
}
   8095a:	bf00      	nop
   8095c:	370c      	adds	r7, #12
   8095e:	46bd      	mov	sp, r7
   80960:	bc80      	pop	{r7}
   80962:	4770      	bx	lr

00080964 <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
   80964:	b480      	push	{r7}
   80966:	b083      	sub	sp, #12
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
   8096c:	687b      	ldr	r3, [r7, #4]
   8096e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80972:	601a      	str	r2, [r3, #0]
}
   80974:	bf00      	nop
   80976:	370c      	adds	r7, #12
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr

0008097e <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
   8097e:	b480      	push	{r7}
   80980:	b083      	sub	sp, #12
   80982:	af00      	add	r7, sp, #0
   80984:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
   80986:	687b      	ldr	r3, [r7, #4]
   80988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8098c:	601a      	str	r2, [r3, #0]
}
   8098e:	bf00      	nop
   80990:	370c      	adds	r7, #12
   80992:	46bd      	mov	sp, r7
   80994:	bc80      	pop	{r7}
   80996:	4770      	bx	lr

00080998 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   80998:	b480      	push	{r7}
   8099a:	b083      	sub	sp, #12
   8099c:	af00      	add	r7, sp, #0
   8099e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	4a04      	ldr	r2, [pc, #16]	; (809b4 <usart_disable_writeprotect+0x1c>)
   809a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   809a8:	bf00      	nop
   809aa:	370c      	adds	r7, #12
   809ac:	46bd      	mov	sp, r7
   809ae:	bc80      	pop	{r7}
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	55534100 	.word	0x55534100

000809b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   809b8:	b480      	push	{r7}
   809ba:	b083      	sub	sp, #12
   809bc:	af00      	add	r7, sp, #0
   809be:	4603      	mov	r3, r0
   809c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   809c2:	4908      	ldr	r1, [pc, #32]	; (809e4 <NVIC_EnableIRQ+0x2c>)
   809c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   809c8:	095b      	lsrs	r3, r3, #5
   809ca:	79fa      	ldrb	r2, [r7, #7]
   809cc:	f002 021f 	and.w	r2, r2, #31
   809d0:	2001      	movs	r0, #1
   809d2:	fa00 f202 	lsl.w	r2, r0, r2
   809d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   809da:	bf00      	nop
   809dc:	370c      	adds	r7, #12
   809de:	46bd      	mov	sp, r7
   809e0:	bc80      	pop	{r7}
   809e2:	4770      	bx	lr
   809e4:	e000e100 	.word	0xe000e100

000809e8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   809e8:	b480      	push	{r7}
   809ea:	b083      	sub	sp, #12
   809ec:	af00      	add	r7, sp, #0
   809ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   809f0:	687b      	ldr	r3, [r7, #4]
   809f2:	2b07      	cmp	r3, #7
   809f4:	d825      	bhi.n	80a42 <osc_get_rate+0x5a>
   809f6:	a201      	add	r2, pc, #4	; (adr r2, 809fc <osc_get_rate+0x14>)
   809f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809fc:	00080a1d 	.word	0x00080a1d
   80a00:	00080a23 	.word	0x00080a23
   80a04:	00080a29 	.word	0x00080a29
   80a08:	00080a2f 	.word	0x00080a2f
   80a0c:	00080a33 	.word	0x00080a33
   80a10:	00080a37 	.word	0x00080a37
   80a14:	00080a3b 	.word	0x00080a3b
   80a18:	00080a3f 	.word	0x00080a3f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80a1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80a20:	e010      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a26:	e00d      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80a2c:	e00a      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80a2e:	4b08      	ldr	r3, [pc, #32]	; (80a50 <osc_get_rate+0x68>)
   80a30:	e008      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80a32:	4b08      	ldr	r3, [pc, #32]	; (80a54 <osc_get_rate+0x6c>)
   80a34:	e006      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <osc_get_rate+0x70>)
   80a38:	e004      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <osc_get_rate+0x70>)
   80a3c:	e002      	b.n	80a44 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80a3e:	4b06      	ldr	r3, [pc, #24]	; (80a58 <osc_get_rate+0x70>)
   80a40:	e000      	b.n	80a44 <osc_get_rate+0x5c>
	}

	return 0;
   80a42:	2300      	movs	r3, #0
}
   80a44:	4618      	mov	r0, r3
   80a46:	370c      	adds	r7, #12
   80a48:	46bd      	mov	sp, r7
   80a4a:	bc80      	pop	{r7}
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	003d0900 	.word	0x003d0900
   80a54:	007a1200 	.word	0x007a1200
   80a58:	00b71b00 	.word	0x00b71b00

00080a5c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80a60:	2006      	movs	r0, #6
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <sysclk_get_main_hz+0x18>)
   80a64:	4798      	blx	r3
   80a66:	4602      	mov	r2, r0
   80a68:	4613      	mov	r3, r2
   80a6a:	00db      	lsls	r3, r3, #3
   80a6c:	1a9b      	subs	r3, r3, r2
   80a6e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80a70:	4618      	mov	r0, r3
   80a72:	bd80      	pop	{r7, pc}
   80a74:	000809e9 	.word	0x000809e9

00080a78 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   80a78:	b580      	push	{r7, lr}
   80a7a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80a7c:	4b02      	ldr	r3, [pc, #8]	; (80a88 <sysclk_get_peripheral_hz+0x10>)
   80a7e:	4798      	blx	r3
   80a80:	4603      	mov	r3, r0
   80a82:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80a84:	4618      	mov	r0, r3
   80a86:	bd80      	pop	{r7, pc}
   80a88:	00080a5d 	.word	0x00080a5d

00080a8c <spi_init>:
sensor_to_motor_t stm;

uint8_t sens_buf[sizeof(stm)];

void spi_init(void)
{
   80a8c:	b580      	push	{r7, lr}
   80a8e:	af00      	add	r7, sp, #0
    configure_dmac();
   80a90:	4b02      	ldr	r3, [pc, #8]	; (80a9c <spi_init+0x10>)
   80a92:	4798      	blx	r3
    spi_master_initialize();
   80a94:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <spi_init+0x14>)
   80a96:	4798      	blx	r3
}
   80a98:	bf00      	nop
   80a9a:	bd80      	pop	{r7, pc}
   80a9c:	00080bb9 	.word	0x00080bb9
   80aa0:	00080aa5 	.word	0x00080aa5

00080aa4 <spi_master_initialize>:

void spi_master_initialize(void)
{
   80aa4:	b590      	push	{r4, r7, lr}
   80aa6:	b085      	sub	sp, #20
   80aa8:	af00      	add	r7, sp, #0
    dmac_channel_disable(DMAC, 1);
   80aaa:	2101      	movs	r1, #1
   80aac:	4810      	ldr	r0, [pc, #64]	; (80af0 <spi_master_initialize+0x4c>)
   80aae:	4b11      	ldr	r3, [pc, #68]	; (80af4 <spi_master_initialize+0x50>)
   80ab0:	4798      	blx	r3
    dmac_channel_disable(DMAC, 0);
   80ab2:	2100      	movs	r1, #0
   80ab4:	480e      	ldr	r0, [pc, #56]	; (80af0 <spi_master_initialize+0x4c>)
   80ab6:	4b0f      	ldr	r3, [pc, #60]	; (80af4 <spi_master_initialize+0x50>)
   80ab8:	4798      	blx	r3
    pmc_enable_periph_clk(ID_USART1);
   80aba:	2012      	movs	r0, #18
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <spi_master_initialize+0x54>)
   80abe:	4798      	blx	r3
    usart_spi_disable(USART1);
   80ac0:	480e      	ldr	r0, [pc, #56]	; (80afc <spi_master_initialize+0x58>)
   80ac2:	4b0f      	ldr	r3, [pc, #60]	; (80b00 <spi_master_initialize+0x5c>)
   80ac4:	4798      	blx	r3

    usart_spi_opt_t spi_settings =
   80ac6:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <spi_master_initialize+0x60>)
   80ac8:	463c      	mov	r4, r7
   80aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .baudrate = 1000000,
        .char_length = US_MR_CHRL_8_BIT,
        .spi_mode = SPI_MODE_0,
        .channel_mode = US_MR_CHMODE_NORMAL
    };
    usart_init_spi_master(USART1, &spi_settings, sysclk_get_peripheral_hz());
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <spi_master_initialize+0x64>)
   80ad2:	4798      	blx	r3
   80ad4:	4602      	mov	r2, r0
   80ad6:	463b      	mov	r3, r7
   80ad8:	4619      	mov	r1, r3
   80ada:	4808      	ldr	r0, [pc, #32]	; (80afc <spi_master_initialize+0x58>)
   80adc:	4b0b      	ldr	r3, [pc, #44]	; (80b0c <spi_master_initialize+0x68>)
   80ade:	4798      	blx	r3
    usart_spi_enable(USART1);
   80ae0:	4806      	ldr	r0, [pc, #24]	; (80afc <spi_master_initialize+0x58>)
   80ae2:	4b0b      	ldr	r3, [pc, #44]	; (80b10 <spi_master_initialize+0x6c>)
   80ae4:	4798      	blx	r3
}
   80ae6:	bf00      	nop
   80ae8:	3714      	adds	r7, #20
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	400c4000 	.word	0x400c4000
   80af4:	00083553 	.word	0x00083553
   80af8:	00083911 	.word	0x00083911
   80afc:	4009c000 	.word	0x4009c000
   80b00:	00080185 	.word	0x00080185
   80b04:	000895a8 	.word	0x000895a8
   80b08:	00080a79 	.word	0x00080a79
   80b0c:	00080791 	.word	0x00080791
   80b10:	00080161 	.word	0x00080161

00080b14 <spi_master_transfer>:

void spi_master_transfer(void *p_buf, uint32_t ul_size)
{
   80b14:	b580      	push	{r7, lr}
   80b16:	b088      	sub	sp, #32
   80b18:	af00      	add	r7, sp, #0
   80b1a:	6078      	str	r0, [r7, #4]
   80b1c:	6039      	str	r1, [r7, #0]
    dma_transfer_descriptor_t dmac_trans;

    usart_spi_force_chip_select(USART1);
   80b1e:	481c      	ldr	r0, [pc, #112]	; (80b90 <spi_master_transfer+0x7c>)
   80b20:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <spi_master_transfer+0x80>)
   80b22:	4798      	blx	r3

    dmac_channel_disable(DMAC, 1);
   80b24:	2101      	movs	r1, #1
   80b26:	481c      	ldr	r0, [pc, #112]	; (80b98 <spi_master_transfer+0x84>)
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <spi_master_transfer+0x88>)
   80b2a:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) p_buf;
   80b2c:	687b      	ldr	r3, [r7, #4]
   80b2e:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) & USART1->US_THR;
   80b30:	4b1b      	ldr	r3, [pc, #108]	; (80ba0 <spi_master_transfer+0x8c>)
   80b32:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b34:	683b      	ldr	r3, [r7, #0]
   80b36:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_MEM2PER_DMA_FC | DMAC_CTRLB_SRC_INCR_INCREMENTING | DMAC_CTRLB_DST_INCR_FIXED;
   80b38:	4b1a      	ldr	r3, [pc, #104]	; (80ba4 <spi_master_transfer+0x90>)
   80b3a:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b3c:	2300      	movs	r3, #0
   80b3e:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 1, &dmac_trans);
   80b40:	f107 030c 	add.w	r3, r7, #12
   80b44:	461a      	mov	r2, r3
   80b46:	2101      	movs	r1, #1
   80b48:	4813      	ldr	r0, [pc, #76]	; (80b98 <spi_master_transfer+0x84>)
   80b4a:	4b17      	ldr	r3, [pc, #92]	; (80ba8 <spi_master_transfer+0x94>)
   80b4c:	4798      	blx	r3
    dmac_channel_enable(DMAC, 1);
   80b4e:	2101      	movs	r1, #1
   80b50:	4811      	ldr	r0, [pc, #68]	; (80b98 <spi_master_transfer+0x84>)
   80b52:	4b16      	ldr	r3, [pc, #88]	; (80bac <spi_master_transfer+0x98>)
   80b54:	4798      	blx	r3

    dmac_channel_disable(DMAC, 0);
   80b56:	2100      	movs	r1, #0
   80b58:	480f      	ldr	r0, [pc, #60]	; (80b98 <spi_master_transfer+0x84>)
   80b5a:	4b10      	ldr	r3, [pc, #64]	; (80b9c <spi_master_transfer+0x88>)
   80b5c:	4798      	blx	r3
    dmac_trans.ul_source_addr = (uint32_t) & USART1->US_RHR;
   80b5e:	4b14      	ldr	r3, [pc, #80]	; (80bb0 <spi_master_transfer+0x9c>)
   80b60:	60fb      	str	r3, [r7, #12]
    dmac_trans.ul_destination_addr = (uint32_t) p_buf;
   80b62:	687b      	ldr	r3, [r7, #4]
   80b64:	613b      	str	r3, [r7, #16]
    dmac_trans.ul_ctrlA = ul_size | DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;
   80b66:	683b      	ldr	r3, [r7, #0]
   80b68:	617b      	str	r3, [r7, #20]
    dmac_trans.ul_ctrlB = DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR | DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED | DMAC_CTRLB_DST_INCR_INCREMENTING;
   80b6a:	4b12      	ldr	r3, [pc, #72]	; (80bb4 <spi_master_transfer+0xa0>)
   80b6c:	61bb      	str	r3, [r7, #24]
    dmac_trans.ul_descriptor_addr = 0;
   80b6e:	2300      	movs	r3, #0
   80b70:	61fb      	str	r3, [r7, #28]
    dmac_channel_single_buf_transfer_init(DMAC, 0, (dma_transfer_descriptor_t *) & dmac_trans);
   80b72:	f107 030c 	add.w	r3, r7, #12
   80b76:	461a      	mov	r2, r3
   80b78:	2100      	movs	r1, #0
   80b7a:	4807      	ldr	r0, [pc, #28]	; (80b98 <spi_master_transfer+0x84>)
   80b7c:	4b0a      	ldr	r3, [pc, #40]	; (80ba8 <spi_master_transfer+0x94>)
   80b7e:	4798      	blx	r3
    dmac_channel_enable(DMAC, 0);
   80b80:	2100      	movs	r1, #0
   80b82:	4805      	ldr	r0, [pc, #20]	; (80b98 <spi_master_transfer+0x84>)
   80b84:	4b09      	ldr	r3, [pc, #36]	; (80bac <spi_master_transfer+0x98>)
   80b86:	4798      	blx	r3
}
   80b88:	bf00      	nop
   80b8a:	3720      	adds	r7, #32
   80b8c:	46bd      	mov	sp, r7
   80b8e:	bd80      	pop	{r7, pc}
   80b90:	4009c000 	.word	0x4009c000
   80b94:	00080965 	.word	0x00080965
   80b98:	400c4000 	.word	0x400c4000
   80b9c:	00083553 	.word	0x00083553
   80ba0:	4009c01c 	.word	0x4009c01c
   80ba4:	20310000 	.word	0x20310000
   80ba8:	0008366d 	.word	0x0008366d
   80bac:	00083535 	.word	0x00083535
   80bb0:	4009c018 	.word	0x4009c018
   80bb4:	02510000 	.word	0x02510000

00080bb8 <configure_dmac>:

void configure_dmac(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
    uint32_t ul_cfg;

    /* Initialize and enable DMA controller. */
    pmc_enable_periph_clk(ID_DMAC);
   80bbe:	2027      	movs	r0, #39	; 0x27
   80bc0:	4b18      	ldr	r3, [pc, #96]	; (80c24 <configure_dmac+0x6c>)
   80bc2:	4798      	blx	r3
    dmac_init(DMAC);
   80bc4:	4818      	ldr	r0, [pc, #96]	; (80c28 <configure_dmac+0x70>)
   80bc6:	4b19      	ldr	r3, [pc, #100]	; (80c2c <configure_dmac+0x74>)
   80bc8:	4798      	blx	r3
    dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
   80bca:	2110      	movs	r1, #16
   80bcc:	4816      	ldr	r0, [pc, #88]	; (80c28 <configure_dmac+0x70>)
   80bce:	4b18      	ldr	r3, [pc, #96]	; (80c30 <configure_dmac+0x78>)
   80bd0:	4798      	blx	r3
    dmac_enable(DMAC);
   80bd2:	4815      	ldr	r0, [pc, #84]	; (80c28 <configure_dmac+0x70>)
   80bd4:	4b17      	ldr	r3, [pc, #92]	; (80c34 <configure_dmac+0x7c>)
   80bd6:	4798      	blx	r3

    /* Configure DMA RX channel. */
    ul_cfg = 0;
   80bd8:	2300      	movs	r3, #0
   80bda:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_SRC_PER(14) | DMAC_CFG_SRC_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bdc:	687b      	ldr	r3, [r7, #4]
   80bde:	f443 3381 	orr.w	r3, r3, #66048	; 0x10200
   80be2:	f043 030e 	orr.w	r3, r3, #14
   80be6:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 0, ul_cfg);
   80be8:	687a      	ldr	r2, [r7, #4]
   80bea:	2100      	movs	r1, #0
   80bec:	480e      	ldr	r0, [pc, #56]	; (80c28 <configure_dmac+0x70>)
   80bee:	4b12      	ldr	r3, [pc, #72]	; (80c38 <configure_dmac+0x80>)
   80bf0:	4798      	blx	r3

    /* Configure DMA TX channel. */
    ul_cfg = 0;
   80bf2:	2300      	movs	r3, #0
   80bf4:	607b      	str	r3, [r7, #4]
    ul_cfg |= DMAC_CFG_DST_PER(13) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
   80bf6:	687b      	ldr	r3, [r7, #4]
   80bf8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   80bfc:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
   80c00:	607b      	str	r3, [r7, #4]
    dmac_channel_set_configuration(DMAC, 1, ul_cfg);
   80c02:	687a      	ldr	r2, [r7, #4]
   80c04:	2101      	movs	r1, #1
   80c06:	4808      	ldr	r0, [pc, #32]	; (80c28 <configure_dmac+0x70>)
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <configure_dmac+0x80>)
   80c0a:	4798      	blx	r3
    ul_cfg = 0;
    ul_cfg |= DMAC_CFG_DST_PER(1) | DMAC_CFG_DST_H2SEL | DMAC_CFG_SOD | DMAC_CFG_FIFOCFG_ALAP_CFG;
    dmac_channel_set_configuration(DMAC, 4, ul_cfg);
    #endif
    /* Enable receive channel interrupt for DMAC. */
    NVIC_EnableIRQ(DMAC_IRQn);
   80c0c:	2027      	movs	r0, #39	; 0x27
   80c0e:	4b0b      	ldr	r3, [pc, #44]	; (80c3c <configure_dmac+0x84>)
   80c10:	4798      	blx	r3
    dmac_enable_interrupt(DMAC, (1 << 0));
   80c12:	2101      	movs	r1, #1
   80c14:	4804      	ldr	r0, [pc, #16]	; (80c28 <configure_dmac+0x70>)
   80c16:	4b0a      	ldr	r3, [pc, #40]	; (80c40 <configure_dmac+0x88>)
   80c18:	4798      	blx	r3
}
   80c1a:	bf00      	nop
   80c1c:	3708      	adds	r7, #8
   80c1e:	46bd      	mov	sp, r7
   80c20:	bd80      	pop	{r7, pc}
   80c22:	bf00      	nop
   80c24:	00083911 	.word	0x00083911
   80c28:	400c4000 	.word	0x400c4000
   80c2c:	0008348d 	.word	0x0008348d
   80c30:	000834a9 	.word	0x000834a9
   80c34:	000834cf 	.word	0x000834cf
   80c38:	00083643 	.word	0x00083643
   80c3c:	000809b9 	.word	0x000809b9
   80c40:	00083505 	.word	0x00083505

00080c44 <DMAC_Handler>:

void DMAC_Handler(void)
{
   80c44:	b580      	push	{r7, lr}
   80c46:	af00      	add	r7, sp, #0
    static uint32_t ul_status;

    ul_status = dmac_get_status(DMAC);
   80c48:	480b      	ldr	r0, [pc, #44]	; (80c78 <DMAC_Handler+0x34>)
   80c4a:	4b0c      	ldr	r3, [pc, #48]	; (80c7c <DMAC_Handler+0x38>)
   80c4c:	4798      	blx	r3
   80c4e:	4602      	mov	r2, r0
   80c50:	4b0b      	ldr	r3, [pc, #44]	; (80c80 <DMAC_Handler+0x3c>)
   80c52:	601a      	str	r2, [r3, #0]
    
    if (ul_status & (1 << 0))
   80c54:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <DMAC_Handler+0x3c>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	f003 0301 	and.w	r3, r3, #1
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d008      	beq.n	80c72 <DMAC_Handler+0x2e>
    {
        usart_spi_release_chip_select(USART1);
   80c60:	4808      	ldr	r0, [pc, #32]	; (80c84 <DMAC_Handler+0x40>)
   80c62:	4b09      	ldr	r3, [pc, #36]	; (80c88 <DMAC_Handler+0x44>)
   80c64:	4798      	blx	r3
        memcpy(&stm, &sens_buf, sizeof(stm));
   80c66:	4b09      	ldr	r3, [pc, #36]	; (80c8c <DMAC_Handler+0x48>)
   80c68:	4a09      	ldr	r2, [pc, #36]	; (80c90 <DMAC_Handler+0x4c>)
   80c6a:	8811      	ldrh	r1, [r2, #0]
   80c6c:	7892      	ldrb	r2, [r2, #2]
   80c6e:	8019      	strh	r1, [r3, #0]
   80c70:	709a      	strb	r2, [r3, #2]
    }
}
   80c72:	bf00      	nop
   80c74:	bd80      	pop	{r7, pc}
   80c76:	bf00      	nop
   80c78:	400c4000 	.word	0x400c4000
   80c7c:	0008351f 	.word	0x0008351f
   80c80:	20070b70 	.word	0x20070b70
   80c84:	4009c000 	.word	0x4009c000
   80c88:	0008097f 	.word	0x0008097f
   80c8c:	20070e10 	.word	0x20070e10
   80c90:	20070e08 	.word	0x20070e08

00080c94 <NVIC_EnableIRQ>:
{
   80c94:	b480      	push	{r7}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
   80c9a:	4603      	mov	r3, r0
   80c9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c9e:	4908      	ldr	r1, [pc, #32]	; (80cc0 <NVIC_EnableIRQ+0x2c>)
   80ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ca4:	095b      	lsrs	r3, r3, #5
   80ca6:	79fa      	ldrb	r2, [r7, #7]
   80ca8:	f002 021f 	and.w	r2, r2, #31
   80cac:	2001      	movs	r0, #1
   80cae:	fa00 f202 	lsl.w	r2, r0, r2
   80cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80cb6:	bf00      	nop
   80cb8:	370c      	adds	r7, #12
   80cba:	46bd      	mov	sp, r7
   80cbc:	bc80      	pop	{r7}
   80cbe:	4770      	bx	lr
   80cc0:	e000e100 	.word	0xe000e100

00080cc4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80cc4:	b480      	push	{r7}
   80cc6:	b083      	sub	sp, #12
   80cc8:	af00      	add	r7, sp, #0
   80cca:	4603      	mov	r3, r0
   80ccc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80cce:	4909      	ldr	r1, [pc, #36]	; (80cf4 <NVIC_ClearPendingIRQ+0x30>)
   80cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80cd4:	095b      	lsrs	r3, r3, #5
   80cd6:	79fa      	ldrb	r2, [r7, #7]
   80cd8:	f002 021f 	and.w	r2, r2, #31
   80cdc:	2001      	movs	r0, #1
   80cde:	fa00 f202 	lsl.w	r2, r0, r2
   80ce2:	3360      	adds	r3, #96	; 0x60
   80ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ce8:	bf00      	nop
   80cea:	370c      	adds	r7, #12
   80cec:	46bd      	mov	sp, r7
   80cee:	bc80      	pop	{r7}
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	e000e100 	.word	0xe000e100

00080cf8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80cf8:	b480      	push	{r7}
   80cfa:	b083      	sub	sp, #12
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2208      	movs	r2, #8
   80d04:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80d06:	687b      	ldr	r3, [r7, #4]
   80d08:	2220      	movs	r2, #32
   80d0a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80d0c:	687b      	ldr	r3, [r7, #4]
   80d0e:	2204      	movs	r2, #4
   80d10:	601a      	str	r2, [r3, #0]
}
   80d12:	bf00      	nop
   80d14:	370c      	adds	r7, #12
   80d16:	46bd      	mov	sp, r7
   80d18:	bc80      	pop	{r7}
   80d1a:	4770      	bx	lr

00080d1c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b084      	sub	sp, #16
   80d20:	af00      	add	r7, sp, #0
   80d22:	6078      	str	r0, [r7, #4]
   80d24:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80d26:	2300      	movs	r3, #0
   80d28:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80d2a:	687b      	ldr	r3, [r7, #4]
   80d2c:	f04f 32ff 	mov.w	r2, #4294967295
   80d30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80d32:	687b      	ldr	r3, [r7, #4]
   80d34:	6a1b      	ldr	r3, [r3, #32]

	twi_disable_interrupt(p_twi, MASK_ALL_INTERRUPTS);
   80d36:	f04f 31ff 	mov.w	r1, #4294967295
   80d3a:	6878      	ldr	r0, [r7, #4]
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <twi_master_init+0x74>)
   80d3e:	4798      	blx	r3

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80d40:	6878      	ldr	r0, [r7, #4]
   80d42:	4b14      	ldr	r3, [pc, #80]	; (80d94 <twi_master_init+0x78>)
   80d44:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80d46:	6878      	ldr	r0, [r7, #4]
   80d48:	4b13      	ldr	r3, [pc, #76]	; (80d98 <twi_master_init+0x7c>)
   80d4a:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80d4c:	683b      	ldr	r3, [r7, #0]
   80d4e:	6859      	ldr	r1, [r3, #4]
   80d50:	683b      	ldr	r3, [r7, #0]
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	461a      	mov	r2, r3
   80d56:	6878      	ldr	r0, [r7, #4]
   80d58:	4b10      	ldr	r3, [pc, #64]	; (80d9c <twi_master_init+0x80>)
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	2b01      	cmp	r3, #1
   80d60:	d101      	bne.n	80d66 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80d62:	2301      	movs	r3, #1
   80d64:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80d66:	683b      	ldr	r3, [r7, #0]
   80d68:	7a5b      	ldrb	r3, [r3, #9]
   80d6a:	2b01      	cmp	r3, #1
   80d6c:	d102      	bne.n	80d74 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80d6e:	687b      	ldr	r3, [r7, #4]
   80d70:	2240      	movs	r2, #64	; 0x40
   80d72:	601a      	str	r2, [r3, #0]
	}
    
    /* Error interrupts are always enabled. */
    twi_enable_interrupt(p_twi, IER_ERROR_INTERRUPTS);
   80d74:	f44f 7150 	mov.w	r1, #832	; 0x340
   80d78:	6878      	ldr	r0, [r7, #4]
   80d7a:	4b09      	ldr	r3, [pc, #36]	; (80da0 <twi_master_init+0x84>)
   80d7c:	4798      	blx	r3

    twiBusy = false;
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <twi_master_init+0x88>)
   80d80:	2200      	movs	r2, #0
   80d82:	701a      	strb	r2, [r3, #0]
    
	return status;
   80d84:	68fb      	ldr	r3, [r7, #12]
}
   80d86:	4618      	mov	r0, r3
   80d88:	3710      	adds	r7, #16
   80d8a:	46bd      	mov	sp, r7
   80d8c:	bd80      	pop	{r7, pc}
   80d8e:	bf00      	nop
   80d90:	000812ef 	.word	0x000812ef
   80d94:	00081351 	.word	0x00081351
   80d98:	00080cf9 	.word	0x00080cf9
   80d9c:	00080da9 	.word	0x00080da9
   80da0:	000812d5 	.word	0x000812d5
   80da4:	20070d94 	.word	0x20070d94

00080da8 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80da8:	b480      	push	{r7}
   80daa:	b089      	sub	sp, #36	; 0x24
   80dac:	af00      	add	r7, sp, #0
   80dae:	60f8      	str	r0, [r7, #12]
   80db0:	60b9      	str	r1, [r7, #8]
   80db2:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80db4:	2300      	movs	r3, #0
   80db6:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80db8:	68bb      	ldr	r3, [r7, #8]
   80dba:	4a34      	ldr	r2, [pc, #208]	; (80e8c <twi_set_speed+0xe4>)
   80dbc:	4293      	cmp	r3, r2
   80dbe:	d901      	bls.n	80dc4 <twi_set_speed+0x1c>
		return FAIL;
   80dc0:	2301      	movs	r3, #1
   80dc2:	e05d      	b.n	80e80 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80dc4:	68bb      	ldr	r3, [r7, #8]
   80dc6:	4a32      	ldr	r2, [pc, #200]	; (80e90 <twi_set_speed+0xe8>)
   80dc8:	4293      	cmp	r3, r2
   80dca:	d937      	bls.n	80e3c <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	4a31      	ldr	r2, [pc, #196]	; (80e94 <twi_set_speed+0xec>)
   80dd0:	fba2 2303 	umull	r2, r3, r2, r3
   80dd4:	0b9b      	lsrs	r3, r3, #14
   80dd6:	3b04      	subs	r3, #4
   80dd8:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80dda:	68ba      	ldr	r2, [r7, #8]
   80ddc:	4b2e      	ldr	r3, [pc, #184]	; (80e98 <twi_set_speed+0xf0>)
   80dde:	4413      	add	r3, r2
   80de0:	009b      	lsls	r3, r3, #2
   80de2:	687a      	ldr	r2, [r7, #4]
   80de4:	fbb2 f3f3 	udiv	r3, r2, r3
   80de8:	3b04      	subs	r3, #4
   80dea:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dec:	e005      	b.n	80dfa <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
   80dee:	69fb      	ldr	r3, [r7, #28]
   80df0:	3301      	adds	r3, #1
   80df2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80df4:	697b      	ldr	r3, [r7, #20]
   80df6:	085b      	lsrs	r3, r3, #1
   80df8:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80dfa:	697b      	ldr	r3, [r7, #20]
   80dfc:	2bff      	cmp	r3, #255	; 0xff
   80dfe:	d909      	bls.n	80e14 <twi_set_speed+0x6c>
   80e00:	69fb      	ldr	r3, [r7, #28]
   80e02:	2b06      	cmp	r3, #6
   80e04:	d9f3      	bls.n	80dee <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e06:	e005      	b.n	80e14 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
   80e08:	69fb      	ldr	r3, [r7, #28]
   80e0a:	3301      	adds	r3, #1
   80e0c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
   80e0e:	693b      	ldr	r3, [r7, #16]
   80e10:	085b      	lsrs	r3, r3, #1
   80e12:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e14:	693b      	ldr	r3, [r7, #16]
   80e16:	2bff      	cmp	r3, #255	; 0xff
   80e18:	d902      	bls.n	80e20 <twi_set_speed+0x78>
   80e1a:	69fb      	ldr	r3, [r7, #28]
   80e1c:	2b06      	cmp	r3, #6
   80e1e:	d9f3      	bls.n	80e08 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e20:	697b      	ldr	r3, [r7, #20]
   80e22:	b2da      	uxtb	r2, r3
   80e24:	693b      	ldr	r3, [r7, #16]
   80e26:	021b      	lsls	r3, r3, #8
   80e28:	b29b      	uxth	r3, r3
   80e2a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80e2c:	69fb      	ldr	r3, [r7, #28]
   80e2e:	041b      	lsls	r3, r3, #16
   80e30:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80e34:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e36:	68fb      	ldr	r3, [r7, #12]
   80e38:	611a      	str	r2, [r3, #16]
   80e3a:	e020      	b.n	80e7e <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80e3c:	68bb      	ldr	r3, [r7, #8]
   80e3e:	005b      	lsls	r3, r3, #1
   80e40:	687a      	ldr	r2, [r7, #4]
   80e42:	fbb2 f3f3 	udiv	r3, r2, r3
   80e46:	3b04      	subs	r3, #4
   80e48:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e4a:	e005      	b.n	80e58 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
   80e4c:	69fb      	ldr	r3, [r7, #28]
   80e4e:	3301      	adds	r3, #1
   80e50:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
   80e52:	69bb      	ldr	r3, [r7, #24]
   80e54:	085b      	lsrs	r3, r3, #1
   80e56:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80e58:	69bb      	ldr	r3, [r7, #24]
   80e5a:	2bff      	cmp	r3, #255	; 0xff
   80e5c:	d902      	bls.n	80e64 <twi_set_speed+0xbc>
   80e5e:	69fb      	ldr	r3, [r7, #28]
   80e60:	2b06      	cmp	r3, #6
   80e62:	d9f3      	bls.n	80e4c <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e64:	69bb      	ldr	r3, [r7, #24]
   80e66:	b2da      	uxtb	r2, r3
   80e68:	69bb      	ldr	r3, [r7, #24]
   80e6a:	021b      	lsls	r3, r3, #8
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
   80e70:	69fb      	ldr	r3, [r7, #28]
   80e72:	041b      	lsls	r3, r3, #16
   80e74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80e78:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80e7a:	68fb      	ldr	r3, [r7, #12]
   80e7c:	611a      	str	r2, [r3, #16]
	}

	return PASS;
   80e7e:	2300      	movs	r3, #0
}
   80e80:	4618      	mov	r0, r3
   80e82:	3724      	adds	r7, #36	; 0x24
   80e84:	46bd      	mov	sp, r7
   80e86:	bc80      	pop	{r7}
   80e88:	4770      	bx	lr
   80e8a:	bf00      	nop
   80e8c:	00061a80 	.word	0x00061a80
   80e90:	0005dc00 	.word	0x0005dc00
   80e94:	057619f1 	.word	0x057619f1
   80e98:	3ffd1200 	.word	0x3ffd1200

00080e9c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80e9c:	b480      	push	{r7}
   80e9e:	b085      	sub	sp, #20
   80ea0:	af00      	add	r7, sp, #0
   80ea2:	6078      	str	r0, [r7, #4]
   80ea4:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   80ea6:	683b      	ldr	r3, [r7, #0]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d101      	bne.n	80eb0 <twi_mk_addr+0x14>
		return 0;
   80eac:	2300      	movs	r3, #0
   80eae:	e01d      	b.n	80eec <twi_mk_addr+0x50>

	val = addr[0];
   80eb0:	687b      	ldr	r3, [r7, #4]
   80eb2:	781b      	ldrb	r3, [r3, #0]
   80eb4:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   80eb6:	683b      	ldr	r3, [r7, #0]
   80eb8:	2b01      	cmp	r3, #1
   80eba:	dd09      	ble.n	80ed0 <twi_mk_addr+0x34>
		val <<= 8;
   80ebc:	68fb      	ldr	r3, [r7, #12]
   80ebe:	021b      	lsls	r3, r3, #8
   80ec0:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   80ec2:	687b      	ldr	r3, [r7, #4]
   80ec4:	3301      	adds	r3, #1
   80ec6:	781b      	ldrb	r3, [r3, #0]
   80ec8:	461a      	mov	r2, r3
   80eca:	68fb      	ldr	r3, [r7, #12]
   80ecc:	4313      	orrs	r3, r2
   80ece:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80ed0:	683b      	ldr	r3, [r7, #0]
   80ed2:	2b02      	cmp	r3, #2
   80ed4:	dd09      	ble.n	80eea <twi_mk_addr+0x4e>
		val <<= 8;
   80ed6:	68fb      	ldr	r3, [r7, #12]
   80ed8:	021b      	lsls	r3, r3, #8
   80eda:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80edc:	687b      	ldr	r3, [r7, #4]
   80ede:	3302      	adds	r3, #2
   80ee0:	781b      	ldrb	r3, [r3, #0]
   80ee2:	461a      	mov	r2, r3
   80ee4:	68fb      	ldr	r3, [r7, #12]
   80ee6:	4313      	orrs	r3, r2
   80ee8:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80eea:	68fb      	ldr	r3, [r7, #12]
}
   80eec:	4618      	mov	r0, r3
   80eee:	3714      	adds	r7, #20
   80ef0:	46bd      	mov	sp, r7
   80ef2:	bc80      	pop	{r7}
   80ef4:	4770      	bx	lr
	...

00080ef8 <twi_is_busy>:
	}
}
#endif
#if 1
uint8_t twi_is_busy(void)
{
   80ef8:	b480      	push	{r7}
   80efa:	af00      	add	r7, sp, #0
    return twiBusy;
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <twi_is_busy+0x10>)
   80efe:	781b      	ldrb	r3, [r3, #0]
}
   80f00:	4618      	mov	r0, r3
   80f02:	46bd      	mov	sp, r7
   80f04:	bc80      	pop	{r7}
   80f06:	4770      	bx	lr
   80f08:	20070d94 	.word	0x20070d94

00080f0c <twi_get_tx_packet>:

twi_packet_t *twi_get_tx_packet(void)
{
   80f0c:	b480      	push	{r7}
   80f0e:	af00      	add	r7, sp, #0
    return &txPacket;
   80f10:	4b02      	ldr	r3, [pc, #8]	; (80f1c <twi_get_tx_packet+0x10>)
}
   80f12:	4618      	mov	r0, r3
   80f14:	46bd      	mov	sp, r7
   80f16:	bc80      	pop	{r7}
   80f18:	4770      	bx	lr
   80f1a:	bf00      	nop
   80f1c:	20070b74 	.word	0x20070b74

00080f20 <twi_get_rx_packet>:

twi_packet_t *twi_get_rx_packet(void)
{
   80f20:	b480      	push	{r7}
   80f22:	af00      	add	r7, sp, #0
    return &rxPacket;
   80f24:	4b02      	ldr	r3, [pc, #8]	; (80f30 <twi_get_rx_packet+0x10>)
}
   80f26:	4618      	mov	r0, r3
   80f28:	46bd      	mov	sp, r7
   80f2a:	bc80      	pop	{r7}
   80f2c:	4770      	bx	lr
   80f2e:	bf00      	nop
   80f30:	20070c84 	.word	0x20070c84

00080f34 <twi_pdc_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_pdc_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80f34:	b580      	push	{r7, lr}
   80f36:	b084      	sub	sp, #16
   80f38:	af00      	add	r7, sp, #0
   80f3a:	6078      	str	r0, [r7, #4]
   80f3c:	6039      	str	r1, [r7, #0]
    pdc_packet_t rxPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   80f3e:	683b      	ldr	r3, [r7, #0]
   80f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80f44:	2b00      	cmp	r3, #0
   80f46:	d101      	bne.n	80f4c <twi_pdc_master_read+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   80f48:	2301      	movs	r3, #1
   80f4a:	e047      	b.n	80fdc <twi_pdc_master_read+0xa8>
    }
    
    twiBusy = true;
   80f4c:	4b25      	ldr	r3, [pc, #148]	; (80fe4 <twi_pdc_master_read+0xb0>)
   80f4e:	2201      	movs	r2, #1
   80f50:	701a      	strb	r2, [r3, #0]

    // Ensure Rx is already empty
    twi_read_byte(TWI0);
   80f52:	4825      	ldr	r0, [pc, #148]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80f54:	4b25      	ldr	r3, [pc, #148]	; (80fec <twi_pdc_master_read+0xb8>)
   80f56:	4798      	blx	r3

    // Set read mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   80f58:	687b      	ldr	r3, [r7, #4]
   80f5a:	2200      	movs	r2, #0
   80f5c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   80f5e:	683b      	ldr	r3, [r7, #0]
   80f60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   80f64:	041b      	lsls	r3, r3, #16
   80f66:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   80f6a:	683b      	ldr	r3, [r7, #0]
   80f6c:	685b      	ldr	r3, [r3, #4]
   80f6e:	021b      	lsls	r3, r3, #8
   80f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
   80f74:	4313      	orrs	r3, r2
   80f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   80f7a:	687b      	ldr	r3, [r7, #4]
   80f7c:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   80f7e:	687b      	ldr	r3, [r7, #4]
   80f80:	2200      	movs	r2, #0
   80f82:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80f84:	683a      	ldr	r2, [r7, #0]
   80f86:	683b      	ldr	r3, [r7, #0]
   80f88:	685b      	ldr	r3, [r3, #4]
   80f8a:	4619      	mov	r1, r3
   80f8c:	4610      	mov	r0, r2
   80f8e:	4b18      	ldr	r3, [pc, #96]	; (80ff0 <twi_pdc_master_read+0xbc>)
   80f90:	4798      	blx	r3
   80f92:	4602      	mov	r2, r0
   80f94:	687b      	ldr	r3, [r7, #4]
   80f96:	60da      	str	r2, [r3, #12]
        twi_enable_interrupt(TWI0, IER_ERROR_INTERRUPTS);
    }
    else
    {
#endif
        rxPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   80f98:	683b      	ldr	r3, [r7, #0]
   80f9a:	3308      	adds	r3, #8
   80f9c:	60bb      	str	r3, [r7, #8]
        rxPdcPacket.ul_size = p_packet->length - 1;
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   80fa4:	3b01      	subs	r3, #1
   80fa6:	60fb      	str	r3, [r7, #12]
        pdc_rx_init(PDC_TWI0, &rxPdcPacket, NULL);
   80fa8:	f107 0308 	add.w	r3, r7, #8
   80fac:	2200      	movs	r2, #0
   80fae:	4619      	mov	r1, r3
   80fb0:	4810      	ldr	r0, [pc, #64]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fb2:	4b11      	ldr	r3, [pc, #68]	; (80ff8 <twi_pdc_master_read+0xc4>)
   80fb4:	4798      	blx	r3

        pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_RXTEN);
   80fb6:	2101      	movs	r1, #1
   80fb8:	480e      	ldr	r0, [pc, #56]	; (80ff4 <twi_pdc_master_read+0xc0>)
   80fba:	4b10      	ldr	r3, [pc, #64]	; (80ffc <twi_pdc_master_read+0xc8>)
   80fbc:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_START;
   80fbe:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <twi_pdc_master_read+0xb4>)
   80fc0:	2201      	movs	r2, #1
   80fc2:	601a      	str	r2, [r3, #0]

        twi_enable_interrupt(p_twi, TWI_IER_ENDRX);
   80fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80fc8:	6878      	ldr	r0, [r7, #4]
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <twi_pdc_master_read+0xcc>)
   80fcc:	4798      	blx	r3
        NVIC_ClearPendingIRQ(TWI0_IRQn);
   80fce:	2016      	movs	r0, #22
   80fd0:	4b0c      	ldr	r3, [pc, #48]	; (81004 <twi_pdc_master_read+0xd0>)
   80fd2:	4798      	blx	r3
        NVIC_EnableIRQ(TWI0_IRQn);
   80fd4:	2016      	movs	r0, #22
   80fd6:	4b0c      	ldr	r3, [pc, #48]	; (81008 <twi_pdc_master_read+0xd4>)
   80fd8:	4798      	blx	r3
//    }

    return TWI_SUCCESS;
   80fda:	2300      	movs	r3, #0
}
   80fdc:	4618      	mov	r0, r3
   80fde:	3710      	adds	r7, #16
   80fe0:	46bd      	mov	sp, r7
   80fe2:	bd80      	pop	{r7, pc}
   80fe4:	20070d94 	.word	0x20070d94
   80fe8:	4008c000 	.word	0x4008c000
   80fec:	00081339 	.word	0x00081339
   80ff0:	00080e9d 	.word	0x00080e9d
   80ff4:	4008c100 	.word	0x4008c100
   80ff8:	000801eb 	.word	0x000801eb
   80ffc:	0008022d 	.word	0x0008022d
   81000:	000812d5 	.word	0x000812d5
   81004:	00080cc5 	.word	0x00080cc5
   81008:	00080c95 	.word	0x00080c95

0008100c <twi_pdc_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_pdc_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b084      	sub	sp, #16
   81010:	af00      	add	r7, sp, #0
   81012:	6078      	str	r0, [r7, #4]
   81014:	6039      	str	r1, [r7, #0]
    pdc_packet_t txPdcPacket;

    // Check argument
    if(p_packet->length == 0)
   81016:	683b      	ldr	r3, [r7, #0]
   81018:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   8101c:	2b00      	cmp	r3, #0
   8101e:	d101      	bne.n	81024 <twi_pdc_master_write+0x18>
    {
        return TWI_INVALID_ARGUMENT;
   81020:	2301      	movs	r3, #1
   81022:	e040      	b.n	810a6 <twi_pdc_master_write+0x9a>
    }

    twiBusy = true;
   81024:	4b22      	ldr	r3, [pc, #136]	; (810b0 <twi_pdc_master_write+0xa4>)
   81026:	2201      	movs	r2, #1
   81028:	701a      	strb	r2, [r3, #0]

    txPdcPacket.ul_addr = (uint32_t)p_packet->buffer;
   8102a:	683b      	ldr	r3, [r7, #0]
   8102c:	3308      	adds	r3, #8
   8102e:	60bb      	str	r3, [r7, #8]
    txPdcPacket.ul_size = p_packet->length - 1;
   81030:	683b      	ldr	r3, [r7, #0]
   81032:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81036:	3b01      	subs	r3, #1
   81038:	60fb      	str	r3, [r7, #12]
    pdc_tx_init(PDC_TWI0, &txPdcPacket, NULL);
   8103a:	f107 0308 	add.w	r3, r7, #8
   8103e:	2200      	movs	r2, #0
   81040:	4619      	mov	r1, r3
   81042:	481c      	ldr	r0, [pc, #112]	; (810b4 <twi_pdc_master_write+0xa8>)
   81044:	4b1c      	ldr	r3, [pc, #112]	; (810b8 <twi_pdc_master_write+0xac>)
   81046:	4798      	blx	r3

    // Set write mode, slave address and 3 internal address byte lengths
    p_twi->TWI_MMR = 0;
   81048:	687b      	ldr	r3, [r7, #4]
   8104a:	2200      	movs	r2, #0
   8104c:	605a      	str	r2, [r3, #4]
    p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) | ((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) & TWI_MMR_IADRSZ_Msk);
   8104e:	683b      	ldr	r3, [r7, #0]
   81050:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   81054:	041b      	lsls	r3, r3, #16
   81056:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
   8105a:	683b      	ldr	r3, [r7, #0]
   8105c:	685b      	ldr	r3, [r3, #4]
   8105e:	021b      	lsls	r3, r3, #8
   81060:	f403 7340 	and.w	r3, r3, #768	; 0x300
   81064:	431a      	orrs	r2, r3
   81066:	687b      	ldr	r3, [r7, #4]
   81068:	605a      	str	r2, [r3, #4]

    // Set internal address for remote chip
    p_twi->TWI_IADR = 0;
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	2200      	movs	r2, #0
   8106e:	60da      	str	r2, [r3, #12]
    p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81070:	683a      	ldr	r2, [r7, #0]
   81072:	683b      	ldr	r3, [r7, #0]
   81074:	685b      	ldr	r3, [r3, #4]
   81076:	4619      	mov	r1, r3
   81078:	4610      	mov	r0, r2
   8107a:	4b10      	ldr	r3, [pc, #64]	; (810bc <twi_pdc_master_write+0xb0>)
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	687b      	ldr	r3, [r7, #4]
   81082:	60da      	str	r2, [r3, #12]

    pdc_enable_transfer(PDC_TWI0, PERIPH_PTCR_TXTEN);
   81084:	f44f 7180 	mov.w	r1, #256	; 0x100
   81088:	480a      	ldr	r0, [pc, #40]	; (810b4 <twi_pdc_master_write+0xa8>)
   8108a:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <twi_pdc_master_write+0xb4>)
   8108c:	4798      	blx	r3

    twi_enable_interrupt(p_twi, TWI_IER_ENDTX);
   8108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81092:	6878      	ldr	r0, [r7, #4]
   81094:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <twi_pdc_master_write+0xb8>)
   81096:	4798      	blx	r3
    NVIC_ClearPendingIRQ(TWI0_IRQn);
   81098:	2016      	movs	r0, #22
   8109a:	4b0b      	ldr	r3, [pc, #44]	; (810c8 <twi_pdc_master_write+0xbc>)
   8109c:	4798      	blx	r3
    NVIC_EnableIRQ(TWI0_IRQn);
   8109e:	2016      	movs	r0, #22
   810a0:	4b0a      	ldr	r3, [pc, #40]	; (810cc <twi_pdc_master_write+0xc0>)
   810a2:	4798      	blx	r3

    return TWI_SUCCESS;
   810a4:	2300      	movs	r3, #0
}
   810a6:	4618      	mov	r0, r3
   810a8:	3710      	adds	r7, #16
   810aa:	46bd      	mov	sp, r7
   810ac:	bd80      	pop	{r7, pc}
   810ae:	bf00      	nop
   810b0:	20070d94 	.word	0x20070d94
   810b4:	4008c100 	.word	0x4008c100
   810b8:	000801a9 	.word	0x000801a9
   810bc:	00080e9d 	.word	0x00080e9d
   810c0:	0008022d 	.word	0x0008022d
   810c4:	000812d5 	.word	0x000812d5
   810c8:	00080cc5 	.word	0x00080cc5
   810cc:	00080c95 	.word	0x00080c95

000810d0 <twi_set_compass_rx_callback>:
 * \brief Callback function for TWI receive.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_rx_callback(void (*callback)(void))
{
   810d0:	b480      	push	{r7}
   810d2:	b083      	sub	sp, #12
   810d4:	af00      	add	r7, sp, #0
   810d6:	6078      	str	r0, [r7, #4]
    compassRxCallback = callback;
   810d8:	4a03      	ldr	r2, [pc, #12]	; (810e8 <twi_set_compass_rx_callback+0x18>)
   810da:	687b      	ldr	r3, [r7, #4]
   810dc:	6013      	str	r3, [r2, #0]
}
   810de:	bf00      	nop
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr
   810e8:	20070da0 	.word	0x20070da0

000810ec <twi_set_compass_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_compass_tx_callback(void (*callback)(void))
{
   810ec:	b480      	push	{r7}
   810ee:	b083      	sub	sp, #12
   810f0:	af00      	add	r7, sp, #0
   810f2:	6078      	str	r0, [r7, #4]
    compassTxCallback = callback;
   810f4:	4a03      	ldr	r2, [pc, #12]	; (81104 <twi_set_compass_tx_callback+0x18>)
   810f6:	687b      	ldr	r3, [r7, #4]
   810f8:	6013      	str	r3, [r2, #0]
}
   810fa:	bf00      	nop
   810fc:	370c      	adds	r7, #12
   810fe:	46bd      	mov	sp, r7
   81100:	bc80      	pop	{r7}
   81102:	4770      	bx	lr
   81104:	20070d9c 	.word	0x20070d9c

00081108 <twi_set_lcd_tx_callback>:
 * \brief Callback function for TWI transmit.
 *
 * \param callback Pointer to callback function.
 */
void twi_set_lcd_tx_callback(void (*callback)(void))
{
   81108:	b480      	push	{r7}
   8110a:	b083      	sub	sp, #12
   8110c:	af00      	add	r7, sp, #0
   8110e:	6078      	str	r0, [r7, #4]
    lcdTxCallback = callback;
   81110:	4a03      	ldr	r2, [pc, #12]	; (81120 <twi_set_lcd_tx_callback+0x18>)
   81112:	687b      	ldr	r3, [r7, #4]
   81114:	6013      	str	r3, [r2, #0]
}
   81116:	bf00      	nop
   81118:	370c      	adds	r7, #12
   8111a:	46bd      	mov	sp, r7
   8111c:	bc80      	pop	{r7}
   8111e:	4770      	bx	lr
   81120:	20070d98 	.word	0x20070d98

00081124 <TWI0_Handler>:
/**
 * \brief TWI0 Interrupt handler.
 *
 */
void TWI0_Handler(void)
{
   81124:	b590      	push	{r4, r7, lr}
   81126:	b083      	sub	sp, #12
   81128:	af00      	add	r7, sp, #0
    uint32_t twi_status = twi_get_interrupt_status(TWI0) & twi_get_interrupt_mask(TWI0);
   8112a:	485d      	ldr	r0, [pc, #372]	; (812a0 <TWI0_Handler+0x17c>)
   8112c:	4b5d      	ldr	r3, [pc, #372]	; (812a4 <TWI0_Handler+0x180>)
   8112e:	4798      	blx	r3
   81130:	4604      	mov	r4, r0
   81132:	485b      	ldr	r0, [pc, #364]	; (812a0 <TWI0_Handler+0x17c>)
   81134:	4b5c      	ldr	r3, [pc, #368]	; (812a8 <TWI0_Handler+0x184>)
   81136:	4798      	blx	r3
   81138:	4603      	mov	r3, r0
   8113a:	4023      	ands	r3, r4
   8113c:	607b      	str	r3, [r7, #4]

    // End of PDC transfer -> switch PDC off and wait ready flag
    if(twi_status & TWI_SR_ENDTX)
   8113e:	687b      	ldr	r3, [r7, #4]
   81140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81144:	2b00      	cmp	r3, #0
   81146:	d014      	beq.n	81172 <TWI0_Handler+0x4e>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS);
   81148:	f44f 7100 	mov.w	r1, #512	; 0x200
   8114c:	4857      	ldr	r0, [pc, #348]	; (812ac <TWI0_Handler+0x188>)
   8114e:	4b58      	ldr	r3, [pc, #352]	; (812b0 <TWI0_Handler+0x18c>)
   81150:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDTX);
   81152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81156:	4852      	ldr	r0, [pc, #328]	; (812a0 <TWI0_Handler+0x17c>)
   81158:	4b56      	ldr	r3, [pc, #344]	; (812b4 <TWI0_Handler+0x190>)
   8115a:	4798      	blx	r3
        twi_enable_interrupt(TWI0, TWI_IER_TXRDY);
   8115c:	2104      	movs	r1, #4
   8115e:	4850      	ldr	r0, [pc, #320]	; (812a0 <TWI0_Handler+0x17c>)
   81160:	4b55      	ldr	r3, [pc, #340]	; (812b8 <TWI0_Handler+0x194>)
   81162:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   81164:	484e      	ldr	r0, [pc, #312]	; (812a0 <TWI0_Handler+0x17c>)
   81166:	4b4f      	ldr	r3, [pc, #316]	; (812a4 <TWI0_Handler+0x180>)
   81168:	4798      	blx	r3
   8116a:	4602      	mov	r2, r0
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	4313      	orrs	r3, r2
   81170:	607b      	str	r3, [r7, #4]
    }
    
    // Received ready flag -> send last byte
    if(twi_status & TWI_SR_TXRDY)
   81172:	687b      	ldr	r3, [r7, #4]
   81174:	f003 0304 	and.w	r3, r3, #4
   81178:	2b00      	cmp	r3, #0
   8117a:	d01a      	beq.n	811b2 <TWI0_Handler+0x8e>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXRDY);
   8117c:	2104      	movs	r1, #4
   8117e:	4848      	ldr	r0, [pc, #288]	; (812a0 <TWI0_Handler+0x17c>)
   81180:	4b4c      	ldr	r3, [pc, #304]	; (812b4 <TWI0_Handler+0x190>)
   81182:	4798      	blx	r3

		// Complete the transfer - stop and last byte 
		TWI0->TWI_CR = TWI_CR_STOP;
   81184:	4b46      	ldr	r3, [pc, #280]	; (812a0 <TWI0_Handler+0x17c>)
   81186:	2202      	movs	r2, #2
   81188:	601a      	str	r2, [r3, #0]
		TWI0->TWI_THR = txPacket.buffer[txPacket.length-1];
   8118a:	4a45      	ldr	r2, [pc, #276]	; (812a0 <TWI0_Handler+0x17c>)
   8118c:	4b4b      	ldr	r3, [pc, #300]	; (812bc <TWI0_Handler+0x198>)
   8118e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81192:	3b01      	subs	r3, #1
   81194:	4949      	ldr	r1, [pc, #292]	; (812bc <TWI0_Handler+0x198>)
   81196:	440b      	add	r3, r1
   81198:	7a1b      	ldrb	r3, [r3, #8]
   8119a:	6353      	str	r3, [r2, #52]	; 0x34

        twi_enable_interrupt(TWI0, TWI_IER_TXCOMP);
   8119c:	2101      	movs	r1, #1
   8119e:	4840      	ldr	r0, [pc, #256]	; (812a0 <TWI0_Handler+0x17c>)
   811a0:	4b45      	ldr	r3, [pc, #276]	; (812b8 <TWI0_Handler+0x194>)
   811a2:	4798      	blx	r3
        twi_status |= twi_get_interrupt_status(TWI0);
   811a4:	483e      	ldr	r0, [pc, #248]	; (812a0 <TWI0_Handler+0x17c>)
   811a6:	4b3f      	ldr	r3, [pc, #252]	; (812a4 <TWI0_Handler+0x180>)
   811a8:	4798      	blx	r3
   811aa:	4602      	mov	r2, r0
   811ac:	687b      	ldr	r3, [r7, #4]
   811ae:	4313      	orrs	r3, r2
   811b0:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_TXCOMP)
   811b2:	687b      	ldr	r3, [r7, #4]
   811b4:	f003 0301 	and.w	r3, r3, #1
   811b8:	2b00      	cmp	r3, #0
   811ba:	d014      	beq.n	811e6 <TWI0_Handler+0xc2>
    {
        twi_disable_interrupt(TWI0, TWI_IER_TXCOMP);
   811bc:	2101      	movs	r1, #1
   811be:	4838      	ldr	r0, [pc, #224]	; (812a0 <TWI0_Handler+0x17c>)
   811c0:	4b3c      	ldr	r3, [pc, #240]	; (812b4 <TWI0_Handler+0x190>)
   811c2:	4798      	blx	r3

        // If defined, call the connected function.
        if(compassTxCallback != NULL)
   811c4:	4b3e      	ldr	r3, [pc, #248]	; (812c0 <TWI0_Handler+0x19c>)
   811c6:	681b      	ldr	r3, [r3, #0]
   811c8:	2b00      	cmp	r3, #0
   811ca:	d002      	beq.n	811d2 <TWI0_Handler+0xae>
        {
            compassTxCallback();
   811cc:	4b3c      	ldr	r3, [pc, #240]	; (812c0 <TWI0_Handler+0x19c>)
   811ce:	681b      	ldr	r3, [r3, #0]
   811d0:	4798      	blx	r3
        }

        // If defined, call the connected function.
        if(lcdTxCallback != NULL)
   811d2:	4b3c      	ldr	r3, [pc, #240]	; (812c4 <TWI0_Handler+0x1a0>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	2b00      	cmp	r3, #0
   811d8:	d002      	beq.n	811e0 <TWI0_Handler+0xbc>
        {
          lcdTxCallback();
   811da:	4b3a      	ldr	r3, [pc, #232]	; (812c4 <TWI0_Handler+0x1a0>)
   811dc:	681b      	ldr	r3, [r3, #0]
   811de:	4798      	blx	r3
        }

        twiBusy = false;
   811e0:	4b39      	ldr	r3, [pc, #228]	; (812c8 <TWI0_Handler+0x1a4>)
   811e2:	2200      	movs	r2, #0
   811e4:	701a      	strb	r2, [r3, #0]
    }

    // End of PDC transfer -> switch PDC off
    if(twi_status & TWI_SR_ENDRX)
   811e6:	687b      	ldr	r3, [r7, #4]
   811e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   811ec:	2b00      	cmp	r3, #0
   811ee:	d016      	beq.n	8121e <TWI0_Handler+0xfa>
    {
        pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_RXTDIS);
   811f0:	2102      	movs	r1, #2
   811f2:	482e      	ldr	r0, [pc, #184]	; (812ac <TWI0_Handler+0x188>)
   811f4:	4b2e      	ldr	r3, [pc, #184]	; (812b0 <TWI0_Handler+0x18c>)
   811f6:	4798      	blx	r3
        twi_disable_interrupt(TWI0, TWI_IER_ENDRX);
   811f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811fc:	4828      	ldr	r0, [pc, #160]	; (812a0 <TWI0_Handler+0x17c>)
   811fe:	4b2d      	ldr	r3, [pc, #180]	; (812b4 <TWI0_Handler+0x190>)
   81200:	4798      	blx	r3

        twi_enable_interrupt(TWI0, TWI_IER_RXRDY);
   81202:	2102      	movs	r1, #2
   81204:	4826      	ldr	r0, [pc, #152]	; (812a0 <TWI0_Handler+0x17c>)
   81206:	4b2c      	ldr	r3, [pc, #176]	; (812b8 <TWI0_Handler+0x194>)
   81208:	4798      	blx	r3
        TWI0->TWI_CR = TWI_CR_STOP;
   8120a:	4b25      	ldr	r3, [pc, #148]	; (812a0 <TWI0_Handler+0x17c>)
   8120c:	2202      	movs	r2, #2
   8120e:	601a      	str	r2, [r3, #0]

        twi_status |= twi_get_interrupt_status(TWI0);
   81210:	4823      	ldr	r0, [pc, #140]	; (812a0 <TWI0_Handler+0x17c>)
   81212:	4b24      	ldr	r3, [pc, #144]	; (812a4 <TWI0_Handler+0x180>)
   81214:	4798      	blx	r3
   81216:	4602      	mov	r2, r0
   81218:	687b      	ldr	r3, [r7, #4]
   8121a:	4313      	orrs	r3, r2
   8121c:	607b      	str	r3, [r7, #4]
    }

    // End of transfer -> switch TWI off
    if(twi_status & TWI_SR_RXRDY)
   8121e:	687b      	ldr	r3, [r7, #4]
   81220:	f003 0302 	and.w	r3, r3, #2
   81224:	2b00      	cmp	r3, #0
   81226:	d018      	beq.n	8125a <TWI0_Handler+0x136>
    {
        twi_disable_interrupt(TWI0, TWI_IER_RXRDY);
   81228:	2102      	movs	r1, #2
   8122a:	481d      	ldr	r0, [pc, #116]	; (812a0 <TWI0_Handler+0x17c>)
   8122c:	4b21      	ldr	r3, [pc, #132]	; (812b4 <TWI0_Handler+0x190>)
   8122e:	4798      	blx	r3

        // Read last data
        rxPacket.buffer[rxPacket.length-1] = TWI0->TWI_RHR;
   81230:	4b26      	ldr	r3, [pc, #152]	; (812cc <TWI0_Handler+0x1a8>)
   81232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   81236:	3b01      	subs	r3, #1
   81238:	4a19      	ldr	r2, [pc, #100]	; (812a0 <TWI0_Handler+0x17c>)
   8123a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8123c:	b2d1      	uxtb	r1, r2
   8123e:	4a23      	ldr	r2, [pc, #140]	; (812cc <TWI0_Handler+0x1a8>)
   81240:	4413      	add	r3, r2
   81242:	460a      	mov	r2, r1
   81244:	721a      	strb	r2, [r3, #8]

        // If defined, call the connected function.
        if(compassRxCallback != NULL)
   81246:	4b22      	ldr	r3, [pc, #136]	; (812d0 <TWI0_Handler+0x1ac>)
   81248:	681b      	ldr	r3, [r3, #0]
   8124a:	2b00      	cmp	r3, #0
   8124c:	d002      	beq.n	81254 <TWI0_Handler+0x130>
        {
            compassRxCallback();
   8124e:	4b20      	ldr	r3, [pc, #128]	; (812d0 <TWI0_Handler+0x1ac>)
   81250:	681b      	ldr	r3, [r3, #0]
   81252:	4798      	blx	r3
        }

        twiBusy = false;
   81254:	4b1c      	ldr	r3, [pc, #112]	; (812c8 <TWI0_Handler+0x1a4>)
   81256:	2200      	movs	r2, #0
   81258:	701a      	strb	r2, [r3, #0]
    }

	// An error occurred in either a transmission or reception.
    // Abort, stop the transmission and disable interrupts.
	if(twi_status & SR_ERROR_INTERRUPTS)
   8125a:	687b      	ldr	r3, [r7, #4]
   8125c:	f403 7350 	and.w	r3, r3, #832	; 0x340
   81260:	2b00      	cmp	r3, #0
   81262:	d019      	beq.n	81298 <TWI0_Handler+0x174>
    {
		// Stop the PDC
		pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81264:	f240 2102 	movw	r1, #514	; 0x202
   81268:	4810      	ldr	r0, [pc, #64]	; (812ac <TWI0_Handler+0x188>)
   8126a:	4b11      	ldr	r3, [pc, #68]	; (812b0 <TWI0_Handler+0x18c>)
   8126c:	4798      	blx	r3

		if(!(twi_status & TWI_SR_NACK))
   8126e:	687b      	ldr	r3, [r7, #4]
   81270:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81274:	2b00      	cmp	r3, #0
   81276:	d102      	bne.n	8127e <TWI0_Handler+0x15a>
        {
			// Do not send stop if NACK received. Handled by hardware
			TWI0->TWI_CR = TWI_CR_STOP;
   81278:	4b09      	ldr	r3, [pc, #36]	; (812a0 <TWI0_Handler+0x17c>)
   8127a:	2202      	movs	r2, #2
   8127c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(TWI0, TWI_IDR_ENDTX);
   8127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81282:	4807      	ldr	r0, [pc, #28]	; (812a0 <TWI0_Handler+0x17c>)
   81284:	4b0b      	ldr	r3, [pc, #44]	; (812b4 <TWI0_Handler+0x190>)
   81286:	4798      	blx	r3
		twi_disable_interrupt(TWI0, TWI_IDR_ENDRX);
   81288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8128c:	4804      	ldr	r0, [pc, #16]	; (812a0 <TWI0_Handler+0x17c>)
   8128e:	4b09      	ldr	r3, [pc, #36]	; (812b4 <TWI0_Handler+0x190>)
   81290:	4798      	blx	r3

        twiBusy = false;
   81292:	4b0d      	ldr	r3, [pc, #52]	; (812c8 <TWI0_Handler+0x1a4>)
   81294:	2200      	movs	r2, #0
   81296:	701a      	strb	r2, [r3, #0]
	}
}
   81298:	bf00      	nop
   8129a:	370c      	adds	r7, #12
   8129c:	46bd      	mov	sp, r7
   8129e:	bd90      	pop	{r4, r7, pc}
   812a0:	4008c000 	.word	0x4008c000
   812a4:	0008130d 	.word	0x0008130d
   812a8:	00081323 	.word	0x00081323
   812ac:	4008c100 	.word	0x4008c100
   812b0:	0008024d 	.word	0x0008024d
   812b4:	000812ef 	.word	0x000812ef
   812b8:	000812d5 	.word	0x000812d5
   812bc:	20070b74 	.word	0x20070b74
   812c0:	20070d9c 	.word	0x20070d9c
   812c4:	20070d98 	.word	0x20070d98
   812c8:	20070d94 	.word	0x20070d94
   812cc:	20070c84 	.word	0x20070c84
   812d0:	20070da0 	.word	0x20070da0

000812d4 <twi_enable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812d4:	b480      	push	{r7}
   812d6:	b083      	sub	sp, #12
   812d8:	af00      	add	r7, sp, #0
   812da:	6078      	str	r0, [r7, #4]
   812dc:	6039      	str	r1, [r7, #0]
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
   812de:	687b      	ldr	r3, [r7, #4]
   812e0:	683a      	ldr	r2, [r7, #0]
   812e2:	625a      	str	r2, [r3, #36]	; 0x24
}
   812e4:	bf00      	nop
   812e6:	370c      	adds	r7, #12
   812e8:	46bd      	mov	sp, r7
   812ea:	bc80      	pop	{r7}
   812ec:	4770      	bx	lr

000812ee <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
   812ee:	b480      	push	{r7}
   812f0:	b083      	sub	sp, #12
   812f2:	af00      	add	r7, sp, #0
   812f4:	6078      	str	r0, [r7, #4]
   812f6:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   812f8:	687b      	ldr	r3, [r7, #4]
   812fa:	683a      	ldr	r2, [r7, #0]
   812fc:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   812fe:	687b      	ldr	r3, [r7, #4]
   81300:	6a1b      	ldr	r3, [r3, #32]
}
   81302:	bf00      	nop
   81304:	370c      	adds	r7, #12
   81306:	46bd      	mov	sp, r7
   81308:	bc80      	pop	{r7}
   8130a:	4770      	bx	lr

0008130c <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
   8130c:	b480      	push	{r7}
   8130e:	b083      	sub	sp, #12
   81310:	af00      	add	r7, sp, #0
   81312:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
   81314:	687b      	ldr	r3, [r7, #4]
   81316:	6a1b      	ldr	r3, [r3, #32]
}
   81318:	4618      	mov	r0, r3
   8131a:	370c      	adds	r7, #12
   8131c:	46bd      	mov	sp, r7
   8131e:	bc80      	pop	{r7}
   81320:	4770      	bx	lr

00081322 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
   81322:	b480      	push	{r7}
   81324:	b083      	sub	sp, #12
   81326:	af00      	add	r7, sp, #0
   81328:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
   8132a:	687b      	ldr	r3, [r7, #4]
   8132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8132e:	4618      	mov	r0, r3
   81330:	370c      	adds	r7, #12
   81332:	46bd      	mov	sp, r7
   81334:	bc80      	pop	{r7}
   81336:	4770      	bx	lr

00081338 <twi_read_byte>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
   81338:	b480      	push	{r7}
   8133a:	b083      	sub	sp, #12
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_RHR;
   81340:	687b      	ldr	r3, [r7, #4]
   81342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81344:	b2db      	uxtb	r3, r3
}
   81346:	4618      	mov	r0, r3
   81348:	370c      	adds	r7, #12
   8134a:	46bd      	mov	sp, r7
   8134c:	bc80      	pop	{r7}
   8134e:	4770      	bx	lr

00081350 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   81350:	b480      	push	{r7}
   81352:	b083      	sub	sp, #12
   81354:	af00      	add	r7, sp, #0
   81356:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81358:	687b      	ldr	r3, [r7, #4]
   8135a:	2280      	movs	r2, #128	; 0x80
   8135c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8135e:	687b      	ldr	r3, [r7, #4]
   81360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   81362:	bf00      	nop
   81364:	370c      	adds	r7, #12
   81366:	46bd      	mov	sp, r7
   81368:	bc80      	pop	{r7}
   8136a:	4770      	bx	lr

0008136c <compass_init>:

//local function
static void compass_callback(void);

void compass_init(void)
{
   8136c:	b580      	push	{r7, lr}
   8136e:	b082      	sub	sp, #8
   81370:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   81372:	4b0d      	ldr	r3, [pc, #52]	; (813a8 <compass_init+0x3c>)
   81374:	4798      	blx	r3
   81376:	6078      	str	r0, [r7, #4]

    rx_packet->chip = 0x60;
   81378:	687b      	ldr	r3, [r7, #4]
   8137a:	2260      	movs	r2, #96	; 0x60
   8137c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    rx_packet->addr[0] = 0x02;
   81380:	687b      	ldr	r3, [r7, #4]
   81382:	2202      	movs	r2, #2
   81384:	701a      	strb	r2, [r3, #0]
    rx_packet->addr_length = 1;
   81386:	687b      	ldr	r3, [r7, #4]
   81388:	2201      	movs	r2, #1
   8138a:	605a      	str	r2, [r3, #4]
    rx_packet->length = sizeof(direction);
   8138c:	687b      	ldr	r3, [r7, #4]
   8138e:	2202      	movs	r2, #2
   81390:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    twi_set_compass_tx_callback(compass_callback);
   81394:	4805      	ldr	r0, [pc, #20]	; (813ac <compass_init+0x40>)
   81396:	4b06      	ldr	r3, [pc, #24]	; (813b0 <compass_init+0x44>)
   81398:	4798      	blx	r3
    twi_set_compass_rx_callback(compass_callback);
   8139a:	4804      	ldr	r0, [pc, #16]	; (813ac <compass_init+0x40>)
   8139c:	4b05      	ldr	r3, [pc, #20]	; (813b4 <compass_init+0x48>)
   8139e:	4798      	blx	r3
}
   813a0:	bf00      	nop
   813a2:	3708      	adds	r7, #8
   813a4:	46bd      	mov	sp, r7
   813a6:	bd80      	pop	{r7, pc}
   813a8:	00080f21 	.word	0x00080f21
   813ac:	00081475 	.word	0x00081475
   813b0:	000810ed 	.word	0x000810ed
   813b4:	000810d1 	.word	0x000810d1

000813b8 <update_compass>:

void update_compass(void)
{
   813b8:	b580      	push	{r7, lr}
   813ba:	b082      	sub	sp, #8
   813bc:	af00      	add	r7, sp, #0
    twi_packet_t *rx_packet = twi_get_rx_packet();
   813be:	4b1a      	ldr	r3, [pc, #104]	; (81428 <update_compass+0x70>)
   813c0:	4798      	blx	r3
   813c2:	6078      	str	r0, [r7, #4]

    if ((getTicks() - ul_ticks_compass) > 100)
   813c4:	4b19      	ldr	r3, [pc, #100]	; (8142c <update_compass+0x74>)
   813c6:	4798      	blx	r3
   813c8:	4602      	mov	r2, r0
   813ca:	4b19      	ldr	r3, [pc, #100]	; (81430 <update_compass+0x78>)
   813cc:	681b      	ldr	r3, [r3, #0]
   813ce:	1ad3      	subs	r3, r2, r3
   813d0:	2b64      	cmp	r3, #100	; 0x64
   813d2:	d926      	bls.n	81422 <update_compass+0x6a>
    {
        if(lcd_is_busy())
   813d4:	4b17      	ldr	r3, [pc, #92]	; (81434 <update_compass+0x7c>)
   813d6:	4798      	blx	r3
   813d8:	4603      	mov	r3, r0
   813da:	2b00      	cmp	r3, #0
   813dc:	d120      	bne.n	81420 <update_compass+0x68>
        {
            return;
        }

        ul_ticks_compass = getTicks();
   813de:	4b13      	ldr	r3, [pc, #76]	; (8142c <update_compass+0x74>)
   813e0:	4798      	blx	r3
   813e2:	4602      	mov	r2, r0
   813e4:	4b12      	ldr	r3, [pc, #72]	; (81430 <update_compass+0x78>)
   813e6:	601a      	str	r2, [r3, #0]
        
        compassIsBusy = true;
   813e8:	4b13      	ldr	r3, [pc, #76]	; (81438 <update_compass+0x80>)
   813ea:	2201      	movs	r2, #1
   813ec:	701a      	strb	r2, [r3, #0]
        if(twi_pdc_master_read(TWI0, rx_packet) == TWI_SUCCESS)
   813ee:	6879      	ldr	r1, [r7, #4]
   813f0:	4812      	ldr	r0, [pc, #72]	; (8143c <update_compass+0x84>)
   813f2:	4b13      	ldr	r3, [pc, #76]	; (81440 <update_compass+0x88>)
   813f4:	4798      	blx	r3
   813f6:	4603      	mov	r3, r0
   813f8:	2b00      	cmp	r3, #0
   813fa:	d104      	bne.n	81406 <update_compass+0x4e>
        {
            while(compassIsBusy);
   813fc:	bf00      	nop
   813fe:	4b0e      	ldr	r3, [pc, #56]	; (81438 <update_compass+0x80>)
   81400:	781b      	ldrb	r3, [r3, #0]
   81402:	2b00      	cmp	r3, #0
   81404:	d1fb      	bne.n	813fe <update_compass+0x46>
        }
        direction = (rx_packet->buffer[0] << 8) | rx_packet->buffer[1];
   81406:	687b      	ldr	r3, [r7, #4]
   81408:	7a1b      	ldrb	r3, [r3, #8]
   8140a:	021b      	lsls	r3, r3, #8
   8140c:	b21a      	sxth	r2, r3
   8140e:	687b      	ldr	r3, [r7, #4]
   81410:	7a5b      	ldrb	r3, [r3, #9]
   81412:	b21b      	sxth	r3, r3
   81414:	4313      	orrs	r3, r2
   81416:	b21b      	sxth	r3, r3
   81418:	b29a      	uxth	r2, r3
   8141a:	4b0a      	ldr	r3, [pc, #40]	; (81444 <update_compass+0x8c>)
   8141c:	801a      	strh	r2, [r3, #0]
   8141e:	e000      	b.n	81422 <update_compass+0x6a>
            return;
   81420:	bf00      	nop
    }
}
   81422:	3708      	adds	r7, #8
   81424:	46bd      	mov	sp, r7
   81426:	bd80      	pop	{r7, pc}
   81428:	00080f21 	.word	0x00080f21
   8142c:	00082f51 	.word	0x00082f51
   81430:	20070fbc 	.word	0x20070fbc
   81434:	000818bd 	.word	0x000818bd
   81438:	20070da4 	.word	0x20070da4
   8143c:	4008c000 	.word	0x4008c000
   81440:	00080f35 	.word	0x00080f35
   81444:	20070e1c 	.word	0x20070e1c

00081448 <set_compass_is_busy>:

void set_compass_is_busy(void)
{
   81448:	b480      	push	{r7}
   8144a:	af00      	add	r7, sp, #0
    compassIsBusy = true;
   8144c:	4b03      	ldr	r3, [pc, #12]	; (8145c <set_compass_is_busy+0x14>)
   8144e:	2201      	movs	r2, #1
   81450:	701a      	strb	r2, [r3, #0]
}
   81452:	bf00      	nop
   81454:	46bd      	mov	sp, r7
   81456:	bc80      	pop	{r7}
   81458:	4770      	bx	lr
   8145a:	bf00      	nop
   8145c:	20070da4 	.word	0x20070da4

00081460 <compass_is_busy>:

uint8_t compass_is_busy(void)
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
    return compassIsBusy;
   81464:	4b02      	ldr	r3, [pc, #8]	; (81470 <compass_is_busy+0x10>)
   81466:	781b      	ldrb	r3, [r3, #0]
}
   81468:	4618      	mov	r0, r3
   8146a:	46bd      	mov	sp, r7
   8146c:	bc80      	pop	{r7}
   8146e:	4770      	bx	lr
   81470:	20070da4 	.word	0x20070da4

00081474 <compass_callback>:
    return tmp_corr;
}*/

//local function
static void compass_callback(void)
{
   81474:	b480      	push	{r7}
   81476:	af00      	add	r7, sp, #0
    compassIsBusy = false;
   81478:	4b03      	ldr	r3, [pc, #12]	; (81488 <compass_callback+0x14>)
   8147a:	2200      	movs	r2, #0
   8147c:	701a      	strb	r2, [r3, #0]
}
   8147e:	bf00      	nop
   81480:	46bd      	mov	sp, r7
   81482:	bc80      	pop	{r7}
   81484:	4770      	bx	lr
   81486:	bf00      	nop
   81488:	20070da4 	.word	0x20070da4

0008148c <osc_get_rate>:
{
   8148c:	b480      	push	{r7}
   8148e:	b083      	sub	sp, #12
   81490:	af00      	add	r7, sp, #0
   81492:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81494:	687b      	ldr	r3, [r7, #4]
   81496:	2b07      	cmp	r3, #7
   81498:	d825      	bhi.n	814e6 <osc_get_rate+0x5a>
   8149a:	a201      	add	r2, pc, #4	; (adr r2, 814a0 <osc_get_rate+0x14>)
   8149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814a0:	000814c1 	.word	0x000814c1
   814a4:	000814c7 	.word	0x000814c7
   814a8:	000814cd 	.word	0x000814cd
   814ac:	000814d3 	.word	0x000814d3
   814b0:	000814d7 	.word	0x000814d7
   814b4:	000814db 	.word	0x000814db
   814b8:	000814df 	.word	0x000814df
   814bc:	000814e3 	.word	0x000814e3
		return OSC_SLCK_32K_RC_HZ;
   814c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814c4:	e010      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   814c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814ca:	e00d      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   814cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814d0:	e00a      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   814d2:	4b08      	ldr	r3, [pc, #32]	; (814f4 <osc_get_rate+0x68>)
   814d4:	e008      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   814d6:	4b08      	ldr	r3, [pc, #32]	; (814f8 <osc_get_rate+0x6c>)
   814d8:	e006      	b.n	814e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   814da:	4b08      	ldr	r3, [pc, #32]	; (814fc <osc_get_rate+0x70>)
   814dc:	e004      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   814de:	4b07      	ldr	r3, [pc, #28]	; (814fc <osc_get_rate+0x70>)
   814e0:	e002      	b.n	814e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   814e2:	4b06      	ldr	r3, [pc, #24]	; (814fc <osc_get_rate+0x70>)
   814e4:	e000      	b.n	814e8 <osc_get_rate+0x5c>
	return 0;
   814e6:	2300      	movs	r3, #0
}
   814e8:	4618      	mov	r0, r3
   814ea:	370c      	adds	r7, #12
   814ec:	46bd      	mov	sp, r7
   814ee:	bc80      	pop	{r7}
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	003d0900 	.word	0x003d0900
   814f8:	007a1200 	.word	0x007a1200
   814fc:	00b71b00 	.word	0x00b71b00

00081500 <sysclk_get_main_hz>:
{
   81500:	b580      	push	{r7, lr}
   81502:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   81504:	2006      	movs	r0, #6
   81506:	4b04      	ldr	r3, [pc, #16]	; (81518 <sysclk_get_main_hz+0x18>)
   81508:	4798      	blx	r3
   8150a:	4602      	mov	r2, r0
   8150c:	4613      	mov	r3, r2
   8150e:	00db      	lsls	r3, r3, #3
   81510:	1a9b      	subs	r3, r3, r2
   81512:	005b      	lsls	r3, r3, #1
}
   81514:	4618      	mov	r0, r3
   81516:	bd80      	pop	{r7, pc}
   81518:	0008148d 	.word	0x0008148d

0008151c <sysclk_get_peripheral_hz>:
{
   8151c:	b580      	push	{r7, lr}
   8151e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81520:	4b02      	ldr	r3, [pc, #8]	; (8152c <sysclk_get_peripheral_hz+0x10>)
   81522:	4798      	blx	r3
   81524:	4603      	mov	r3, r0
   81526:	085b      	lsrs	r3, r3, #1
}
   81528:	4618      	mov	r0, r3
   8152a:	bd80      	pop	{r7, pc}
   8152c:	00081501 	.word	0x00081501

00081530 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81530:	b580      	push	{r7, lr}
   81532:	b082      	sub	sp, #8
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81538:	6878      	ldr	r0, [r7, #4]
   8153a:	4b03      	ldr	r3, [pc, #12]	; (81548 <sysclk_enable_peripheral_clock+0x18>)
   8153c:	4798      	blx	r3
}
   8153e:	bf00      	nop
   81540:	3708      	adds	r7, #8
   81542:	46bd      	mov	sp, r7
   81544:	bd80      	pop	{r7, pc}
   81546:	bf00      	nop
   81548:	00083911 	.word	0x00083911

0008154c <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   8154c:	b580      	push	{r7, lr}
   8154e:	b082      	sub	sp, #8
   81550:	af00      	add	r7, sp, #0
   81552:	6078      	str	r0, [r7, #4]
   81554:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
   81556:	4b10      	ldr	r3, [pc, #64]	; (81598 <twi_master_setup+0x4c>)
   81558:	4798      	blx	r3
   8155a:	4602      	mov	r2, r0
   8155c:	683b      	ldr	r3, [r7, #0]
   8155e:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   81560:	683b      	ldr	r3, [r7, #0]
   81562:	2200      	movs	r2, #0
   81564:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
   81566:	687b      	ldr	r3, [r7, #4]
   81568:	4a0c      	ldr	r2, [pc, #48]	; (8159c <twi_master_setup+0x50>)
   8156a:	4293      	cmp	r3, r2
   8156c:	d103      	bne.n	81576 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   8156e:	2016      	movs	r0, #22
   81570:	4b0b      	ldr	r3, [pc, #44]	; (815a0 <twi_master_setup+0x54>)
   81572:	4798      	blx	r3
   81574:	e006      	b.n	81584 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
   81576:	687b      	ldr	r3, [r7, #4]
   81578:	4a0a      	ldr	r2, [pc, #40]	; (815a4 <twi_master_setup+0x58>)
   8157a:	4293      	cmp	r3, r2
   8157c:	d102      	bne.n	81584 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8157e:	2017      	movs	r0, #23
   81580:	4b07      	ldr	r3, [pc, #28]	; (815a0 <twi_master_setup+0x54>)
   81582:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81584:	6839      	ldr	r1, [r7, #0]
   81586:	6878      	ldr	r0, [r7, #4]
   81588:	4b07      	ldr	r3, [pc, #28]	; (815a8 <twi_master_setup+0x5c>)
   8158a:	4798      	blx	r3
   8158c:	4603      	mov	r3, r0
}
   8158e:	4618      	mov	r0, r3
   81590:	3708      	adds	r7, #8
   81592:	46bd      	mov	sp, r7
   81594:	bd80      	pop	{r7, pc}
   81596:	bf00      	nop
   81598:	0008151d 	.word	0x0008151d
   8159c:	4008c000 	.word	0x4008c000
   815a0:	00081531 	.word	0x00081531
   815a4:	40090000 	.word	0x40090000
   815a8:	00080d1d 	.word	0x00080d1d

000815ac <lcd_init>:

/************************************************************
* Functions                                                 *
************************************************************/
void lcd_init(void)
{
   815ac:	b580      	push	{r7, lr}
   815ae:	af00      	add	r7, sp, #0
    twi_set_lcd_tx_callback(lcd_callback);
   815b0:	4821      	ldr	r0, [pc, #132]	; (81638 <lcd_init+0x8c>)
   815b2:	4b22      	ldr	r3, [pc, #136]	; (8163c <lcd_init+0x90>)
   815b4:	4798      	blx	r3

    memset((void *)&twiConfig, 0, sizeof(twiConfig));
   815b6:	220c      	movs	r2, #12
   815b8:	2100      	movs	r1, #0
   815ba:	4821      	ldr	r0, [pc, #132]	; (81640 <lcd_init+0x94>)
   815bc:	4b21      	ldr	r3, [pc, #132]	; (81644 <lcd_init+0x98>)
   815be:	4798      	blx	r3
    twiConfig.speed = 100000;
   815c0:	4b1f      	ldr	r3, [pc, #124]	; (81640 <lcd_init+0x94>)
   815c2:	4a21      	ldr	r2, [pc, #132]	; (81648 <lcd_init+0x9c>)
   815c4:	605a      	str	r2, [r3, #4]

    backlight = LCD_LIGHT_OFF;
   815c6:	4b21      	ldr	r3, [pc, #132]	; (8164c <lcd_init+0xa0>)
   815c8:	2200      	movs	r2, #0
   815ca:	701a      	strb	r2, [r3, #0]

    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815cc:	2103      	movs	r1, #3
   815ce:	2000      	movs	r0, #0
   815d0:	4b1f      	ldr	r3, [pc, #124]	; (81650 <lcd_init+0xa4>)
   815d2:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815d4:	2006      	movs	r0, #6
   815d6:	4b1f      	ldr	r3, [pc, #124]	; (81654 <lcd_init+0xa8>)
   815d8:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815da:	2103      	movs	r1, #3
   815dc:	2000      	movs	r0, #0
   815de:	4b1c      	ldr	r3, [pc, #112]	; (81650 <lcd_init+0xa4>)
   815e0:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815e2:	2006      	movs	r0, #6
   815e4:	4b1b      	ldr	r3, [pc, #108]	; (81654 <lcd_init+0xa8>)
   815e6:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x03);
   815e8:	2103      	movs	r1, #3
   815ea:	2000      	movs	r0, #0
   815ec:	4b18      	ldr	r3, [pc, #96]	; (81650 <lcd_init+0xa4>)
   815ee:	4798      	blx	r3
    mdelay(LCD_INIT_WAIT_TIME);
   815f0:	2006      	movs	r0, #6
   815f2:	4b18      	ldr	r3, [pc, #96]	; (81654 <lcd_init+0xa8>)
   815f4:	4798      	blx	r3
    send_nibble(LCD_FUNTION_WRITE, 0x02);     // Interface: 4-Bit
   815f6:	2102      	movs	r1, #2
   815f8:	2000      	movs	r0, #0
   815fa:	4b15      	ldr	r3, [pc, #84]	; (81650 <lcd_init+0xa4>)
   815fc:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x28);       // Interface: 4-Bit, 2-lines, 5x8-dots
   815fe:	2128      	movs	r1, #40	; 0x28
   81600:	2000      	movs	r0, #0
   81602:	4b15      	ldr	r3, [pc, #84]	; (81658 <lcd_init+0xac>)
   81604:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x08);       // Display off, cursor off, cursor is underline
   81606:	2108      	movs	r1, #8
   81608:	2000      	movs	r0, #0
   8160a:	4b13      	ldr	r3, [pc, #76]	; (81658 <lcd_init+0xac>)
   8160c:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x01);       // Clear display
   8160e:	2101      	movs	r1, #1
   81610:	2000      	movs	r0, #0
   81612:	4b11      	ldr	r3, [pc, #68]	; (81658 <lcd_init+0xac>)
   81614:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81616:	2003      	movs	r0, #3
   81618:	4b0e      	ldr	r3, [pc, #56]	; (81654 <lcd_init+0xa8>)
   8161a:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x06);       // Cursor moves right, no display shift
   8161c:	2106      	movs	r1, #6
   8161e:	2000      	movs	r0, #0
   81620:	4b0d      	ldr	r3, [pc, #52]	; (81658 <lcd_init+0xac>)
   81622:	4798      	blx	r3
    send_byte(LCD_FUNTION_WRITE, 0x0C);       // Display on, cursor off, cursor is underline
   81624:	210c      	movs	r1, #12
   81626:	2000      	movs	r0, #0
   81628:	4b0b      	ldr	r3, [pc, #44]	; (81658 <lcd_init+0xac>)
   8162a:	4798      	blx	r3

    backlight = LCD_LIGHT_ON;
   8162c:	4b07      	ldr	r3, [pc, #28]	; (8164c <lcd_init+0xa0>)
   8162e:	2208      	movs	r2, #8
   81630:	701a      	strb	r2, [r3, #0]
}
   81632:	bf00      	nop
   81634:	bd80      	pop	{r7, pc}
   81636:	bf00      	nop
   81638:	00081b21 	.word	0x00081b21
   8163c:	00081109 	.word	0x00081109
   81640:	20070db0 	.word	0x20070db0
   81644:	000854c5 	.word	0x000854c5
   81648:	000186a0 	.word	0x000186a0
   8164c:	20070da5 	.word	0x20070da5
   81650:	000818d1 	.word	0x000818d1
   81654:	00082f65 	.word	0x00082f65
   81658:	000819e1 	.word	0x000819e1

0008165c <lcd_set_backlight>:

void lcd_set_backlight(backlight_t state)
{
   8165c:	b480      	push	{r7}
   8165e:	b083      	sub	sp, #12
   81660:	af00      	add	r7, sp, #0
   81662:	4603      	mov	r3, r0
   81664:	71fb      	strb	r3, [r7, #7]
    backlight = state;
   81666:	4a04      	ldr	r2, [pc, #16]	; (81678 <lcd_set_backlight+0x1c>)
   81668:	79fb      	ldrb	r3, [r7, #7]
   8166a:	7013      	strb	r3, [r2, #0]
//    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
//    mdelay(LCD_CLEAR_WAIT_TIME);
}
   8166c:	bf00      	nop
   8166e:	370c      	adds	r7, #12
   81670:	46bd      	mov	sp, r7
   81672:	bc80      	pop	{r7}
   81674:	4770      	bx	lr
   81676:	bf00      	nop
   81678:	20070da5 	.word	0x20070da5

0008167c <lcd_clear>:

void lcd_clear(void)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	af00      	add	r7, sp, #0
    send_byte(LCD_FUNTION_WRITE, 0x01);   // clear display
   81680:	2101      	movs	r1, #1
   81682:	2000      	movs	r0, #0
   81684:	4b03      	ldr	r3, [pc, #12]	; (81694 <lcd_clear+0x18>)
   81686:	4798      	blx	r3
    mdelay(LCD_CLEAR_WAIT_TIME);
   81688:	2003      	movs	r0, #3
   8168a:	4b03      	ldr	r3, [pc, #12]	; (81698 <lcd_clear+0x1c>)
   8168c:	4798      	blx	r3
}
   8168e:	bf00      	nop
   81690:	bd80      	pop	{r7, pc}
   81692:	bf00      	nop
   81694:	000819e1 	.word	0x000819e1
   81698:	00082f65 	.word	0x00082f65

0008169c <lcd_print_s>:
    sprintf(str, "%10lu", data);
    lcd_print_s(line, col, str);
}

void lcd_print_s(uint8_t line, uint8_t col, const char* str)
{
   8169c:	b590      	push	{r4, r7, lr}
   8169e:	b087      	sub	sp, #28
   816a0:	af00      	add	r7, sp, #0
   816a2:	4603      	mov	r3, r0
   816a4:	603a      	str	r2, [r7, #0]
   816a6:	71fb      	strb	r3, [r7, #7]
   816a8:	460b      	mov	r3, r1
   816aa:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   816ac:	4b75      	ldr	r3, [pc, #468]	; (81884 <lcd_print_s+0x1e8>)
   816ae:	4798      	blx	r3
   816b0:	6138      	str	r0, [r7, #16]
    uint8_t addr;
    uint8_t cmd;
    uint8_t byte;
    uint8_t count;
    
    while(lcdIsBusy | twi_is_busy())
   816b2:	e019      	b.n	816e8 <lcd_print_s+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   816b4:	4b74      	ldr	r3, [pc, #464]	; (81888 <lcd_print_s+0x1ec>)
   816b6:	4798      	blx	r3
   816b8:	4602      	mov	r2, r0
   816ba:	4b74      	ldr	r3, [pc, #464]	; (8188c <lcd_print_s+0x1f0>)
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	1ad3      	subs	r3, r2, r3
   816c0:	2b0a      	cmp	r3, #10
   816c2:	d911      	bls.n	816e8 <lcd_print_s+0x4c>
        {
            lcdIsBusy = false;
   816c4:	4b72      	ldr	r3, [pc, #456]	; (81890 <lcd_print_s+0x1f4>)
   816c6:	2200      	movs	r2, #0
   816c8:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   816ca:	4b72      	ldr	r3, [pc, #456]	; (81894 <lcd_print_s+0x1f8>)
   816cc:	681b      	ldr	r3, [r3, #0]
   816ce:	3301      	adds	r3, #1
   816d0:	4a70      	ldr	r2, [pc, #448]	; (81894 <lcd_print_s+0x1f8>)
   816d2:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   816d4:	f240 2102 	movw	r1, #514	; 0x202
   816d8:	486f      	ldr	r0, [pc, #444]	; (81898 <lcd_print_s+0x1fc>)
   816da:	4b70      	ldr	r3, [pc, #448]	; (8189c <lcd_print_s+0x200>)
   816dc:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   816de:	4970      	ldr	r1, [pc, #448]	; (818a0 <lcd_print_s+0x204>)
   816e0:	4870      	ldr	r0, [pc, #448]	; (818a4 <lcd_print_s+0x208>)
   816e2:	4b71      	ldr	r3, [pc, #452]	; (818a8 <lcd_print_s+0x20c>)
   816e4:	4798      	blx	r3
            break;
   816e6:	e009      	b.n	816fc <lcd_print_s+0x60>
    while(lcdIsBusy | twi_is_busy())
   816e8:	4b70      	ldr	r3, [pc, #448]	; (818ac <lcd_print_s+0x210>)
   816ea:	4798      	blx	r3
   816ec:	4603      	mov	r3, r0
   816ee:	461a      	mov	r2, r3
   816f0:	4b67      	ldr	r3, [pc, #412]	; (81890 <lcd_print_s+0x1f4>)
   816f2:	781b      	ldrb	r3, [r3, #0]
   816f4:	4313      	orrs	r3, r2
   816f6:	b2db      	uxtb	r3, r3
   816f8:	2b00      	cmp	r3, #0
   816fa:	d1db      	bne.n	816b4 <lcd_print_s+0x18>
        }
    }

    tx_packet->chip = 0x27;
   816fc:	693b      	ldr	r3, [r7, #16]
   816fe:	2227      	movs	r2, #39	; 0x27
   81700:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81704:	693b      	ldr	r3, [r7, #16]
   81706:	2200      	movs	r2, #0
   81708:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8170a:	693b      	ldr	r3, [r7, #16]
   8170c:	2200      	movs	r2, #0
   8170e:	605a      	str	r2, [r3, #4]
    
    // Calculate display address
    switch(line)
   81710:	79fb      	ldrb	r3, [r7, #7]
   81712:	2b03      	cmp	r3, #3
   81714:	d006      	beq.n	81724 <lcd_print_s+0x88>
   81716:	2b04      	cmp	r3, #4
   81718:	d007      	beq.n	8172a <lcd_print_s+0x8e>
   8171a:	2b02      	cmp	r3, #2
   8171c:	d108      	bne.n	81730 <lcd_print_s+0x94>
    {
        case 2:
        addr = 0x80 | 0x40;   // set address to start of line 2
   8171e:	23c0      	movs	r3, #192	; 0xc0
   81720:	75fb      	strb	r3, [r7, #23]
        break;
   81722:	e008      	b.n	81736 <lcd_print_s+0x9a>
        case 3:
        addr = 0x80 | 0x14;   // set address to start of line 3
   81724:	2394      	movs	r3, #148	; 0x94
   81726:	75fb      	strb	r3, [r7, #23]
        break;
   81728:	e005      	b.n	81736 <lcd_print_s+0x9a>
        case 4:
        addr = 0x80 | 0x54;   // set address to start of line 4
   8172a:	23d4      	movs	r3, #212	; 0xd4
   8172c:	75fb      	strb	r3, [r7, #23]
        break;
   8172e:	e002      	b.n	81736 <lcd_print_s+0x9a>
        case 1:
        default:
        addr = 0x80;          // set address to start of line 1
   81730:	2380      	movs	r3, #128	; 0x80
   81732:	75fb      	strb	r3, [r7, #23]
        break;
   81734:	bf00      	nop
    }
    addr += col;  // set column in the selected line
   81736:	7dfa      	ldrb	r2, [r7, #23]
   81738:	79bb      	ldrb	r3, [r7, #6]
   8173a:	4413      	add	r3, r2
   8173c:	75fb      	strb	r3, [r7, #23]

    // Set cursor
    cmd = LCD_FUNTION_WRITE | backlight;
   8173e:	4b5c      	ldr	r3, [pc, #368]	; (818b0 <lcd_print_s+0x214>)
   81740:	781b      	ldrb	r3, [r3, #0]
   81742:	73fb      	strb	r3, [r7, #15]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (addr & 0xF0);
   81744:	7dfb      	ldrb	r3, [r7, #23]
   81746:	f023 030f 	bic.w	r3, r3, #15
   8174a:	b2da      	uxtb	r2, r3
   8174c:	7bfb      	ldrb	r3, [r7, #15]
   8174e:	4313      	orrs	r3, r2
   81750:	b2db      	uxtb	r3, r3
   81752:	f043 0304 	orr.w	r3, r3, #4
   81756:	b2da      	uxtb	r2, r3
   81758:	693b      	ldr	r3, [r7, #16]
   8175a:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (addr & 0xF0);
   8175c:	f997 3017 	ldrsb.w	r3, [r7, #23]
   81760:	f023 030f 	bic.w	r3, r3, #15
   81764:	b25a      	sxtb	r2, r3
   81766:	f997 300f 	ldrsb.w	r3, [r7, #15]
   8176a:	4313      	orrs	r3, r2
   8176c:	b25b      	sxtb	r3, r3
   8176e:	b2da      	uxtb	r2, r3
   81770:	693b      	ldr	r3, [r7, #16]
   81772:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((addr & 0x0F) << 4);
   81774:	7dfb      	ldrb	r3, [r7, #23]
   81776:	011b      	lsls	r3, r3, #4
   81778:	b2da      	uxtb	r2, r3
   8177a:	7bfb      	ldrb	r3, [r7, #15]
   8177c:	4313      	orrs	r3, r2
   8177e:	b2db      	uxtb	r3, r3
   81780:	f043 0304 	orr.w	r3, r3, #4
   81784:	b2da      	uxtb	r2, r3
   81786:	693b      	ldr	r3, [r7, #16]
   81788:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((addr & 0x0F) << 4);
   8178a:	7dfb      	ldrb	r3, [r7, #23]
   8178c:	011b      	lsls	r3, r3, #4
   8178e:	b25a      	sxtb	r2, r3
   81790:	f997 300f 	ldrsb.w	r3, [r7, #15]
   81794:	4313      	orrs	r3, r2
   81796:	b25b      	sxtb	r3, r3
   81798:	b2da      	uxtb	r2, r3
   8179a:	693b      	ldr	r3, [r7, #16]
   8179c:	72da      	strb	r2, [r3, #11]
    
    // write string ...
    cmd = LCD_WRITE_DDR | backlight;
   8179e:	4b44      	ldr	r3, [pc, #272]	; (818b0 <lcd_print_s+0x214>)
   817a0:	781b      	ldrb	r3, [r3, #0]
   817a2:	f043 0301 	orr.w	r3, r3, #1
   817a6:	73fb      	strb	r3, [r7, #15]
    for(count = 0; count < strlen(str); count++)
   817a8:	2300      	movs	r3, #0
   817aa:	75bb      	strb	r3, [r7, #22]
   817ac:	e04b      	b.n	81846 <lcd_print_s+0x1aa>
    {
        byte = str[count];
   817ae:	7dbb      	ldrb	r3, [r7, #22]
   817b0:	683a      	ldr	r2, [r7, #0]
   817b2:	4413      	add	r3, r2
   817b4:	781b      	ldrb	r3, [r3, #0]
   817b6:	73bb      	strb	r3, [r7, #14]
        tx_packet->buffer[4 + count * 4 + 0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0);
   817b8:	7dbb      	ldrb	r3, [r7, #22]
   817ba:	3301      	adds	r3, #1
   817bc:	009b      	lsls	r3, r3, #2
   817be:	7bba      	ldrb	r2, [r7, #14]
   817c0:	f022 020f 	bic.w	r2, r2, #15
   817c4:	b2d1      	uxtb	r1, r2
   817c6:	7bfa      	ldrb	r2, [r7, #15]
   817c8:	430a      	orrs	r2, r1
   817ca:	b2d2      	uxtb	r2, r2
   817cc:	f042 0204 	orr.w	r2, r2, #4
   817d0:	b2d1      	uxtb	r1, r2
   817d2:	693a      	ldr	r2, [r7, #16]
   817d4:	4413      	add	r3, r2
   817d6:	460a      	mov	r2, r1
   817d8:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0);
   817da:	7dbb      	ldrb	r3, [r7, #22]
   817dc:	3301      	adds	r3, #1
   817de:	009b      	lsls	r3, r3, #2
   817e0:	3301      	adds	r3, #1
   817e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
   817e6:	f022 020f 	bic.w	r2, r2, #15
   817ea:	b251      	sxtb	r1, r2
   817ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
   817f0:	430a      	orrs	r2, r1
   817f2:	b252      	sxtb	r2, r2
   817f4:	b2d1      	uxtb	r1, r2
   817f6:	693a      	ldr	r2, [r7, #16]
   817f8:	4413      	add	r3, r2
   817fa:	460a      	mov	r2, r1
   817fc:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   817fe:	7dbb      	ldrb	r3, [r7, #22]
   81800:	3301      	adds	r3, #1
   81802:	009b      	lsls	r3, r3, #2
   81804:	3302      	adds	r3, #2
   81806:	7bba      	ldrb	r2, [r7, #14]
   81808:	0112      	lsls	r2, r2, #4
   8180a:	b2d1      	uxtb	r1, r2
   8180c:	7bfa      	ldrb	r2, [r7, #15]
   8180e:	430a      	orrs	r2, r1
   81810:	b2d2      	uxtb	r2, r2
   81812:	f042 0204 	orr.w	r2, r2, #4
   81816:	b2d1      	uxtb	r1, r2
   81818:	693a      	ldr	r2, [r7, #16]
   8181a:	4413      	add	r3, r2
   8181c:	460a      	mov	r2, r1
   8181e:	721a      	strb	r2, [r3, #8]
        tx_packet->buffer[4 + count * 4 + 3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81820:	7dbb      	ldrb	r3, [r7, #22]
   81822:	3301      	adds	r3, #1
   81824:	009b      	lsls	r3, r3, #2
   81826:	3303      	adds	r3, #3
   81828:	7bba      	ldrb	r2, [r7, #14]
   8182a:	0112      	lsls	r2, r2, #4
   8182c:	b251      	sxtb	r1, r2
   8182e:	f997 200f 	ldrsb.w	r2, [r7, #15]
   81832:	430a      	orrs	r2, r1
   81834:	b252      	sxtb	r2, r2
   81836:	b2d1      	uxtb	r1, r2
   81838:	693a      	ldr	r2, [r7, #16]
   8183a:	4413      	add	r3, r2
   8183c:	460a      	mov	r2, r1
   8183e:	721a      	strb	r2, [r3, #8]
    for(count = 0; count < strlen(str); count++)
   81840:	7dbb      	ldrb	r3, [r7, #22]
   81842:	3301      	adds	r3, #1
   81844:	75bb      	strb	r3, [r7, #22]
   81846:	7dbc      	ldrb	r4, [r7, #22]
   81848:	6838      	ldr	r0, [r7, #0]
   8184a:	4b1a      	ldr	r3, [pc, #104]	; (818b4 <lcd_print_s+0x218>)
   8184c:	4798      	blx	r3
   8184e:	4603      	mov	r3, r0
   81850:	429c      	cmp	r4, r3
   81852:	d3ac      	bcc.n	817ae <lcd_print_s+0x112>
    }
    tx_packet->length = 4 + count * 4;
   81854:	7dbb      	ldrb	r3, [r7, #22]
   81856:	3301      	adds	r3, #1
   81858:	009b      	lsls	r3, r3, #2
   8185a:	461a      	mov	r2, r3
   8185c:	693b      	ldr	r3, [r7, #16]
   8185e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

    lcdIsBusy = true;
   81862:	4b0b      	ldr	r3, [pc, #44]	; (81890 <lcd_print_s+0x1f4>)
   81864:	2201      	movs	r2, #1
   81866:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81868:	6939      	ldr	r1, [r7, #16]
   8186a:	480e      	ldr	r0, [pc, #56]	; (818a4 <lcd_print_s+0x208>)
   8186c:	4b12      	ldr	r3, [pc, #72]	; (818b8 <lcd_print_s+0x21c>)
   8186e:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81870:	4b05      	ldr	r3, [pc, #20]	; (81888 <lcd_print_s+0x1ec>)
   81872:	4798      	blx	r3
   81874:	4602      	mov	r2, r0
   81876:	4b05      	ldr	r3, [pc, #20]	; (8188c <lcd_print_s+0x1f0>)
   81878:	601a      	str	r2, [r3, #0]
}
   8187a:	bf00      	nop
   8187c:	371c      	adds	r7, #28
   8187e:	46bd      	mov	sp, r7
   81880:	bd90      	pop	{r4, r7, pc}
   81882:	bf00      	nop
   81884:	00080f0d 	.word	0x00080f0d
   81888:	00082f51 	.word	0x00082f51
   8188c:	20070da8 	.word	0x20070da8
   81890:	20070da6 	.word	0x20070da6
   81894:	20070dac 	.word	0x20070dac
   81898:	4008c100 	.word	0x4008c100
   8189c:	0008024d 	.word	0x0008024d
   818a0:	20070db0 	.word	0x20070db0
   818a4:	4008c000 	.word	0x4008c000
   818a8:	0008154d 	.word	0x0008154d
   818ac:	00080ef9 	.word	0x00080ef9
   818b0:	20070da5 	.word	0x20070da5
   818b4:	000855ad 	.word	0x000855ad
   818b8:	0008100d 	.word	0x0008100d

000818bc <lcd_is_busy>:
    twi_pdc_master_write(TWI0, tx_packet);
    lcdStartTicks = getTicks();
}

uint8_t lcd_is_busy(void)
{
   818bc:	b480      	push	{r7}
   818be:	af00      	add	r7, sp, #0
    return lcdIsBusy;
   818c0:	4b02      	ldr	r3, [pc, #8]	; (818cc <lcd_is_busy+0x10>)
   818c2:	781b      	ldrb	r3, [r3, #0]
}
   818c4:	4618      	mov	r0, r3
   818c6:	46bd      	mov	sp, r7
   818c8:	bc80      	pop	{r7}
   818ca:	4770      	bx	lr
   818cc:	20070da6 	.word	0x20070da6

000818d0 <send_nibble>:

/************************************************************
* Local Functions                                           *
************************************************************/
static void send_nibble(uint8_t cmd, uint8_t byte)
{
   818d0:	b580      	push	{r7, lr}
   818d2:	b084      	sub	sp, #16
   818d4:	af00      	add	r7, sp, #0
   818d6:	4603      	mov	r3, r0
   818d8:	460a      	mov	r2, r1
   818da:	71fb      	strb	r3, [r7, #7]
   818dc:	4613      	mov	r3, r2
   818de:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   818e0:	4b32      	ldr	r3, [pc, #200]	; (819ac <send_nibble+0xdc>)
   818e2:	4798      	blx	r3
   818e4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   818e6:	e019      	b.n	8191c <send_nibble+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   818e8:	4b31      	ldr	r3, [pc, #196]	; (819b0 <send_nibble+0xe0>)
   818ea:	4798      	blx	r3
   818ec:	4602      	mov	r2, r0
   818ee:	4b31      	ldr	r3, [pc, #196]	; (819b4 <send_nibble+0xe4>)
   818f0:	681b      	ldr	r3, [r3, #0]
   818f2:	1ad3      	subs	r3, r2, r3
   818f4:	2b0a      	cmp	r3, #10
   818f6:	d911      	bls.n	8191c <send_nibble+0x4c>
        {
            lcdIsBusy = false;
   818f8:	4b2f      	ldr	r3, [pc, #188]	; (819b8 <send_nibble+0xe8>)
   818fa:	2200      	movs	r2, #0
   818fc:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   818fe:	4b2f      	ldr	r3, [pc, #188]	; (819bc <send_nibble+0xec>)
   81900:	681b      	ldr	r3, [r3, #0]
   81902:	3301      	adds	r3, #1
   81904:	4a2d      	ldr	r2, [pc, #180]	; (819bc <send_nibble+0xec>)
   81906:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81908:	f240 2102 	movw	r1, #514	; 0x202
   8190c:	482c      	ldr	r0, [pc, #176]	; (819c0 <send_nibble+0xf0>)
   8190e:	4b2d      	ldr	r3, [pc, #180]	; (819c4 <send_nibble+0xf4>)
   81910:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81912:	492d      	ldr	r1, [pc, #180]	; (819c8 <send_nibble+0xf8>)
   81914:	482d      	ldr	r0, [pc, #180]	; (819cc <send_nibble+0xfc>)
   81916:	4b2e      	ldr	r3, [pc, #184]	; (819d0 <send_nibble+0x100>)
   81918:	4798      	blx	r3
            break;
   8191a:	e009      	b.n	81930 <send_nibble+0x60>
    while(lcdIsBusy | twi_is_busy())
   8191c:	4b2d      	ldr	r3, [pc, #180]	; (819d4 <send_nibble+0x104>)
   8191e:	4798      	blx	r3
   81920:	4603      	mov	r3, r0
   81922:	461a      	mov	r2, r3
   81924:	4b24      	ldr	r3, [pc, #144]	; (819b8 <send_nibble+0xe8>)
   81926:	781b      	ldrb	r3, [r3, #0]
   81928:	4313      	orrs	r3, r2
   8192a:	b2db      	uxtb	r3, r3
   8192c:	2b00      	cmp	r3, #0
   8192e:	d1db      	bne.n	818e8 <send_nibble+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81930:	68fb      	ldr	r3, [r7, #12]
   81932:	2227      	movs	r2, #39	; 0x27
   81934:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81938:	68fb      	ldr	r3, [r7, #12]
   8193a:	2200      	movs	r2, #0
   8193c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   8193e:	68fb      	ldr	r3, [r7, #12]
   81940:	2200      	movs	r2, #0
   81942:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81944:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81948:	f003 030f 	and.w	r3, r3, #15
   8194c:	b25a      	sxtb	r2, r3
   8194e:	4b22      	ldr	r3, [pc, #136]	; (819d8 <send_nibble+0x108>)
   81950:	781b      	ldrb	r3, [r3, #0]
   81952:	b25b      	sxtb	r3, r3
   81954:	4313      	orrs	r3, r2
   81956:	b25b      	sxtb	r3, r3
   81958:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   8195a:	79bb      	ldrb	r3, [r7, #6]
   8195c:	011b      	lsls	r3, r3, #4
   8195e:	b2da      	uxtb	r2, r3
   81960:	79fb      	ldrb	r3, [r7, #7]
   81962:	4313      	orrs	r3, r2
   81964:	b2db      	uxtb	r3, r3
   81966:	f043 0304 	orr.w	r3, r3, #4
   8196a:	b2da      	uxtb	r2, r3
   8196c:	68fb      	ldr	r3, [r7, #12]
   8196e:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81970:	79bb      	ldrb	r3, [r7, #6]
   81972:	011b      	lsls	r3, r3, #4
   81974:	b25a      	sxtb	r2, r3
   81976:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8197a:	4313      	orrs	r3, r2
   8197c:	b25b      	sxtb	r3, r3
   8197e:	b2da      	uxtb	r2, r3
   81980:	68fb      	ldr	r3, [r7, #12]
   81982:	725a      	strb	r2, [r3, #9]
    tx_packet->length = 2;
   81984:	68fb      	ldr	r3, [r7, #12]
   81986:	2202      	movs	r2, #2
   81988:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   8198c:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <send_nibble+0xe8>)
   8198e:	2201      	movs	r2, #1
   81990:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81992:	68f9      	ldr	r1, [r7, #12]
   81994:	480d      	ldr	r0, [pc, #52]	; (819cc <send_nibble+0xfc>)
   81996:	4b11      	ldr	r3, [pc, #68]	; (819dc <send_nibble+0x10c>)
   81998:	4798      	blx	r3
    lcdStartTicks = getTicks();
   8199a:	4b05      	ldr	r3, [pc, #20]	; (819b0 <send_nibble+0xe0>)
   8199c:	4798      	blx	r3
   8199e:	4602      	mov	r2, r0
   819a0:	4b04      	ldr	r3, [pc, #16]	; (819b4 <send_nibble+0xe4>)
   819a2:	601a      	str	r2, [r3, #0]
}
   819a4:	bf00      	nop
   819a6:	3710      	adds	r7, #16
   819a8:	46bd      	mov	sp, r7
   819aa:	bd80      	pop	{r7, pc}
   819ac:	00080f0d 	.word	0x00080f0d
   819b0:	00082f51 	.word	0x00082f51
   819b4:	20070da8 	.word	0x20070da8
   819b8:	20070da6 	.word	0x20070da6
   819bc:	20070dac 	.word	0x20070dac
   819c0:	4008c100 	.word	0x4008c100
   819c4:	0008024d 	.word	0x0008024d
   819c8:	20070db0 	.word	0x20070db0
   819cc:	4008c000 	.word	0x4008c000
   819d0:	0008154d 	.word	0x0008154d
   819d4:	00080ef9 	.word	0x00080ef9
   819d8:	20070da5 	.word	0x20070da5
   819dc:	0008100d 	.word	0x0008100d

000819e0 <send_byte>:

static void send_byte(uint8_t cmd, uint8_t byte)
{
   819e0:	b580      	push	{r7, lr}
   819e2:	b084      	sub	sp, #16
   819e4:	af00      	add	r7, sp, #0
   819e6:	4603      	mov	r3, r0
   819e8:	460a      	mov	r2, r1
   819ea:	71fb      	strb	r3, [r7, #7]
   819ec:	4613      	mov	r3, r2
   819ee:	71bb      	strb	r3, [r7, #6]
    twi_packet_t *tx_packet = twi_get_tx_packet();
   819f0:	4b3e      	ldr	r3, [pc, #248]	; (81aec <send_byte+0x10c>)
   819f2:	4798      	blx	r3
   819f4:	60f8      	str	r0, [r7, #12]

    while(lcdIsBusy | twi_is_busy())
   819f6:	e019      	b.n	81a2c <send_byte+0x4c>
    {
        if((getTicks() - lcdStartTicks) > LCD_TIMEOUT_DELAY)
   819f8:	4b3d      	ldr	r3, [pc, #244]	; (81af0 <send_byte+0x110>)
   819fa:	4798      	blx	r3
   819fc:	4602      	mov	r2, r0
   819fe:	4b3d      	ldr	r3, [pc, #244]	; (81af4 <send_byte+0x114>)
   81a00:	681b      	ldr	r3, [r3, #0]
   81a02:	1ad3      	subs	r3, r2, r3
   81a04:	2b0a      	cmp	r3, #10
   81a06:	d911      	bls.n	81a2c <send_byte+0x4c>
        {
            lcdIsBusy = false;
   81a08:	4b3b      	ldr	r3, [pc, #236]	; (81af8 <send_byte+0x118>)
   81a0a:	2200      	movs	r2, #0
   81a0c:	701a      	strb	r2, [r3, #0]
            lcdTimeoutErrorCntr++;
   81a0e:	4b3b      	ldr	r3, [pc, #236]	; (81afc <send_byte+0x11c>)
   81a10:	681b      	ldr	r3, [r3, #0]
   81a12:	3301      	adds	r3, #1
   81a14:	4a39      	ldr	r2, [pc, #228]	; (81afc <send_byte+0x11c>)
   81a16:	6013      	str	r3, [r2, #0]
            pdc_disable_transfer(PDC_TWI0, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   81a18:	f240 2102 	movw	r1, #514	; 0x202
   81a1c:	4838      	ldr	r0, [pc, #224]	; (81b00 <send_byte+0x120>)
   81a1e:	4b39      	ldr	r3, [pc, #228]	; (81b04 <send_byte+0x124>)
   81a20:	4798      	blx	r3
            twi_master_setup(TWI0, &twiConfig);
   81a22:	4939      	ldr	r1, [pc, #228]	; (81b08 <send_byte+0x128>)
   81a24:	4839      	ldr	r0, [pc, #228]	; (81b0c <send_byte+0x12c>)
   81a26:	4b3a      	ldr	r3, [pc, #232]	; (81b10 <send_byte+0x130>)
   81a28:	4798      	blx	r3
            break;
   81a2a:	e009      	b.n	81a40 <send_byte+0x60>
    while(lcdIsBusy | twi_is_busy())
   81a2c:	4b39      	ldr	r3, [pc, #228]	; (81b14 <send_byte+0x134>)
   81a2e:	4798      	blx	r3
   81a30:	4603      	mov	r3, r0
   81a32:	461a      	mov	r2, r3
   81a34:	4b30      	ldr	r3, [pc, #192]	; (81af8 <send_byte+0x118>)
   81a36:	781b      	ldrb	r3, [r3, #0]
   81a38:	4313      	orrs	r3, r2
   81a3a:	b2db      	uxtb	r3, r3
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	d1db      	bne.n	819f8 <send_byte+0x18>
        }
    }

    tx_packet->chip = 0x27;
   81a40:	68fb      	ldr	r3, [r7, #12]
   81a42:	2227      	movs	r2, #39	; 0x27
   81a44:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    tx_packet->addr[0] = 0x00;
   81a48:	68fb      	ldr	r3, [r7, #12]
   81a4a:	2200      	movs	r2, #0
   81a4c:	701a      	strb	r2, [r3, #0]
    tx_packet->addr_length = 0;
   81a4e:	68fb      	ldr	r3, [r7, #12]
   81a50:	2200      	movs	r2, #0
   81a52:	605a      	str	r2, [r3, #4]
    
    cmd = (cmd & 0x0F) | backlight;                  /* mask command bits */
   81a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a58:	f003 030f 	and.w	r3, r3, #15
   81a5c:	b25a      	sxtb	r2, r3
   81a5e:	4b2e      	ldr	r3, [pc, #184]	; (81b18 <send_byte+0x138>)
   81a60:	781b      	ldrb	r3, [r3, #0]
   81a62:	b25b      	sxtb	r3, r3
   81a64:	4313      	orrs	r3, r2
   81a66:	b25b      	sxtb	r3, r3
   81a68:	71fb      	strb	r3, [r7, #7]
    tx_packet->buffer[0] = cmd | LCD_ENABLE_HIGH | (byte & 0xF0) ;
   81a6a:	79bb      	ldrb	r3, [r7, #6]
   81a6c:	f023 030f 	bic.w	r3, r3, #15
   81a70:	b2da      	uxtb	r2, r3
   81a72:	79fb      	ldrb	r3, [r7, #7]
   81a74:	4313      	orrs	r3, r2
   81a76:	b2db      	uxtb	r3, r3
   81a78:	f043 0304 	orr.w	r3, r3, #4
   81a7c:	b2da      	uxtb	r2, r3
   81a7e:	68fb      	ldr	r3, [r7, #12]
   81a80:	721a      	strb	r2, [r3, #8]
    tx_packet->buffer[1] = cmd | LCD_ENABLE_LOW  | (byte & 0xF0) ;
   81a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
   81a86:	f023 030f 	bic.w	r3, r3, #15
   81a8a:	b25a      	sxtb	r2, r3
   81a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a90:	4313      	orrs	r3, r2
   81a92:	b25b      	sxtb	r3, r3
   81a94:	b2da      	uxtb	r2, r3
   81a96:	68fb      	ldr	r3, [r7, #12]
   81a98:	725a      	strb	r2, [r3, #9]
    tx_packet->buffer[2] = cmd | LCD_ENABLE_HIGH | ((byte & 0x0F) << 4);
   81a9a:	79bb      	ldrb	r3, [r7, #6]
   81a9c:	011b      	lsls	r3, r3, #4
   81a9e:	b2da      	uxtb	r2, r3
   81aa0:	79fb      	ldrb	r3, [r7, #7]
   81aa2:	4313      	orrs	r3, r2
   81aa4:	b2db      	uxtb	r3, r3
   81aa6:	f043 0304 	orr.w	r3, r3, #4
   81aaa:	b2da      	uxtb	r2, r3
   81aac:	68fb      	ldr	r3, [r7, #12]
   81aae:	729a      	strb	r2, [r3, #10]
    tx_packet->buffer[3] = cmd | LCD_ENABLE_LOW  | ((byte & 0x0F) << 4);
   81ab0:	79bb      	ldrb	r3, [r7, #6]
   81ab2:	011b      	lsls	r3, r3, #4
   81ab4:	b25a      	sxtb	r2, r3
   81ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81aba:	4313      	orrs	r3, r2
   81abc:	b25b      	sxtb	r3, r3
   81abe:	b2da      	uxtb	r2, r3
   81ac0:	68fb      	ldr	r3, [r7, #12]
   81ac2:	72da      	strb	r2, [r3, #11]
    tx_packet->length = 4;
   81ac4:	68fb      	ldr	r3, [r7, #12]
   81ac6:	2204      	movs	r2, #4
   81ac8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    lcdIsBusy = true;
   81acc:	4b0a      	ldr	r3, [pc, #40]	; (81af8 <send_byte+0x118>)
   81ace:	2201      	movs	r2, #1
   81ad0:	701a      	strb	r2, [r3, #0]
    twi_pdc_master_write(TWI0, tx_packet);
   81ad2:	68f9      	ldr	r1, [r7, #12]
   81ad4:	480d      	ldr	r0, [pc, #52]	; (81b0c <send_byte+0x12c>)
   81ad6:	4b11      	ldr	r3, [pc, #68]	; (81b1c <send_byte+0x13c>)
   81ad8:	4798      	blx	r3
    lcdStartTicks = getTicks();
   81ada:	4b05      	ldr	r3, [pc, #20]	; (81af0 <send_byte+0x110>)
   81adc:	4798      	blx	r3
   81ade:	4602      	mov	r2, r0
   81ae0:	4b04      	ldr	r3, [pc, #16]	; (81af4 <send_byte+0x114>)
   81ae2:	601a      	str	r2, [r3, #0]
}
   81ae4:	bf00      	nop
   81ae6:	3710      	adds	r7, #16
   81ae8:	46bd      	mov	sp, r7
   81aea:	bd80      	pop	{r7, pc}
   81aec:	00080f0d 	.word	0x00080f0d
   81af0:	00082f51 	.word	0x00082f51
   81af4:	20070da8 	.word	0x20070da8
   81af8:	20070da6 	.word	0x20070da6
   81afc:	20070dac 	.word	0x20070dac
   81b00:	4008c100 	.word	0x4008c100
   81b04:	0008024d 	.word	0x0008024d
   81b08:	20070db0 	.word	0x20070db0
   81b0c:	4008c000 	.word	0x4008c000
   81b10:	0008154d 	.word	0x0008154d
   81b14:	00080ef9 	.word	0x00080ef9
   81b18:	20070da5 	.word	0x20070da5
   81b1c:	0008100d 	.word	0x0008100d

00081b20 <lcd_callback>:

static void lcd_callback(void)
{
   81b20:	b480      	push	{r7}
   81b22:	af00      	add	r7, sp, #0
    lcdIsBusy = false;
   81b24:	4b03      	ldr	r3, [pc, #12]	; (81b34 <lcd_callback+0x14>)
   81b26:	2200      	movs	r2, #0
   81b28:	701a      	strb	r2, [r3, #0]
}
   81b2a:	bf00      	nop
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bc80      	pop	{r7}
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	20070da6 	.word	0x20070da6

00081b38 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   81b38:	b480      	push	{r7}
   81b3a:	b08b      	sub	sp, #44	; 0x2c
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	6078      	str	r0, [r7, #4]
   81b40:	460b      	mov	r3, r1
   81b42:	70fb      	strb	r3, [r7, #3]
   81b44:	687b      	ldr	r3, [r7, #4]
   81b46:	627b      	str	r3, [r7, #36]	; 0x24
   81b48:	78fb      	ldrb	r3, [r7, #3]
   81b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   81b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b50:	61fb      	str	r3, [r7, #28]
   81b52:	69fb      	ldr	r3, [r7, #28]
   81b54:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81b56:	69bb      	ldr	r3, [r7, #24]
   81b58:	095b      	lsrs	r3, r3, #5
   81b5a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81b5c:	697b      	ldr	r3, [r7, #20]
   81b5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b62:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b66:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   81b68:	613b      	str	r3, [r7, #16]

	if (level) {
   81b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   81b6e:	2b00      	cmp	r3, #0
   81b70:	d009      	beq.n	81b86 <ioport_set_pin_level+0x4e>
   81b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b74:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81b76:	68fb      	ldr	r3, [r7, #12]
   81b78:	f003 031f 	and.w	r3, r3, #31
   81b7c:	2201      	movs	r2, #1
   81b7e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b80:	693b      	ldr	r3, [r7, #16]
   81b82:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   81b84:	e008      	b.n	81b98 <ioport_set_pin_level+0x60>
   81b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81b88:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   81b8a:	68bb      	ldr	r3, [r7, #8]
   81b8c:	f003 031f 	and.w	r3, r3, #31
   81b90:	2201      	movs	r2, #1
   81b92:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b94:	693b      	ldr	r3, [r7, #16]
   81b96:	635a      	str	r2, [r3, #52]	; 0x34
   81b98:	bf00      	nop
   81b9a:	372c      	adds	r7, #44	; 0x2c
   81b9c:	46bd      	mov	sp, r7
   81b9e:	bc80      	pop	{r7}
   81ba0:	4770      	bx	lr

00081ba2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
   81ba2:	b480      	push	{r7}
   81ba4:	b089      	sub	sp, #36	; 0x24
   81ba6:	af00      	add	r7, sp, #0
   81ba8:	6078      	str	r0, [r7, #4]
   81baa:	687b      	ldr	r3, [r7, #4]
   81bac:	61fb      	str	r3, [r7, #28]
   81bae:	69fb      	ldr	r3, [r7, #28]
   81bb0:	61bb      	str	r3, [r7, #24]
   81bb2:	69bb      	ldr	r3, [r7, #24]
   81bb4:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   81bb6:	697b      	ldr	r3, [r7, #20]
   81bb8:	095b      	lsrs	r3, r3, #5
   81bba:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81bbc:	693b      	ldr	r3, [r7, #16]
   81bbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bc2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81bc6:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   81bca:	69fb      	ldr	r3, [r7, #28]
   81bcc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   81bce:	68fb      	ldr	r3, [r7, #12]
   81bd0:	f003 031f 	and.w	r3, r3, #31
   81bd4:	2101      	movs	r1, #1
   81bd6:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81bda:	4013      	ands	r3, r2
   81bdc:	2b00      	cmp	r3, #0
   81bde:	bf14      	ite	ne
   81be0:	2301      	movne	r3, #1
   81be2:	2300      	moveq	r3, #0
   81be4:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
   81be6:	4618      	mov	r0, r3
   81be8:	3724      	adds	r7, #36	; 0x24
   81bea:	46bd      	mov	sp, r7
   81bec:	bc80      	pop	{r7}
   81bee:	4770      	bx	lr

00081bf0 <menu>:
static void print_menu_sensors(void);
static void print_menu_settings(void);
static void print_cursor(menu_info_t *info);

void menu(event_t event1)
{
   81bf0:	b580      	push	{r7, lr}
   81bf2:	b082      	sub	sp, #8
   81bf4:	af00      	add	r7, sp, #0
   81bf6:	4603      	mov	r3, r0
   81bf8:	71fb      	strb	r3, [r7, #7]
    switch (act_menu)
   81bfa:	4b28      	ldr	r3, [pc, #160]	; (81c9c <menu+0xac>)
   81bfc:	781b      	ldrb	r3, [r3, #0]
   81bfe:	2b09      	cmp	r3, #9
   81c00:	d847      	bhi.n	81c92 <menu+0xa2>
   81c02:	a201      	add	r2, pc, #4	; (adr r2, 81c08 <menu+0x18>)
   81c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c08:	00081c31 	.word	0x00081c31
   81c0c:	00081c3b 	.word	0x00081c3b
   81c10:	00081c45 	.word	0x00081c45
   81c14:	00081c4f 	.word	0x00081c4f
   81c18:	00081c59 	.word	0x00081c59
   81c1c:	00081c77 	.word	0x00081c77
   81c20:	00081c81 	.word	0x00081c81
   81c24:	00081c63 	.word	0x00081c63
   81c28:	00081c6d 	.word	0x00081c6d
   81c2c:	00081c8b 	.word	0x00081c8b
    {
        case MENU_MAIN:
            menu_main(event1);
   81c30:	79fb      	ldrb	r3, [r7, #7]
   81c32:	4618      	mov	r0, r3
   81c34:	4b1a      	ldr	r3, [pc, #104]	; (81ca0 <menu+0xb0>)
   81c36:	4798      	blx	r3
            break;
   81c38:	e02c      	b.n	81c94 <menu+0xa4>
        case MENU_MATCH:
            menu_match(event1);
   81c3a:	79fb      	ldrb	r3, [r7, #7]
   81c3c:	4618      	mov	r0, r3
   81c3e:	4b19      	ldr	r3, [pc, #100]	; (81ca4 <menu+0xb4>)
   81c40:	4798      	blx	r3
            break;
   81c42:	e027      	b.n	81c94 <menu+0xa4>
        case MENU_SENSORS:
            menu_sensors(event1);
   81c44:	79fb      	ldrb	r3, [r7, #7]
   81c46:	4618      	mov	r0, r3
   81c48:	4b17      	ldr	r3, [pc, #92]	; (81ca8 <menu+0xb8>)
   81c4a:	4798      	blx	r3
            break;
   81c4c:	e022      	b.n	81c94 <menu+0xa4>
        case MENU_SETTINGS:
            menu_settings(event1);
   81c4e:	79fb      	ldrb	r3, [r7, #7]
   81c50:	4618      	mov	r0, r3
   81c52:	4b16      	ldr	r3, [pc, #88]	; (81cac <menu+0xbc>)
   81c54:	4798      	blx	r3
            break;
   81c56:	e01d      	b.n	81c94 <menu+0xa4>
        case MENU_BALL:
            menu_ball(event1);
   81c58:	79fb      	ldrb	r3, [r7, #7]
   81c5a:	4618      	mov	r0, r3
   81c5c:	4b14      	ldr	r3, [pc, #80]	; (81cb0 <menu+0xc0>)
   81c5e:	4798      	blx	r3
            break;
   81c60:	e018      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS:
            menu_compass(event1);
   81c62:	79fb      	ldrb	r3, [r7, #7]
   81c64:	4618      	mov	r0, r3
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <menu+0xc4>)
   81c68:	4798      	blx	r3
            break;
   81c6a:	e013      	b.n	81c94 <menu+0xa4>
        case MENU_COMPASS_CALIBRATION:
            menu_compass_calibration(event1);
   81c6c:	79fb      	ldrb	r3, [r7, #7]
   81c6e:	4618      	mov	r0, r3
   81c70:	4b11      	ldr	r3, [pc, #68]	; (81cb8 <menu+0xc8>)
   81c72:	4798      	blx	r3
            break;
   81c74:	e00e      	b.n	81c94 <menu+0xa4>
        case MENU_LINE:
            menu_line(event1);
   81c76:	79fb      	ldrb	r3, [r7, #7]
   81c78:	4618      	mov	r0, r3
   81c7a:	4b10      	ldr	r3, [pc, #64]	; (81cbc <menu+0xcc>)
   81c7c:	4798      	blx	r3
            break;
   81c7e:	e009      	b.n	81c94 <menu+0xa4>
        case MENU_LINE_CALIBRATION:
            menu_line_calibration(event1);
   81c80:	79fb      	ldrb	r3, [r7, #7]
   81c82:	4618      	mov	r0, r3
   81c84:	4b0e      	ldr	r3, [pc, #56]	; (81cc0 <menu+0xd0>)
   81c86:	4798      	blx	r3
            break;
   81c88:	e004      	b.n	81c94 <menu+0xa4>
        case MENU_SHUTDOWN:
            menu_shutdown(event1);
   81c8a:	79fb      	ldrb	r3, [r7, #7]
   81c8c:	4618      	mov	r0, r3
   81c8e:	4b0d      	ldr	r3, [pc, #52]	; (81cc4 <menu+0xd4>)
   81c90:	4798      	blx	r3
        default:
            break;
   81c92:	bf00      	nop
    }
}
   81c94:	bf00      	nop
   81c96:	3708      	adds	r7, #8
   81c98:	46bd      	mov	sp, r7
   81c9a:	bd80      	pop	{r7, pc}
   81c9c:	20070dbc 	.word	0x20070dbc
   81ca0:	00081cc9 	.word	0x00081cc9
   81ca4:	00081df1 	.word	0x00081df1
   81ca8:	00081e21 	.word	0x00081e21
   81cac:	000821cd 	.word	0x000821cd
   81cb0:	00081f45 	.word	0x00081f45
   81cb4:	00081f99 	.word	0x00081f99
   81cb8:	0008206d 	.word	0x0008206d
   81cbc:	0008216d 	.word	0x0008216d
   81cc0:	0008219d 	.word	0x0008219d
   81cc4:	000822f1 	.word	0x000822f1

00081cc8 <menu_main>:

static void menu_main(event_t event1)
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b082      	sub	sp, #8
   81ccc:	af00      	add	r7, sp, #0
   81cce:	4603      	mov	r3, r0
   81cd0:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81cd2:	4b41      	ldr	r3, [pc, #260]	; (81dd8 <menu_main+0x110>)
   81cd4:	781b      	ldrb	r3, [r3, #0]
   81cd6:	2b00      	cmp	r3, #0
   81cd8:	d004      	beq.n	81ce4 <menu_main+0x1c>
    {
        print_menu = 0;
   81cda:	4b3f      	ldr	r3, [pc, #252]	; (81dd8 <menu_main+0x110>)
   81cdc:	2200      	movs	r2, #0
   81cde:	701a      	strb	r2, [r3, #0]
        print_menu_main();
   81ce0:	4b3e      	ldr	r3, [pc, #248]	; (81ddc <menu_main+0x114>)
   81ce2:	4798      	blx	r3
    }
    
    update_battery(0);
   81ce4:	2000      	movs	r0, #0
   81ce6:	4b3e      	ldr	r3, [pc, #248]	; (81de0 <menu_main+0x118>)
   81ce8:	4798      	blx	r3
    
    switch (event1)
   81cea:	79fb      	ldrb	r3, [r7, #7]
   81cec:	3b01      	subs	r3, #1
   81cee:	2b0f      	cmp	r3, #15
   81cf0:	d868      	bhi.n	81dc4 <menu_main+0xfc>
   81cf2:	a201      	add	r2, pc, #4	; (adr r2, 81cf8 <menu_main+0x30>)
   81cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81cf8:	00081d39 	.word	0x00081d39
   81cfc:	00081dc5 	.word	0x00081dc5
   81d00:	00081dc5 	.word	0x00081dc5
   81d04:	00081dc5 	.word	0x00081dc5
   81d08:	00081dc5 	.word	0x00081dc5
   81d0c:	00081dc5 	.word	0x00081dc5
   81d10:	00081d79 	.word	0x00081d79
   81d14:	00081dc5 	.word	0x00081dc5
   81d18:	00081dc5 	.word	0x00081dc5
   81d1c:	00081dc5 	.word	0x00081dc5
   81d20:	00081dc5 	.word	0x00081dc5
   81d24:	00081dc5 	.word	0x00081dc5
   81d28:	00081d59 	.word	0x00081d59
   81d2c:	00081dc5 	.word	0x00081dc5
   81d30:	00081dc5 	.word	0x00081dc5
   81d34:	00081db7 	.word	0x00081db7
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.main.act_cursor_line > menu_info.main.min_cursor_line)
   81d38:	4b2a      	ldr	r3, [pc, #168]	; (81de4 <menu_main+0x11c>)
   81d3a:	781a      	ldrb	r2, [r3, #0]
   81d3c:	4b29      	ldr	r3, [pc, #164]	; (81de4 <menu_main+0x11c>)
   81d3e:	789b      	ldrb	r3, [r3, #2]
   81d40:	429a      	cmp	r2, r3
   81d42:	d941      	bls.n	81dc8 <menu_main+0x100>
            {
                menu_info.main.act_cursor_line--;
   81d44:	4b27      	ldr	r3, [pc, #156]	; (81de4 <menu_main+0x11c>)
   81d46:	781b      	ldrb	r3, [r3, #0]
   81d48:	3b01      	subs	r3, #1
   81d4a:	b2da      	uxtb	r2, r3
   81d4c:	4b25      	ldr	r3, [pc, #148]	; (81de4 <menu_main+0x11c>)
   81d4e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d50:	4824      	ldr	r0, [pc, #144]	; (81de4 <menu_main+0x11c>)
   81d52:	4b25      	ldr	r3, [pc, #148]	; (81de8 <menu_main+0x120>)
   81d54:	4798      	blx	r3
            }
            break;
   81d56:	e037      	b.n	81dc8 <menu_main+0x100>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.main.act_cursor_line < menu_info.main.max_cursor_line)
   81d58:	4b22      	ldr	r3, [pc, #136]	; (81de4 <menu_main+0x11c>)
   81d5a:	781a      	ldrb	r2, [r3, #0]
   81d5c:	4b21      	ldr	r3, [pc, #132]	; (81de4 <menu_main+0x11c>)
   81d5e:	78db      	ldrb	r3, [r3, #3]
   81d60:	429a      	cmp	r2, r3
   81d62:	d233      	bcs.n	81dcc <menu_main+0x104>
            {
                menu_info.main.act_cursor_line++;
   81d64:	4b1f      	ldr	r3, [pc, #124]	; (81de4 <menu_main+0x11c>)
   81d66:	781b      	ldrb	r3, [r3, #0]
   81d68:	3301      	adds	r3, #1
   81d6a:	b2da      	uxtb	r2, r3
   81d6c:	4b1d      	ldr	r3, [pc, #116]	; (81de4 <menu_main+0x11c>)
   81d6e:	701a      	strb	r2, [r3, #0]
                print_cursor(&menu_info.main);
   81d70:	481c      	ldr	r0, [pc, #112]	; (81de4 <menu_main+0x11c>)
   81d72:	4b1d      	ldr	r3, [pc, #116]	; (81de8 <menu_main+0x120>)
   81d74:	4798      	blx	r3
            }
            break;
   81d76:	e029      	b.n	81dcc <menu_main+0x104>
        case EVENT_BUTTON_MID_P:
            {
                switch (menu_info.main.act_cursor_line)
   81d78:	4b1a      	ldr	r3, [pc, #104]	; (81de4 <menu_main+0x11c>)
   81d7a:	781b      	ldrb	r3, [r3, #0]
   81d7c:	2b03      	cmp	r3, #3
   81d7e:	d00b      	beq.n	81d98 <menu_main+0xd0>
   81d80:	2b04      	cmp	r3, #4
   81d82:	d010      	beq.n	81da6 <menu_main+0xde>
   81d84:	2b02      	cmp	r3, #2
   81d86:	d000      	beq.n	81d8a <menu_main+0xc2>
                    case 4:
                        act_menu = MENU_SETTINGS;
                        print_menu = 1;
                        break;
                    default:
                        break;
   81d88:	e014      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_MATCH;
   81d8a:	4b18      	ldr	r3, [pc, #96]	; (81dec <menu_main+0x124>)
   81d8c:	2201      	movs	r2, #1
   81d8e:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d90:	4b11      	ldr	r3, [pc, #68]	; (81dd8 <menu_main+0x110>)
   81d92:	2201      	movs	r2, #1
   81d94:	701a      	strb	r2, [r3, #0]
                        break;
   81d96:	e00d      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SENSORS;
   81d98:	4b14      	ldr	r3, [pc, #80]	; (81dec <menu_main+0x124>)
   81d9a:	2202      	movs	r2, #2
   81d9c:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81d9e:	4b0e      	ldr	r3, [pc, #56]	; (81dd8 <menu_main+0x110>)
   81da0:	2201      	movs	r2, #1
   81da2:	701a      	strb	r2, [r3, #0]
                        break;
   81da4:	e006      	b.n	81db4 <menu_main+0xec>
                        act_menu = MENU_SETTINGS;
   81da6:	4b11      	ldr	r3, [pc, #68]	; (81dec <menu_main+0x124>)
   81da8:	2203      	movs	r2, #3
   81daa:	701a      	strb	r2, [r3, #0]
                        print_menu = 1;
   81dac:	4b0a      	ldr	r3, [pc, #40]	; (81dd8 <menu_main+0x110>)
   81dae:	2201      	movs	r2, #1
   81db0:	701a      	strb	r2, [r3, #0]
                        break;
   81db2:	bf00      	nop
                }
            }
            break;
   81db4:	e00b      	b.n	81dce <menu_main+0x106>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SHUTDOWN;
   81db6:	4b0d      	ldr	r3, [pc, #52]	; (81dec <menu_main+0x124>)
   81db8:	2209      	movs	r2, #9
   81dba:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81dbc:	4b06      	ldr	r3, [pc, #24]	; (81dd8 <menu_main+0x110>)
   81dbe:	2201      	movs	r2, #1
   81dc0:	701a      	strb	r2, [r3, #0]
            break;
   81dc2:	e004      	b.n	81dce <menu_main+0x106>
        default:
            break;
   81dc4:	bf00      	nop
   81dc6:	e002      	b.n	81dce <menu_main+0x106>
            break;
   81dc8:	bf00      	nop
   81dca:	e000      	b.n	81dce <menu_main+0x106>
            break;
   81dcc:	bf00      	nop
    }
}
   81dce:	bf00      	nop
   81dd0:	3708      	adds	r7, #8
   81dd2:	46bd      	mov	sp, r7
   81dd4:	bd80      	pop	{r7, pc}
   81dd6:	bf00      	nop
   81dd8:	2007018c 	.word	0x2007018c
   81ddc:	00082401 	.word	0x00082401
   81de0:	00082fd9 	.word	0x00082fd9
   81de4:	20070190 	.word	0x20070190
   81de8:	00082541 	.word	0x00082541
   81dec:	20070dbc 	.word	0x20070dbc

00081df0 <menu_match>:

static void menu_match(event_t event1)
{
   81df0:	b480      	push	{r7}
   81df2:	b083      	sub	sp, #12
   81df4:	af00      	add	r7, sp, #0
   81df6:	4603      	mov	r3, r0
   81df8:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81dfa:	79fb      	ldrb	r3, [r7, #7]
   81dfc:	2b10      	cmp	r3, #16
   81dfe:	d105      	bne.n	81e0c <menu_match+0x1c>
    {
        act_menu = MENU_MAIN;
   81e00:	4b05      	ldr	r3, [pc, #20]	; (81e18 <menu_match+0x28>)
   81e02:	2200      	movs	r2, #0
   81e04:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81e06:	4b05      	ldr	r3, [pc, #20]	; (81e1c <menu_match+0x2c>)
   81e08:	2201      	movs	r2, #1
   81e0a:	701a      	strb	r2, [r3, #0]
    }
}
   81e0c:	bf00      	nop
   81e0e:	370c      	adds	r7, #12
   81e10:	46bd      	mov	sp, r7
   81e12:	bc80      	pop	{r7}
   81e14:	4770      	bx	lr
   81e16:	bf00      	nop
   81e18:	20070dbc 	.word	0x20070dbc
   81e1c:	2007018c 	.word	0x2007018c

00081e20 <menu_sensors>:

static void menu_sensors(event_t event1)
{
   81e20:	b580      	push	{r7, lr}
   81e22:	b082      	sub	sp, #8
   81e24:	af00      	add	r7, sp, #0
   81e26:	4603      	mov	r3, r0
   81e28:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   81e2a:	4b40      	ldr	r3, [pc, #256]	; (81f2c <menu_sensors+0x10c>)
   81e2c:	781b      	ldrb	r3, [r3, #0]
   81e2e:	2b00      	cmp	r3, #0
   81e30:	d004      	beq.n	81e3c <menu_sensors+0x1c>
    {
        print_menu = 0;
   81e32:	4b3e      	ldr	r3, [pc, #248]	; (81f2c <menu_sensors+0x10c>)
   81e34:	2200      	movs	r2, #0
   81e36:	701a      	strb	r2, [r3, #0]
        print_menu_sensors();
   81e38:	4b3d      	ldr	r3, [pc, #244]	; (81f30 <menu_sensors+0x110>)
   81e3a:	4798      	blx	r3
    }
    
    switch(event1)
   81e3c:	79fb      	ldrb	r3, [r7, #7]
   81e3e:	3b01      	subs	r3, #1
   81e40:	2b0f      	cmp	r3, #15
   81e42:	d869      	bhi.n	81f18 <menu_sensors+0xf8>
   81e44:	a201      	add	r2, pc, #4	; (adr r2, 81e4c <menu_sensors+0x2c>)
   81e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81e4a:	bf00      	nop
   81e4c:	00081e8d 	.word	0x00081e8d
   81e50:	00081f19 	.word	0x00081f19
   81e54:	00081f19 	.word	0x00081f19
   81e58:	00081f19 	.word	0x00081f19
   81e5c:	00081f19 	.word	0x00081f19
   81e60:	00081f19 	.word	0x00081f19
   81e64:	00081ecd 	.word	0x00081ecd
   81e68:	00081f19 	.word	0x00081f19
   81e6c:	00081f19 	.word	0x00081f19
   81e70:	00081f19 	.word	0x00081f19
   81e74:	00081f19 	.word	0x00081f19
   81e78:	00081f19 	.word	0x00081f19
   81e7c:	00081ead 	.word	0x00081ead
   81e80:	00081f19 	.word	0x00081f19
   81e84:	00081f19 	.word	0x00081f19
   81e88:	00081f0b 	.word	0x00081f0b
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.sensors.act_cursor_line > menu_info.sensors.min_cursor_line)
   81e8c:	4b29      	ldr	r3, [pc, #164]	; (81f34 <menu_sensors+0x114>)
   81e8e:	791a      	ldrb	r2, [r3, #4]
   81e90:	4b28      	ldr	r3, [pc, #160]	; (81f34 <menu_sensors+0x114>)
   81e92:	799b      	ldrb	r3, [r3, #6]
   81e94:	429a      	cmp	r2, r3
   81e96:	d941      	bls.n	81f1c <menu_sensors+0xfc>
            {
                menu_info.sensors.act_cursor_line--;
   81e98:	4b26      	ldr	r3, [pc, #152]	; (81f34 <menu_sensors+0x114>)
   81e9a:	791b      	ldrb	r3, [r3, #4]
   81e9c:	3b01      	subs	r3, #1
   81e9e:	b2da      	uxtb	r2, r3
   81ea0:	4b24      	ldr	r3, [pc, #144]	; (81f34 <menu_sensors+0x114>)
   81ea2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ea4:	4824      	ldr	r0, [pc, #144]	; (81f38 <menu_sensors+0x118>)
   81ea6:	4b25      	ldr	r3, [pc, #148]	; (81f3c <menu_sensors+0x11c>)
   81ea8:	4798      	blx	r3
            }
            break;
   81eaa:	e037      	b.n	81f1c <menu_sensors+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.sensors.act_cursor_line < menu_info.sensors.max_cursor_line)
   81eac:	4b21      	ldr	r3, [pc, #132]	; (81f34 <menu_sensors+0x114>)
   81eae:	791a      	ldrb	r2, [r3, #4]
   81eb0:	4b20      	ldr	r3, [pc, #128]	; (81f34 <menu_sensors+0x114>)
   81eb2:	79db      	ldrb	r3, [r3, #7]
   81eb4:	429a      	cmp	r2, r3
   81eb6:	d233      	bcs.n	81f20 <menu_sensors+0x100>
            {
                menu_info.sensors.act_cursor_line++;
   81eb8:	4b1e      	ldr	r3, [pc, #120]	; (81f34 <menu_sensors+0x114>)
   81eba:	791b      	ldrb	r3, [r3, #4]
   81ebc:	3301      	adds	r3, #1
   81ebe:	b2da      	uxtb	r2, r3
   81ec0:	4b1c      	ldr	r3, [pc, #112]	; (81f34 <menu_sensors+0x114>)
   81ec2:	711a      	strb	r2, [r3, #4]
                print_cursor(&menu_info.sensors);
   81ec4:	481c      	ldr	r0, [pc, #112]	; (81f38 <menu_sensors+0x118>)
   81ec6:	4b1d      	ldr	r3, [pc, #116]	; (81f3c <menu_sensors+0x11c>)
   81ec8:	4798      	blx	r3
            }
            break;
   81eca:	e029      	b.n	81f20 <menu_sensors+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.sensors.act_cursor_line)
   81ecc:	4b19      	ldr	r3, [pc, #100]	; (81f34 <menu_sensors+0x114>)
   81ece:	791b      	ldrb	r3, [r3, #4]
   81ed0:	2b02      	cmp	r3, #2
   81ed2:	d00b      	beq.n	81eec <menu_sensors+0xcc>
   81ed4:	2b03      	cmp	r3, #3
   81ed6:	d010      	beq.n	81efa <menu_sensors+0xda>
   81ed8:	2b01      	cmp	r3, #1
   81eda:	d000      	beq.n	81ede <menu_sensors+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   81edc:	e014      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_BALL;
   81ede:	4b18      	ldr	r3, [pc, #96]	; (81f40 <menu_sensors+0x120>)
   81ee0:	2204      	movs	r2, #4
   81ee2:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ee4:	4b11      	ldr	r3, [pc, #68]	; (81f2c <menu_sensors+0x10c>)
   81ee6:	2201      	movs	r2, #1
   81ee8:	701a      	strb	r2, [r3, #0]
                    break;
   81eea:	e00d      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_COMPASS;
   81eec:	4b14      	ldr	r3, [pc, #80]	; (81f40 <menu_sensors+0x120>)
   81eee:	2207      	movs	r2, #7
   81ef0:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81ef2:	4b0e      	ldr	r3, [pc, #56]	; (81f2c <menu_sensors+0x10c>)
   81ef4:	2201      	movs	r2, #1
   81ef6:	701a      	strb	r2, [r3, #0]
                    break;
   81ef8:	e006      	b.n	81f08 <menu_sensors+0xe8>
                    act_menu = MENU_LINE;
   81efa:	4b11      	ldr	r3, [pc, #68]	; (81f40 <menu_sensors+0x120>)
   81efc:	2205      	movs	r2, #5
   81efe:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   81f00:	4b0a      	ldr	r3, [pc, #40]	; (81f2c <menu_sensors+0x10c>)
   81f02:	2201      	movs	r2, #1
   81f04:	701a      	strb	r2, [r3, #0]
                    break;
   81f06:	bf00      	nop
            }
            break;
   81f08:	e00b      	b.n	81f22 <menu_sensors+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   81f0a:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <menu_sensors+0x120>)
   81f0c:	2200      	movs	r2, #0
   81f0e:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   81f10:	4b06      	ldr	r3, [pc, #24]	; (81f2c <menu_sensors+0x10c>)
   81f12:	2201      	movs	r2, #1
   81f14:	701a      	strb	r2, [r3, #0]
            break;
   81f16:	e004      	b.n	81f22 <menu_sensors+0x102>
        default:
            break;
   81f18:	bf00      	nop
   81f1a:	e002      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f1c:	bf00      	nop
   81f1e:	e000      	b.n	81f22 <menu_sensors+0x102>
            break;
   81f20:	bf00      	nop
    }
}
   81f22:	bf00      	nop
   81f24:	3708      	adds	r7, #8
   81f26:	46bd      	mov	sp, r7
   81f28:	bd80      	pop	{r7, pc}
   81f2a:	bf00      	nop
   81f2c:	2007018c 	.word	0x2007018c
   81f30:	00082471 	.word	0x00082471
   81f34:	20070190 	.word	0x20070190
   81f38:	20070194 	.word	0x20070194
   81f3c:	00082541 	.word	0x00082541
   81f40:	20070dbc 	.word	0x20070dbc

00081f44 <menu_ball>:

static void menu_ball(event_t event1)
{
   81f44:	b580      	push	{r7, lr}
   81f46:	b082      	sub	sp, #8
   81f48:	af00      	add	r7, sp, #0
   81f4a:	4603      	mov	r3, r0
   81f4c:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   81f4e:	4b0d      	ldr	r3, [pc, #52]	; (81f84 <menu_ball+0x40>)
   81f50:	781b      	ldrb	r3, [r3, #0]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d004      	beq.n	81f60 <menu_ball+0x1c>
    {
        print_menu = 0;
   81f56:	4b0b      	ldr	r3, [pc, #44]	; (81f84 <menu_ball+0x40>)
   81f58:	2200      	movs	r2, #0
   81f5a:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81f5c:	4b0a      	ldr	r3, [pc, #40]	; (81f88 <menu_ball+0x44>)
   81f5e:	4798      	blx	r3
    {
        lcd_print_s(2, 0, "Direction: no ball");
    }
    
    sprintf(sprintf_buf, "Having ball: %1d", rpi_rx.ibit.have_ball);*/
    lcd_print_s(3, 0, sprintf_buf);
   81f60:	4a0a      	ldr	r2, [pc, #40]	; (81f8c <menu_ball+0x48>)
   81f62:	2100      	movs	r1, #0
   81f64:	2003      	movs	r0, #3
   81f66:	4b0a      	ldr	r3, [pc, #40]	; (81f90 <menu_ball+0x4c>)
   81f68:	4798      	blx	r3
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   81f6a:	79fb      	ldrb	r3, [r7, #7]
   81f6c:	2b10      	cmp	r3, #16
   81f6e:	d105      	bne.n	81f7c <menu_ball+0x38>
    {
        act_menu = MENU_SENSORS;
   81f70:	4b08      	ldr	r3, [pc, #32]	; (81f94 <menu_ball+0x50>)
   81f72:	2202      	movs	r2, #2
   81f74:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   81f76:	4b03      	ldr	r3, [pc, #12]	; (81f84 <menu_ball+0x40>)
   81f78:	2201      	movs	r2, #1
   81f7a:	701a      	strb	r2, [r3, #0]
    }
}
   81f7c:	bf00      	nop
   81f7e:	3708      	adds	r7, #8
   81f80:	46bd      	mov	sp, r7
   81f82:	bd80      	pop	{r7, pc}
   81f84:	2007018c 	.word	0x2007018c
   81f88:	0008167d 	.word	0x0008167d
   81f8c:	20070e4c 	.word	0x20070e4c
   81f90:	0008169d 	.word	0x0008169d
   81f94:	20070dbc 	.word	0x20070dbc

00081f98 <menu_compass>:

static void menu_compass(event_t event1)
{
   81f98:	b590      	push	{r4, r7, lr}
   81f9a:	b083      	sub	sp, #12
   81f9c:	af00      	add	r7, sp, #0
   81f9e:	4603      	mov	r3, r0
   81fa0:	71fb      	strb	r3, [r7, #7]
    static uint16_t prev_direction = 0;
    
    if(print_menu)
   81fa2:	4b24      	ldr	r3, [pc, #144]	; (82034 <menu_compass+0x9c>)
   81fa4:	781b      	ldrb	r3, [r3, #0]
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d004      	beq.n	81fb4 <menu_compass+0x1c>
    {
        print_menu = 0;
   81faa:	4b22      	ldr	r3, [pc, #136]	; (82034 <menu_compass+0x9c>)
   81fac:	2200      	movs	r2, #0
   81fae:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   81fb0:	4b21      	ldr	r3, [pc, #132]	; (82038 <menu_compass+0xa0>)
   81fb2:	4798      	blx	r3
    }
    
    update_compass();
   81fb4:	4b21      	ldr	r3, [pc, #132]	; (8203c <menu_compass+0xa4>)
   81fb6:	4798      	blx	r3
    if(direction != prev_direction)
   81fb8:	4b21      	ldr	r3, [pc, #132]	; (82040 <menu_compass+0xa8>)
   81fba:	881a      	ldrh	r2, [r3, #0]
   81fbc:	4b21      	ldr	r3, [pc, #132]	; (82044 <menu_compass+0xac>)
   81fbe:	881b      	ldrh	r3, [r3, #0]
   81fc0:	429a      	cmp	r2, r3
   81fc2:	d01e      	beq.n	82002 <menu_compass+0x6a>
    {
        prev_direction = direction;
   81fc4:	4b1e      	ldr	r3, [pc, #120]	; (82040 <menu_compass+0xa8>)
   81fc6:	881a      	ldrh	r2, [r3, #0]
   81fc8:	4b1e      	ldr	r3, [pc, #120]	; (82044 <menu_compass+0xac>)
   81fca:	801a      	strh	r2, [r3, #0]
        sprintf(sprintf_buf, "  Direction: %3.1f  ", (float)direction / 10.0);
   81fcc:	4b1c      	ldr	r3, [pc, #112]	; (82040 <menu_compass+0xa8>)
   81fce:	881a      	ldrh	r2, [r3, #0]
   81fd0:	4b1d      	ldr	r3, [pc, #116]	; (82048 <menu_compass+0xb0>)
   81fd2:	4610      	mov	r0, r2
   81fd4:	4798      	blx	r3
   81fd6:	4602      	mov	r2, r0
   81fd8:	4b1c      	ldr	r3, [pc, #112]	; (8204c <menu_compass+0xb4>)
   81fda:	4610      	mov	r0, r2
   81fdc:	4798      	blx	r3
   81fde:	4c1c      	ldr	r4, [pc, #112]	; (82050 <menu_compass+0xb8>)
   81fe0:	f04f 0200 	mov.w	r2, #0
   81fe4:	4b1b      	ldr	r3, [pc, #108]	; (82054 <menu_compass+0xbc>)
   81fe6:	47a0      	blx	r4
   81fe8:	4603      	mov	r3, r0
   81fea:	460c      	mov	r4, r1
   81fec:	461a      	mov	r2, r3
   81fee:	4623      	mov	r3, r4
   81ff0:	4919      	ldr	r1, [pc, #100]	; (82058 <menu_compass+0xc0>)
   81ff2:	481a      	ldr	r0, [pc, #104]	; (8205c <menu_compass+0xc4>)
   81ff4:	4c1a      	ldr	r4, [pc, #104]	; (82060 <menu_compass+0xc8>)
   81ff6:	47a0      	blx	r4
        lcd_print_s(2, 0, sprintf_buf);
   81ff8:	4a18      	ldr	r2, [pc, #96]	; (8205c <menu_compass+0xc4>)
   81ffa:	2100      	movs	r1, #0
   81ffc:	2002      	movs	r0, #2
   81ffe:	4b19      	ldr	r3, [pc, #100]	; (82064 <menu_compass+0xcc>)
   82000:	4798      	blx	r3
    }
    
    switch(event1)
   82002:	79fb      	ldrb	r3, [r7, #7]
   82004:	2b07      	cmp	r3, #7
   82006:	d002      	beq.n	8200e <menu_compass+0x76>
   82008:	2b10      	cmp	r3, #16
   8200a:	d007      	beq.n	8201c <menu_compass+0x84>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_SENSORS;
            print_menu = 1;
            break;
        default:
            break;
   8200c:	e00d      	b.n	8202a <menu_compass+0x92>
            act_menu = MENU_COMPASS_CALIBRATION;
   8200e:	4b16      	ldr	r3, [pc, #88]	; (82068 <menu_compass+0xd0>)
   82010:	2208      	movs	r2, #8
   82012:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82014:	4b07      	ldr	r3, [pc, #28]	; (82034 <menu_compass+0x9c>)
   82016:	2201      	movs	r2, #1
   82018:	701a      	strb	r2, [r3, #0]
            break;
   8201a:	e006      	b.n	8202a <menu_compass+0x92>
            act_menu = MENU_SENSORS;
   8201c:	4b12      	ldr	r3, [pc, #72]	; (82068 <menu_compass+0xd0>)
   8201e:	2202      	movs	r2, #2
   82020:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   82022:	4b04      	ldr	r3, [pc, #16]	; (82034 <menu_compass+0x9c>)
   82024:	2201      	movs	r2, #1
   82026:	701a      	strb	r2, [r3, #0]
            break;
   82028:	bf00      	nop
    }
}
   8202a:	bf00      	nop
   8202c:	370c      	adds	r7, #12
   8202e:	46bd      	mov	sp, r7
   82030:	bd90      	pop	{r4, r7, pc}
   82032:	bf00      	nop
   82034:	2007018c 	.word	0x2007018c
   82038:	0008167d 	.word	0x0008167d
   8203c:	000813b9 	.word	0x000813b9
   82040:	20070e1c 	.word	0x20070e1c
   82044:	20070dc0 	.word	0x20070dc0
   82048:	00084fed 	.word	0x00084fed
   8204c:	000849b5 	.word	0x000849b5
   82050:	00084cb1 	.word	0x00084cb1
   82054:	40240000 	.word	0x40240000
   82058:	000895b8 	.word	0x000895b8
   8205c:	20070e4c 	.word	0x20070e4c
   82060:	00085561 	.word	0x00085561
   82064:	0008169d 	.word	0x0008169d
   82068:	20070dbc 	.word	0x20070dbc

0008206c <menu_compass_calibration>:

static void menu_compass_calibration(event_t event1)
{
   8206c:	b580      	push	{r7, lr}
   8206e:	b084      	sub	sp, #16
   82070:	af00      	add	r7, sp, #0
   82072:	4603      	mov	r3, r0
   82074:	71fb      	strb	r3, [r7, #7]
    if(print_menu)
   82076:	4b2e      	ldr	r3, [pc, #184]	; (82130 <menu_compass_calibration+0xc4>)
   82078:	781b      	ldrb	r3, [r3, #0]
   8207a:	2b00      	cmp	r3, #0
   8207c:	d016      	beq.n	820ac <menu_compass_calibration+0x40>
    {
        print_menu = 0;
   8207e:	4b2c      	ldr	r3, [pc, #176]	; (82130 <menu_compass_calibration+0xc4>)
   82080:	2200      	movs	r2, #0
   82082:	701a      	strb	r2, [r3, #0]
        lcd_clear();
   82084:	4b2b      	ldr	r3, [pc, #172]	; (82134 <menu_compass_calibration+0xc8>)
   82086:	4798      	blx	r3
        lcd_print_s(2, 1, "calibrate compass");
   82088:	4a2b      	ldr	r2, [pc, #172]	; (82138 <menu_compass_calibration+0xcc>)
   8208a:	2101      	movs	r1, #1
   8208c:	2002      	movs	r0, #2
   8208e:	4b2b      	ldr	r3, [pc, #172]	; (8213c <menu_compass_calibration+0xd0>)
   82090:	4798      	blx	r3
        sprintf(sprintf_buf, "  Direction: %1d  ", compass_cal_step + 1);
   82092:	4b2b      	ldr	r3, [pc, #172]	; (82140 <menu_compass_calibration+0xd4>)
   82094:	781b      	ldrb	r3, [r3, #0]
   82096:	3301      	adds	r3, #1
   82098:	461a      	mov	r2, r3
   8209a:	492a      	ldr	r1, [pc, #168]	; (82144 <menu_compass_calibration+0xd8>)
   8209c:	482a      	ldr	r0, [pc, #168]	; (82148 <menu_compass_calibration+0xdc>)
   8209e:	4b2b      	ldr	r3, [pc, #172]	; (8214c <menu_compass_calibration+0xe0>)
   820a0:	4798      	blx	r3
        lcd_print_s(3, 1, sprintf_buf);
   820a2:	4a29      	ldr	r2, [pc, #164]	; (82148 <menu_compass_calibration+0xdc>)
   820a4:	2101      	movs	r1, #1
   820a6:	2003      	movs	r0, #3
   820a8:	4b24      	ldr	r3, [pc, #144]	; (8213c <menu_compass_calibration+0xd0>)
   820aa:	4798      	blx	r3
    }
    
    if(event1 == EVENT_BUTTON_MID_P)
   820ac:	79fb      	ldrb	r3, [r7, #7]
   820ae:	2b07      	cmp	r3, #7
   820b0:	d139      	bne.n	82126 <menu_compass_calibration+0xba>
    {
        twi_packet_t *tx_packet = twi_get_tx_packet();
   820b2:	4b27      	ldr	r3, [pc, #156]	; (82150 <menu_compass_calibration+0xe4>)
   820b4:	4798      	blx	r3
   820b6:	60f8      	str	r0, [r7, #12]
        
        tx_packet->chip = 0x60;
   820b8:	68fb      	ldr	r3, [r7, #12]
   820ba:	2260      	movs	r2, #96	; 0x60
   820bc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        tx_packet->addr[0] = 0x0f;
   820c0:	68fb      	ldr	r3, [r7, #12]
   820c2:	220f      	movs	r2, #15
   820c4:	701a      	strb	r2, [r3, #0]
        tx_packet->addr_length = 1;
   820c6:	68fb      	ldr	r3, [r7, #12]
   820c8:	2201      	movs	r2, #1
   820ca:	605a      	str	r2, [r3, #4]
        
        tx_packet->buffer[0] = 0xff;
   820cc:	68fb      	ldr	r3, [r7, #12]
   820ce:	22ff      	movs	r2, #255	; 0xff
   820d0:	721a      	strb	r2, [r3, #8]
        tx_packet->length = 1;
   820d2:	68fb      	ldr	r3, [r7, #12]
   820d4:	2201      	movs	r2, #1
   820d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        
        set_compass_is_busy();
   820da:	4b1e      	ldr	r3, [pc, #120]	; (82154 <menu_compass_calibration+0xe8>)
   820dc:	4798      	blx	r3
        twi_pdc_master_write(TWI0, tx_packet);
   820de:	68f9      	ldr	r1, [r7, #12]
   820e0:	481d      	ldr	r0, [pc, #116]	; (82158 <menu_compass_calibration+0xec>)
   820e2:	4b1e      	ldr	r3, [pc, #120]	; (8215c <menu_compass_calibration+0xf0>)
   820e4:	4798      	blx	r3
        while(compass_is_busy());
   820e6:	bf00      	nop
   820e8:	4b1d      	ldr	r3, [pc, #116]	; (82160 <menu_compass_calibration+0xf4>)
   820ea:	4798      	blx	r3
   820ec:	4603      	mov	r3, r0
   820ee:	2b00      	cmp	r3, #0
   820f0:	d1fa      	bne.n	820e8 <menu_compass_calibration+0x7c>
        mdelay(500);
   820f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   820f6:	4b1b      	ldr	r3, [pc, #108]	; (82164 <menu_compass_calibration+0xf8>)
   820f8:	4798      	blx	r3
        
        compass_cal_step++;
   820fa:	4b11      	ldr	r3, [pc, #68]	; (82140 <menu_compass_calibration+0xd4>)
   820fc:	781b      	ldrb	r3, [r3, #0]
   820fe:	3301      	adds	r3, #1
   82100:	b2da      	uxtb	r2, r3
   82102:	4b0f      	ldr	r3, [pc, #60]	; (82140 <menu_compass_calibration+0xd4>)
   82104:	701a      	strb	r2, [r3, #0]
        
        if(compass_cal_step == 4)
   82106:	4b0e      	ldr	r3, [pc, #56]	; (82140 <menu_compass_calibration+0xd4>)
   82108:	781b      	ldrb	r3, [r3, #0]
   8210a:	2b04      	cmp	r3, #4
   8210c:	d108      	bne.n	82120 <menu_compass_calibration+0xb4>
        {
            compass_cal_step = 0;
   8210e:	4b0c      	ldr	r3, [pc, #48]	; (82140 <menu_compass_calibration+0xd4>)
   82110:	2200      	movs	r2, #0
   82112:	701a      	strb	r2, [r3, #0]
            act_menu = MENU_COMPASS;
   82114:	4b14      	ldr	r3, [pc, #80]	; (82168 <menu_compass_calibration+0xfc>)
   82116:	2207      	movs	r2, #7
   82118:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   8211a:	4b05      	ldr	r3, [pc, #20]	; (82130 <menu_compass_calibration+0xc4>)
   8211c:	2201      	movs	r2, #1
   8211e:	701a      	strb	r2, [r3, #0]
        }
        print_menu = 1;
   82120:	4b03      	ldr	r3, [pc, #12]	; (82130 <menu_compass_calibration+0xc4>)
   82122:	2201      	movs	r2, #1
   82124:	701a      	strb	r2, [r3, #0]
    }
}
   82126:	bf00      	nop
   82128:	3710      	adds	r7, #16
   8212a:	46bd      	mov	sp, r7
   8212c:	bd80      	pop	{r7, pc}
   8212e:	bf00      	nop
   82130:	2007018c 	.word	0x2007018c
   82134:	0008167d 	.word	0x0008167d
   82138:	000895d0 	.word	0x000895d0
   8213c:	0008169d 	.word	0x0008169d
   82140:	20070dbd 	.word	0x20070dbd
   82144:	000895e4 	.word	0x000895e4
   82148:	20070e4c 	.word	0x20070e4c
   8214c:	00085561 	.word	0x00085561
   82150:	00080f0d 	.word	0x00080f0d
   82154:	00081449 	.word	0x00081449
   82158:	4008c000 	.word	0x4008c000
   8215c:	0008100d 	.word	0x0008100d
   82160:	00081461 	.word	0x00081461
   82164:	00082f65 	.word	0x00082f65
   82168:	20070dbc 	.word	0x20070dbc

0008216c <menu_line>:

static void menu_line(event_t event1)
{
   8216c:	b480      	push	{r7}
   8216e:	b083      	sub	sp, #12
   82170:	af00      	add	r7, sp, #0
   82172:	4603      	mov	r3, r0
   82174:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   82176:	79fb      	ldrb	r3, [r7, #7]
   82178:	2b10      	cmp	r3, #16
   8217a:	d105      	bne.n	82188 <menu_line+0x1c>
    {
        act_menu = MENU_SENSORS;
   8217c:	4b05      	ldr	r3, [pc, #20]	; (82194 <menu_line+0x28>)
   8217e:	2202      	movs	r2, #2
   82180:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   82182:	4b05      	ldr	r3, [pc, #20]	; (82198 <menu_line+0x2c>)
   82184:	2201      	movs	r2, #1
   82186:	701a      	strb	r2, [r3, #0]
    }
}
   82188:	bf00      	nop
   8218a:	370c      	adds	r7, #12
   8218c:	46bd      	mov	sp, r7
   8218e:	bc80      	pop	{r7}
   82190:	4770      	bx	lr
   82192:	bf00      	nop
   82194:	20070dbc 	.word	0x20070dbc
   82198:	2007018c 	.word	0x2007018c

0008219c <menu_line_calibration>:

static void menu_line_calibration(event_t event1)
{
   8219c:	b480      	push	{r7}
   8219e:	b083      	sub	sp, #12
   821a0:	af00      	add	r7, sp, #0
   821a2:	4603      	mov	r3, r0
   821a4:	71fb      	strb	r3, [r7, #7]
    
    
    if(event1 == EVENT_BUTTON_RETURN_P)
   821a6:	79fb      	ldrb	r3, [r7, #7]
   821a8:	2b10      	cmp	r3, #16
   821aa:	d105      	bne.n	821b8 <menu_line_calibration+0x1c>
    {
        act_menu = MENU_LINE;
   821ac:	4b05      	ldr	r3, [pc, #20]	; (821c4 <menu_line_calibration+0x28>)
   821ae:	2205      	movs	r2, #5
   821b0:	701a      	strb	r2, [r3, #0]
        print_menu = 1;
   821b2:	4b05      	ldr	r3, [pc, #20]	; (821c8 <menu_line_calibration+0x2c>)
   821b4:	2201      	movs	r2, #1
   821b6:	701a      	strb	r2, [r3, #0]
    }
}
   821b8:	bf00      	nop
   821ba:	370c      	adds	r7, #12
   821bc:	46bd      	mov	sp, r7
   821be:	bc80      	pop	{r7}
   821c0:	4770      	bx	lr
   821c2:	bf00      	nop
   821c4:	20070dbc 	.word	0x20070dbc
   821c8:	2007018c 	.word	0x2007018c

000821cc <menu_settings>:

static void menu_settings(event_t event1)
{
   821cc:	b580      	push	{r7, lr}
   821ce:	b082      	sub	sp, #8
   821d0:	af00      	add	r7, sp, #0
   821d2:	4603      	mov	r3, r0
   821d4:	71fb      	strb	r3, [r7, #7]
    if (print_menu)
   821d6:	4b40      	ldr	r3, [pc, #256]	; (822d8 <menu_settings+0x10c>)
   821d8:	781b      	ldrb	r3, [r3, #0]
   821da:	2b00      	cmp	r3, #0
   821dc:	d004      	beq.n	821e8 <menu_settings+0x1c>
    {
        print_menu = 0;
   821de:	4b3e      	ldr	r3, [pc, #248]	; (822d8 <menu_settings+0x10c>)
   821e0:	2200      	movs	r2, #0
   821e2:	701a      	strb	r2, [r3, #0]
        print_menu_settings();
   821e4:	4b3d      	ldr	r3, [pc, #244]	; (822dc <menu_settings+0x110>)
   821e6:	4798      	blx	r3
    }
    
    switch(event1)
   821e8:	79fb      	ldrb	r3, [r7, #7]
   821ea:	3b01      	subs	r3, #1
   821ec:	2b0f      	cmp	r3, #15
   821ee:	d869      	bhi.n	822c4 <menu_settings+0xf8>
   821f0:	a201      	add	r2, pc, #4	; (adr r2, 821f8 <menu_settings+0x2c>)
   821f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821f6:	bf00      	nop
   821f8:	00082239 	.word	0x00082239
   821fc:	000822c5 	.word	0x000822c5
   82200:	000822c5 	.word	0x000822c5
   82204:	000822c5 	.word	0x000822c5
   82208:	000822c5 	.word	0x000822c5
   8220c:	000822c5 	.word	0x000822c5
   82210:	00082279 	.word	0x00082279
   82214:	000822c5 	.word	0x000822c5
   82218:	000822c5 	.word	0x000822c5
   8221c:	000822c5 	.word	0x000822c5
   82220:	000822c5 	.word	0x000822c5
   82224:	000822c5 	.word	0x000822c5
   82228:	00082259 	.word	0x00082259
   8222c:	000822c5 	.word	0x000822c5
   82230:	000822c5 	.word	0x000822c5
   82234:	000822b7 	.word	0x000822b7
    {
        case EVENT_BUTTON_UP_P:
            if (menu_info.settings.act_cursor_line > menu_info.settings.min_cursor_line)
   82238:	4b29      	ldr	r3, [pc, #164]	; (822e0 <menu_settings+0x114>)
   8223a:	7a1a      	ldrb	r2, [r3, #8]
   8223c:	4b28      	ldr	r3, [pc, #160]	; (822e0 <menu_settings+0x114>)
   8223e:	7a9b      	ldrb	r3, [r3, #10]
   82240:	429a      	cmp	r2, r3
   82242:	d941      	bls.n	822c8 <menu_settings+0xfc>
            {
                menu_info.settings.act_cursor_line--;
   82244:	4b26      	ldr	r3, [pc, #152]	; (822e0 <menu_settings+0x114>)
   82246:	7a1b      	ldrb	r3, [r3, #8]
   82248:	3b01      	subs	r3, #1
   8224a:	b2da      	uxtb	r2, r3
   8224c:	4b24      	ldr	r3, [pc, #144]	; (822e0 <menu_settings+0x114>)
   8224e:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82250:	4824      	ldr	r0, [pc, #144]	; (822e4 <menu_settings+0x118>)
   82252:	4b25      	ldr	r3, [pc, #148]	; (822e8 <menu_settings+0x11c>)
   82254:	4798      	blx	r3
            }
            break;
   82256:	e037      	b.n	822c8 <menu_settings+0xfc>
        case EVENT_BUTTON_DOWN_P:
            if (menu_info.settings.act_cursor_line < menu_info.settings.max_cursor_line)
   82258:	4b21      	ldr	r3, [pc, #132]	; (822e0 <menu_settings+0x114>)
   8225a:	7a1a      	ldrb	r2, [r3, #8]
   8225c:	4b20      	ldr	r3, [pc, #128]	; (822e0 <menu_settings+0x114>)
   8225e:	7adb      	ldrb	r3, [r3, #11]
   82260:	429a      	cmp	r2, r3
   82262:	d233      	bcs.n	822cc <menu_settings+0x100>
            {
                menu_info.settings.act_cursor_line++;
   82264:	4b1e      	ldr	r3, [pc, #120]	; (822e0 <menu_settings+0x114>)
   82266:	7a1b      	ldrb	r3, [r3, #8]
   82268:	3301      	adds	r3, #1
   8226a:	b2da      	uxtb	r2, r3
   8226c:	4b1c      	ldr	r3, [pc, #112]	; (822e0 <menu_settings+0x114>)
   8226e:	721a      	strb	r2, [r3, #8]
                print_cursor(&menu_info.settings);
   82270:	481c      	ldr	r0, [pc, #112]	; (822e4 <menu_settings+0x118>)
   82272:	4b1d      	ldr	r3, [pc, #116]	; (822e8 <menu_settings+0x11c>)
   82274:	4798      	blx	r3
            }
            break;
   82276:	e029      	b.n	822cc <menu_settings+0x100>
        case EVENT_BUTTON_MID_P:
            switch (menu_info.settings.act_cursor_line)
   82278:	4b19      	ldr	r3, [pc, #100]	; (822e0 <menu_settings+0x114>)
   8227a:	7a1b      	ldrb	r3, [r3, #8]
   8227c:	2b02      	cmp	r3, #2
   8227e:	d00b      	beq.n	82298 <menu_settings+0xcc>
   82280:	2b03      	cmp	r3, #3
   82282:	d010      	beq.n	822a6 <menu_settings+0xda>
   82284:	2b01      	cmp	r3, #1
   82286:	d000      	beq.n	8228a <menu_settings+0xbe>
                case 3:
                    act_menu = MENU_LINE;
                    print_menu = 1;
                    break;
                default:
                    break;
   82288:	e014      	b.n	822b4 <menu_settings+0xe8>
                    act_menu = MENU_BALL;
   8228a:	4b18      	ldr	r3, [pc, #96]	; (822ec <menu_settings+0x120>)
   8228c:	2204      	movs	r2, #4
   8228e:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   82290:	4b11      	ldr	r3, [pc, #68]	; (822d8 <menu_settings+0x10c>)
   82292:	2201      	movs	r2, #1
   82294:	701a      	strb	r2, [r3, #0]
                    break;
   82296:	e00d      	b.n	822b4 <menu_settings+0xe8>
                    act_menu = MENU_COMPASS;
   82298:	4b14      	ldr	r3, [pc, #80]	; (822ec <menu_settings+0x120>)
   8229a:	2207      	movs	r2, #7
   8229c:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   8229e:	4b0e      	ldr	r3, [pc, #56]	; (822d8 <menu_settings+0x10c>)
   822a0:	2201      	movs	r2, #1
   822a2:	701a      	strb	r2, [r3, #0]
                    break;
   822a4:	e006      	b.n	822b4 <menu_settings+0xe8>
                    act_menu = MENU_LINE;
   822a6:	4b11      	ldr	r3, [pc, #68]	; (822ec <menu_settings+0x120>)
   822a8:	2205      	movs	r2, #5
   822aa:	701a      	strb	r2, [r3, #0]
                    print_menu = 1;
   822ac:	4b0a      	ldr	r3, [pc, #40]	; (822d8 <menu_settings+0x10c>)
   822ae:	2201      	movs	r2, #1
   822b0:	701a      	strb	r2, [r3, #0]
                    break;
   822b2:	bf00      	nop
            }
            break;
   822b4:	e00b      	b.n	822ce <menu_settings+0x102>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
   822b6:	4b0d      	ldr	r3, [pc, #52]	; (822ec <menu_settings+0x120>)
   822b8:	2200      	movs	r2, #0
   822ba:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   822bc:	4b06      	ldr	r3, [pc, #24]	; (822d8 <menu_settings+0x10c>)
   822be:	2201      	movs	r2, #1
   822c0:	701a      	strb	r2, [r3, #0]
            break;
   822c2:	e004      	b.n	822ce <menu_settings+0x102>
        default:
            break;
   822c4:	bf00      	nop
   822c6:	e002      	b.n	822ce <menu_settings+0x102>
            break;
   822c8:	bf00      	nop
   822ca:	e000      	b.n	822ce <menu_settings+0x102>
            break;
   822cc:	bf00      	nop
    }
}
   822ce:	bf00      	nop
   822d0:	3708      	adds	r7, #8
   822d2:	46bd      	mov	sp, r7
   822d4:	bd80      	pop	{r7, pc}
   822d6:	bf00      	nop
   822d8:	2007018c 	.word	0x2007018c
   822dc:	000824d9 	.word	0x000824d9
   822e0:	20070190 	.word	0x20070190
   822e4:	20070198 	.word	0x20070198
   822e8:	00082541 	.word	0x00082541
   822ec:	20070dbc 	.word	0x20070dbc

000822f0 <menu_shutdown>:

static void menu_shutdown(event_t event1)
{
   822f0:	b580      	push	{r7, lr}
   822f2:	b082      	sub	sp, #8
   822f4:	af00      	add	r7, sp, #0
   822f6:	4603      	mov	r3, r0
   822f8:	71fb      	strb	r3, [r7, #7]
    if(shutdown_confirmed)
   822fa:	4b35      	ldr	r3, [pc, #212]	; (823d0 <menu_shutdown+0xe0>)
   822fc:	781b      	ldrb	r3, [r3, #0]
   822fe:	2b00      	cmp	r3, #0
   82300:	d043      	beq.n	8238a <menu_shutdown+0x9a>
    {
        lcd_clear();
   82302:	4b34      	ldr	r3, [pc, #208]	; (823d4 <menu_shutdown+0xe4>)
   82304:	4798      	blx	r3
        lcd_print_s(2, 2, "shutting down...");
   82306:	4a34      	ldr	r2, [pc, #208]	; (823d8 <menu_shutdown+0xe8>)
   82308:	2102      	movs	r1, #2
   8230a:	2002      	movs	r0, #2
   8230c:	4b33      	ldr	r3, [pc, #204]	; (823dc <menu_shutdown+0xec>)
   8230e:	4798      	blx	r3
        
        ioport_set_pin_level(LED_ONBOARD, 0);
   82310:	2100      	movs	r1, #0
   82312:	206a      	movs	r0, #106	; 0x6a
   82314:	4b32      	ldr	r3, [pc, #200]	; (823e0 <menu_shutdown+0xf0>)
   82316:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   82318:	2100      	movs	r1, #0
   8231a:	2066      	movs	r0, #102	; 0x66
   8231c:	4b30      	ldr	r3, [pc, #192]	; (823e0 <menu_shutdown+0xf0>)
   8231e:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   82320:	2100      	movs	r1, #0
   82322:	2067      	movs	r0, #103	; 0x67
   82324:	4b2e      	ldr	r3, [pc, #184]	; (823e0 <menu_shutdown+0xf0>)
   82326:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   82328:	2100      	movs	r1, #0
   8232a:	2068      	movs	r0, #104	; 0x68
   8232c:	4b2c      	ldr	r3, [pc, #176]	; (823e0 <menu_shutdown+0xf0>)
   8232e:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   82330:	2100      	movs	r1, #0
   82332:	2069      	movs	r0, #105	; 0x69
   82334:	4b2a      	ldr	r3, [pc, #168]	; (823e0 <menu_shutdown+0xf0>)
   82336:	4798      	blx	r3
        pwm_channel_disable(PWM, MREAR);
        
        pwm_channel_disable(PWM, ENC_CLK);
        
        sensor_parameters.ibit.sleep_mode = 1;*/
        update_comm();
   82338:	4b2a      	ldr	r3, [pc, #168]	; (823e4 <menu_shutdown+0xf4>)
   8233a:	4798      	blx	r3
        
        ioport_set_pin_level(RPI1, 0);
   8233c:	2100      	movs	r1, #0
   8233e:	2001      	movs	r0, #1
   82340:	4b27      	ldr	r3, [pc, #156]	; (823e0 <menu_shutdown+0xf0>)
   82342:	4798      	blx	r3
        while (ioport_get_pin_level(RPI2) == 1);
   82344:	bf00      	nop
   82346:	2008      	movs	r0, #8
   82348:	4b27      	ldr	r3, [pc, #156]	; (823e8 <menu_shutdown+0xf8>)
   8234a:	4798      	blx	r3
   8234c:	4603      	mov	r3, r0
   8234e:	2b00      	cmp	r3, #0
   82350:	d1f9      	bne.n	82346 <menu_shutdown+0x56>
        mdelay(7500);
   82352:	f641 504c 	movw	r0, #7500	; 0x1d4c
   82356:	4b25      	ldr	r3, [pc, #148]	; (823ec <menu_shutdown+0xfc>)
   82358:	4798      	blx	r3
        
        lcd_set_backlight(LCD_LIGHT_OFF);
   8235a:	2000      	movs	r0, #0
   8235c:	4b24      	ldr	r3, [pc, #144]	; (823f0 <menu_shutdown+0x100>)
   8235e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82360:	4b1c      	ldr	r3, [pc, #112]	; (823d4 <menu_shutdown+0xe4>)
   82362:	4798      	blx	r3
        mdelay(100);
   82364:	2064      	movs	r0, #100	; 0x64
   82366:	4b21      	ldr	r3, [pc, #132]	; (823ec <menu_shutdown+0xfc>)
   82368:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_ON);
   8236a:	2008      	movs	r0, #8
   8236c:	4b20      	ldr	r3, [pc, #128]	; (823f0 <menu_shutdown+0x100>)
   8236e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82370:	4b18      	ldr	r3, [pc, #96]	; (823d4 <menu_shutdown+0xe4>)
   82372:	4798      	blx	r3
        mdelay(100);
   82374:	2064      	movs	r0, #100	; 0x64
   82376:	4b1d      	ldr	r3, [pc, #116]	; (823ec <menu_shutdown+0xfc>)
   82378:	4798      	blx	r3
        lcd_set_backlight(LCD_LIGHT_OFF);
   8237a:	2000      	movs	r0, #0
   8237c:	4b1c      	ldr	r3, [pc, #112]	; (823f0 <menu_shutdown+0x100>)
   8237e:	4798      	blx	r3
        lcd_clear();    // required to turn backlight on/off
   82380:	4b14      	ldr	r3, [pc, #80]	; (823d4 <menu_shutdown+0xe4>)
   82382:	4798      	blx	r3
        
        while(1)
        {
            update_comm();
   82384:	4b17      	ldr	r3, [pc, #92]	; (823e4 <menu_shutdown+0xf4>)
   82386:	4798      	blx	r3
   82388:	e7fc      	b.n	82384 <menu_shutdown+0x94>
            //check_bat();
        }
    }
    else
    {
        if(print_menu)
   8238a:	4b1a      	ldr	r3, [pc, #104]	; (823f4 <menu_shutdown+0x104>)
   8238c:	781b      	ldrb	r3, [r3, #0]
   8238e:	2b00      	cmp	r3, #0
   82390:	d009      	beq.n	823a6 <menu_shutdown+0xb6>
        {
            print_menu = 0;
   82392:	4b18      	ldr	r3, [pc, #96]	; (823f4 <menu_shutdown+0x104>)
   82394:	2200      	movs	r2, #0
   82396:	701a      	strb	r2, [r3, #0]
            lcd_clear();
   82398:	4b0e      	ldr	r3, [pc, #56]	; (823d4 <menu_shutdown+0xe4>)
   8239a:	4798      	blx	r3
            lcd_print_s(2, 1, "confirm shutdown?");
   8239c:	4a16      	ldr	r2, [pc, #88]	; (823f8 <menu_shutdown+0x108>)
   8239e:	2101      	movs	r1, #1
   823a0:	2002      	movs	r0, #2
   823a2:	4b0e      	ldr	r3, [pc, #56]	; (823dc <menu_shutdown+0xec>)
   823a4:	4798      	blx	r3
        }
    }
    
    switch (event1)
   823a6:	79fb      	ldrb	r3, [r7, #7]
   823a8:	2b07      	cmp	r3, #7
   823aa:	d002      	beq.n	823b2 <menu_shutdown+0xc2>
   823ac:	2b10      	cmp	r3, #16
   823ae:	d004      	beq.n	823ba <menu_shutdown+0xca>
        case EVENT_BUTTON_RETURN_P:
            act_menu = MENU_MAIN;
            print_menu = 1;
            break;
        default:
            break;
   823b0:	e00a      	b.n	823c8 <menu_shutdown+0xd8>
            shutdown_confirmed = 1;
   823b2:	4b07      	ldr	r3, [pc, #28]	; (823d0 <menu_shutdown+0xe0>)
   823b4:	2201      	movs	r2, #1
   823b6:	701a      	strb	r2, [r3, #0]
            break;
   823b8:	e006      	b.n	823c8 <menu_shutdown+0xd8>
            act_menu = MENU_MAIN;
   823ba:	4b10      	ldr	r3, [pc, #64]	; (823fc <menu_shutdown+0x10c>)
   823bc:	2200      	movs	r2, #0
   823be:	701a      	strb	r2, [r3, #0]
            print_menu = 1;
   823c0:	4b0c      	ldr	r3, [pc, #48]	; (823f4 <menu_shutdown+0x104>)
   823c2:	2201      	movs	r2, #1
   823c4:	701a      	strb	r2, [r3, #0]
            break;
   823c6:	bf00      	nop
    }
}
   823c8:	bf00      	nop
   823ca:	3708      	adds	r7, #8
   823cc:	46bd      	mov	sp, r7
   823ce:	bd80      	pop	{r7, pc}
   823d0:	20070dbe 	.word	0x20070dbe
   823d4:	0008167d 	.word	0x0008167d
   823d8:	000895f8 	.word	0x000895f8
   823dc:	0008169d 	.word	0x0008169d
   823e0:	00081b39 	.word	0x00081b39
   823e4:	00082f91 	.word	0x00082f91
   823e8:	00081ba3 	.word	0x00081ba3
   823ec:	00082f65 	.word	0x00082f65
   823f0:	0008165d 	.word	0x0008165d
   823f4:	2007018c 	.word	0x2007018c
   823f8:	0008960c 	.word	0x0008960c
   823fc:	20070dbc 	.word	0x20070dbc

00082400 <print_menu_main>:

static void print_menu_main(void)
{
   82400:	b590      	push	{r4, r7, lr}
   82402:	b085      	sub	sp, #20
   82404:	af00      	add	r7, sp, #0
    const char *text[4] = {"    noOS ONE", " Match", " Sensors", " Settings"};
   82406:	4b14      	ldr	r3, [pc, #80]	; (82458 <print_menu_main+0x58>)
   82408:	463c      	mov	r4, r7
   8240a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8240c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82410:	4b12      	ldr	r3, [pc, #72]	; (8245c <print_menu_main+0x5c>)
   82412:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82414:	683b      	ldr	r3, [r7, #0]
   82416:	461a      	mov	r2, r3
   82418:	2100      	movs	r1, #0
   8241a:	2001      	movs	r0, #1
   8241c:	4b10      	ldr	r3, [pc, #64]	; (82460 <print_menu_main+0x60>)
   8241e:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82420:	687b      	ldr	r3, [r7, #4]
   82422:	461a      	mov	r2, r3
   82424:	2100      	movs	r1, #0
   82426:	2002      	movs	r0, #2
   82428:	4b0d      	ldr	r3, [pc, #52]	; (82460 <print_menu_main+0x60>)
   8242a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   8242c:	68bb      	ldr	r3, [r7, #8]
   8242e:	461a      	mov	r2, r3
   82430:	2100      	movs	r1, #0
   82432:	2003      	movs	r0, #3
   82434:	4b0a      	ldr	r3, [pc, #40]	; (82460 <print_menu_main+0x60>)
   82436:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82438:	68fb      	ldr	r3, [r7, #12]
   8243a:	461a      	mov	r2, r3
   8243c:	2100      	movs	r1, #0
   8243e:	2004      	movs	r0, #4
   82440:	4b07      	ldr	r3, [pc, #28]	; (82460 <print_menu_main+0x60>)
   82442:	4798      	blx	r3
    print_cursor(&menu_info.main);
   82444:	4807      	ldr	r0, [pc, #28]	; (82464 <print_menu_main+0x64>)
   82446:	4b08      	ldr	r3, [pc, #32]	; (82468 <print_menu_main+0x68>)
   82448:	4798      	blx	r3
    update_battery(1);
   8244a:	2001      	movs	r0, #1
   8244c:	4b07      	ldr	r3, [pc, #28]	; (8246c <print_menu_main+0x6c>)
   8244e:	4798      	blx	r3
}
   82450:	bf00      	nop
   82452:	3714      	adds	r7, #20
   82454:	46bd      	mov	sp, r7
   82456:	bd90      	pop	{r4, r7, pc}
   82458:	00089650 	.word	0x00089650
   8245c:	0008167d 	.word	0x0008167d
   82460:	0008169d 	.word	0x0008169d
   82464:	20070190 	.word	0x20070190
   82468:	00082541 	.word	0x00082541
   8246c:	00082fd9 	.word	0x00082fd9

00082470 <print_menu_sensors>:

static void print_menu_sensors(void)
{
   82470:	b590      	push	{r4, r7, lr}
   82472:	b085      	sub	sp, #20
   82474:	af00      	add	r7, sp, #0
    const char *text[4] = {" Ball", " Compass", " Line", " "};
   82476:	4b13      	ldr	r3, [pc, #76]	; (824c4 <print_menu_sensors+0x54>)
   82478:	463c      	mov	r4, r7
   8247a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8247c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   82480:	4b11      	ldr	r3, [pc, #68]	; (824c8 <print_menu_sensors+0x58>)
   82482:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   82484:	683b      	ldr	r3, [r7, #0]
   82486:	461a      	mov	r2, r3
   82488:	2100      	movs	r1, #0
   8248a:	2001      	movs	r0, #1
   8248c:	4b0f      	ldr	r3, [pc, #60]	; (824cc <print_menu_sensors+0x5c>)
   8248e:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   82490:	687b      	ldr	r3, [r7, #4]
   82492:	461a      	mov	r2, r3
   82494:	2100      	movs	r1, #0
   82496:	2002      	movs	r0, #2
   82498:	4b0c      	ldr	r3, [pc, #48]	; (824cc <print_menu_sensors+0x5c>)
   8249a:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   8249c:	68bb      	ldr	r3, [r7, #8]
   8249e:	461a      	mov	r2, r3
   824a0:	2100      	movs	r1, #0
   824a2:	2003      	movs	r0, #3
   824a4:	4b09      	ldr	r3, [pc, #36]	; (824cc <print_menu_sensors+0x5c>)
   824a6:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   824a8:	68fb      	ldr	r3, [r7, #12]
   824aa:	461a      	mov	r2, r3
   824ac:	2100      	movs	r1, #0
   824ae:	2004      	movs	r0, #4
   824b0:	4b06      	ldr	r3, [pc, #24]	; (824cc <print_menu_sensors+0x5c>)
   824b2:	4798      	blx	r3
    print_cursor(&menu_info.sensors);
   824b4:	4806      	ldr	r0, [pc, #24]	; (824d0 <print_menu_sensors+0x60>)
   824b6:	4b07      	ldr	r3, [pc, #28]	; (824d4 <print_menu_sensors+0x64>)
   824b8:	4798      	blx	r3
}
   824ba:	bf00      	nop
   824bc:	3714      	adds	r7, #20
   824be:	46bd      	mov	sp, r7
   824c0:	bd90      	pop	{r4, r7, pc}
   824c2:	bf00      	nop
   824c4:	00089680 	.word	0x00089680
   824c8:	0008167d 	.word	0x0008167d
   824cc:	0008169d 	.word	0x0008169d
   824d0:	20070194 	.word	0x20070194
   824d4:	00082541 	.word	0x00082541

000824d8 <print_menu_settings>:

static void print_menu_settings(void)
{
   824d8:	b590      	push	{r4, r7, lr}
   824da:	b085      	sub	sp, #20
   824dc:	af00      	add	r7, sp, #0
    const char *text[4] = {" ", " ", " ", " "};
   824de:	4b13      	ldr	r3, [pc, #76]	; (8252c <print_menu_settings+0x54>)
   824e0:	463c      	mov	r4, r7
   824e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   824e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    lcd_print_m(text);
    lcd_clear();
   824e8:	4b11      	ldr	r3, [pc, #68]	; (82530 <print_menu_settings+0x58>)
   824ea:	4798      	blx	r3
    lcd_print_s(1, 0, text[0]);
   824ec:	683b      	ldr	r3, [r7, #0]
   824ee:	461a      	mov	r2, r3
   824f0:	2100      	movs	r1, #0
   824f2:	2001      	movs	r0, #1
   824f4:	4b0f      	ldr	r3, [pc, #60]	; (82534 <print_menu_settings+0x5c>)
   824f6:	4798      	blx	r3
    lcd_print_s(2, 0, text[1]);
   824f8:	687b      	ldr	r3, [r7, #4]
   824fa:	461a      	mov	r2, r3
   824fc:	2100      	movs	r1, #0
   824fe:	2002      	movs	r0, #2
   82500:	4b0c      	ldr	r3, [pc, #48]	; (82534 <print_menu_settings+0x5c>)
   82502:	4798      	blx	r3
    lcd_print_s(3, 0, text[2]);
   82504:	68bb      	ldr	r3, [r7, #8]
   82506:	461a      	mov	r2, r3
   82508:	2100      	movs	r1, #0
   8250a:	2003      	movs	r0, #3
   8250c:	4b09      	ldr	r3, [pc, #36]	; (82534 <print_menu_settings+0x5c>)
   8250e:	4798      	blx	r3
    lcd_print_s(4, 0, text[3]);
   82510:	68fb      	ldr	r3, [r7, #12]
   82512:	461a      	mov	r2, r3
   82514:	2100      	movs	r1, #0
   82516:	2004      	movs	r0, #4
   82518:	4b06      	ldr	r3, [pc, #24]	; (82534 <print_menu_settings+0x5c>)
   8251a:	4798      	blx	r3
    print_cursor(&menu_info.settings);
   8251c:	4806      	ldr	r0, [pc, #24]	; (82538 <print_menu_settings+0x60>)
   8251e:	4b07      	ldr	r3, [pc, #28]	; (8253c <print_menu_settings+0x64>)
   82520:	4798      	blx	r3
}
   82522:	bf00      	nop
   82524:	3714      	adds	r7, #20
   82526:	46bd      	mov	sp, r7
   82528:	bd90      	pop	{r4, r7, pc}
   8252a:	bf00      	nop
   8252c:	00089690 	.word	0x00089690
   82530:	0008167d 	.word	0x0008167d
   82534:	0008169d 	.word	0x0008169d
   82538:	20070198 	.word	0x20070198
   8253c:	00082541 	.word	0x00082541

00082540 <print_cursor>:

static void print_cursor(menu_info_t *info)
{
   82540:	b580      	push	{r7, lr}
   82542:	b082      	sub	sp, #8
   82544:	af00      	add	r7, sp, #0
   82546:	6078      	str	r0, [r7, #4]
    lcd_print_s(info->prev_cursor_line, 0, " ");
   82548:	687b      	ldr	r3, [r7, #4]
   8254a:	785b      	ldrb	r3, [r3, #1]
   8254c:	4a09      	ldr	r2, [pc, #36]	; (82574 <print_cursor+0x34>)
   8254e:	2100      	movs	r1, #0
   82550:	4618      	mov	r0, r3
   82552:	4b09      	ldr	r3, [pc, #36]	; (82578 <print_cursor+0x38>)
   82554:	4798      	blx	r3
    lcd_print_s(info->act_cursor_line, 0, ">");
   82556:	687b      	ldr	r3, [r7, #4]
   82558:	781b      	ldrb	r3, [r3, #0]
   8255a:	4a08      	ldr	r2, [pc, #32]	; (8257c <print_cursor+0x3c>)
   8255c:	2100      	movs	r1, #0
   8255e:	4618      	mov	r0, r3
   82560:	4b05      	ldr	r3, [pc, #20]	; (82578 <print_cursor+0x38>)
   82562:	4798      	blx	r3
    
    info->prev_cursor_line = info->act_cursor_line;
   82564:	687b      	ldr	r3, [r7, #4]
   82566:	781a      	ldrb	r2, [r3, #0]
   82568:	687b      	ldr	r3, [r7, #4]
   8256a:	705a      	strb	r2, [r3, #1]
}
   8256c:	bf00      	nop
   8256e:	3708      	adds	r7, #8
   82570:	46bd      	mov	sp, r7
   82572:	bd80      	pop	{r7, pc}
   82574:	0008967c 	.word	0x0008967c
   82578:	0008169d 	.word	0x0008169d
   8257c:	000896a0 	.word	0x000896a0

00082580 <button_events>:

event_t button_events(void)
{
   82580:	b580      	push	{r7, lr}
   82582:	b082      	sub	sp, #8
   82584:	af00      	add	r7, sp, #0
    event_t nextEvent = EVENT_NO_EVENT;
   82586:	2300      	movs	r3, #0
   82588:	71fb      	strb	r3, [r7, #7]

    if (getTicks() >= (ticks_button_update + 30))
   8258a:	4b75      	ldr	r3, [pc, #468]	; (82760 <button_events+0x1e0>)
   8258c:	4798      	blx	r3
   8258e:	4602      	mov	r2, r0
   82590:	4b74      	ldr	r3, [pc, #464]	; (82764 <button_events+0x1e4>)
   82592:	681b      	ldr	r3, [r3, #0]
   82594:	331e      	adds	r3, #30
   82596:	429a      	cmp	r2, r3
   82598:	f0c0 80dd 	bcc.w	82756 <button_events+0x1d6>
    {
        ticks_button_update = getTicks();
   8259c:	4b70      	ldr	r3, [pc, #448]	; (82760 <button_events+0x1e0>)
   8259e:	4798      	blx	r3
   825a0:	4602      	mov	r2, r0
   825a2:	4b70      	ldr	r3, [pc, #448]	; (82764 <button_events+0x1e4>)
   825a4:	601a      	str	r2, [r3, #0]
        
        pb_up_act = ioport_get_pin_level(PB_UP);
   825a6:	2060      	movs	r0, #96	; 0x60
   825a8:	4b6f      	ldr	r3, [pc, #444]	; (82768 <button_events+0x1e8>)
   825aa:	4798      	blx	r3
   825ac:	4603      	mov	r3, r0
   825ae:	461a      	mov	r2, r3
   825b0:	4b6e      	ldr	r3, [pc, #440]	; (8276c <button_events+0x1ec>)
   825b2:	701a      	strb	r2, [r3, #0]
        pb_left_act = ioport_get_pin_level(PB_LEFT);
   825b4:	2061      	movs	r0, #97	; 0x61
   825b6:	4b6c      	ldr	r3, [pc, #432]	; (82768 <button_events+0x1e8>)
   825b8:	4798      	blx	r3
   825ba:	4603      	mov	r3, r0
   825bc:	461a      	mov	r2, r3
   825be:	4b6c      	ldr	r3, [pc, #432]	; (82770 <button_events+0x1f0>)
   825c0:	701a      	strb	r2, [r3, #0]
        pb_mid_act = ioport_get_pin_level(PB_MID);
   825c2:	2062      	movs	r0, #98	; 0x62
   825c4:	4b68      	ldr	r3, [pc, #416]	; (82768 <button_events+0x1e8>)
   825c6:	4798      	blx	r3
   825c8:	4603      	mov	r3, r0
   825ca:	461a      	mov	r2, r3
   825cc:	4b69      	ldr	r3, [pc, #420]	; (82774 <button_events+0x1f4>)
   825ce:	701a      	strb	r2, [r3, #0]
        pb_right_act = ioport_get_pin_level(PB_RIGHT);
   825d0:	2063      	movs	r0, #99	; 0x63
   825d2:	4b65      	ldr	r3, [pc, #404]	; (82768 <button_events+0x1e8>)
   825d4:	4798      	blx	r3
   825d6:	4603      	mov	r3, r0
   825d8:	461a      	mov	r2, r3
   825da:	4b67      	ldr	r3, [pc, #412]	; (82778 <button_events+0x1f8>)
   825dc:	701a      	strb	r2, [r3, #0]
        pb_down_act = ioport_get_pin_level(PB_DOWN);
   825de:	2064      	movs	r0, #100	; 0x64
   825e0:	4b61      	ldr	r3, [pc, #388]	; (82768 <button_events+0x1e8>)
   825e2:	4798      	blx	r3
   825e4:	4603      	mov	r3, r0
   825e6:	461a      	mov	r2, r3
   825e8:	4b64      	ldr	r3, [pc, #400]	; (8277c <button_events+0x1fc>)
   825ea:	701a      	strb	r2, [r3, #0]
        pb_return_act = ioport_get_pin_level(PB_RETURN);
   825ec:	2065      	movs	r0, #101	; 0x65
   825ee:	4b5e      	ldr	r3, [pc, #376]	; (82768 <button_events+0x1e8>)
   825f0:	4798      	blx	r3
   825f2:	4603      	mov	r3, r0
   825f4:	461a      	mov	r2, r3
   825f6:	4b62      	ldr	r3, [pc, #392]	; (82780 <button_events+0x200>)
   825f8:	701a      	strb	r2, [r3, #0]
        
        if (pb_up_act != pb_up_prev && pb_up_act == 0)
   825fa:	4b5c      	ldr	r3, [pc, #368]	; (8276c <button_events+0x1ec>)
   825fc:	781a      	ldrb	r2, [r3, #0]
   825fe:	4b61      	ldr	r3, [pc, #388]	; (82784 <button_events+0x204>)
   82600:	781b      	ldrb	r3, [r3, #0]
   82602:	429a      	cmp	r2, r3
   82604:	d006      	beq.n	82614 <button_events+0x94>
   82606:	4b59      	ldr	r3, [pc, #356]	; (8276c <button_events+0x1ec>)
   82608:	781b      	ldrb	r3, [r3, #0]
   8260a:	2b00      	cmp	r3, #0
   8260c:	d102      	bne.n	82614 <button_events+0x94>
        {
            nextEvent = EVENT_BUTTON_UP_P;
   8260e:	2301      	movs	r3, #1
   82610:	71fb      	strb	r3, [r7, #7]
   82612:	e00b      	b.n	8262c <button_events+0xac>
        }
        else if (pb_up_act != pb_up_prev && pb_up_act == 1)
   82614:	4b55      	ldr	r3, [pc, #340]	; (8276c <button_events+0x1ec>)
   82616:	781a      	ldrb	r2, [r3, #0]
   82618:	4b5a      	ldr	r3, [pc, #360]	; (82784 <button_events+0x204>)
   8261a:	781b      	ldrb	r3, [r3, #0]
   8261c:	429a      	cmp	r2, r3
   8261e:	d005      	beq.n	8262c <button_events+0xac>
   82620:	4b52      	ldr	r3, [pc, #328]	; (8276c <button_events+0x1ec>)
   82622:	781b      	ldrb	r3, [r3, #0]
   82624:	2b01      	cmp	r3, #1
   82626:	d101      	bne.n	8262c <button_events+0xac>
        {
            nextEvent = EVENT_BUTTON_UP_R;
   82628:	2303      	movs	r3, #3
   8262a:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_up_act == pb_up_prev && pb_up_act == 0)
        {
            nextEvent = EVENT_BUTTON_UP_H;
        }*/
        
        if (pb_left_act != pb_left_prev && pb_left_act == 0)
   8262c:	4b50      	ldr	r3, [pc, #320]	; (82770 <button_events+0x1f0>)
   8262e:	781a      	ldrb	r2, [r3, #0]
   82630:	4b55      	ldr	r3, [pc, #340]	; (82788 <button_events+0x208>)
   82632:	781b      	ldrb	r3, [r3, #0]
   82634:	429a      	cmp	r2, r3
   82636:	d006      	beq.n	82646 <button_events+0xc6>
   82638:	4b4d      	ldr	r3, [pc, #308]	; (82770 <button_events+0x1f0>)
   8263a:	781b      	ldrb	r3, [r3, #0]
   8263c:	2b00      	cmp	r3, #0
   8263e:	d102      	bne.n	82646 <button_events+0xc6>
        {
            nextEvent = EVENT_BUTTON_LEFT_P;
   82640:	2304      	movs	r3, #4
   82642:	71fb      	strb	r3, [r7, #7]
   82644:	e00b      	b.n	8265e <button_events+0xde>
        }
        else if (pb_left_act != pb_left_prev && pb_left_act == 1)
   82646:	4b4a      	ldr	r3, [pc, #296]	; (82770 <button_events+0x1f0>)
   82648:	781a      	ldrb	r2, [r3, #0]
   8264a:	4b4f      	ldr	r3, [pc, #316]	; (82788 <button_events+0x208>)
   8264c:	781b      	ldrb	r3, [r3, #0]
   8264e:	429a      	cmp	r2, r3
   82650:	d005      	beq.n	8265e <button_events+0xde>
   82652:	4b47      	ldr	r3, [pc, #284]	; (82770 <button_events+0x1f0>)
   82654:	781b      	ldrb	r3, [r3, #0]
   82656:	2b01      	cmp	r3, #1
   82658:	d101      	bne.n	8265e <button_events+0xde>
        {
            nextEvent = EVENT_BUTTON_LEFT_R;
   8265a:	2306      	movs	r3, #6
   8265c:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_left_act == pb_left_prev && pb_left_act == 0)
        {
            nextEvent = EVENT_BUTTON_LEFT_H;
        }*/
        
        if (pb_mid_act != pb_mid_prev && pb_mid_act == 0)
   8265e:	4b45      	ldr	r3, [pc, #276]	; (82774 <button_events+0x1f4>)
   82660:	781a      	ldrb	r2, [r3, #0]
   82662:	4b4a      	ldr	r3, [pc, #296]	; (8278c <button_events+0x20c>)
   82664:	781b      	ldrb	r3, [r3, #0]
   82666:	429a      	cmp	r2, r3
   82668:	d006      	beq.n	82678 <button_events+0xf8>
   8266a:	4b42      	ldr	r3, [pc, #264]	; (82774 <button_events+0x1f4>)
   8266c:	781b      	ldrb	r3, [r3, #0]
   8266e:	2b00      	cmp	r3, #0
   82670:	d102      	bne.n	82678 <button_events+0xf8>
        {
            nextEvent = EVENT_BUTTON_MID_P;
   82672:	2307      	movs	r3, #7
   82674:	71fb      	strb	r3, [r7, #7]
   82676:	e00b      	b.n	82690 <button_events+0x110>
        }
        else if (pb_mid_act != pb_mid_prev && pb_mid_act == 1)
   82678:	4b3e      	ldr	r3, [pc, #248]	; (82774 <button_events+0x1f4>)
   8267a:	781a      	ldrb	r2, [r3, #0]
   8267c:	4b43      	ldr	r3, [pc, #268]	; (8278c <button_events+0x20c>)
   8267e:	781b      	ldrb	r3, [r3, #0]
   82680:	429a      	cmp	r2, r3
   82682:	d005      	beq.n	82690 <button_events+0x110>
   82684:	4b3b      	ldr	r3, [pc, #236]	; (82774 <button_events+0x1f4>)
   82686:	781b      	ldrb	r3, [r3, #0]
   82688:	2b01      	cmp	r3, #1
   8268a:	d101      	bne.n	82690 <button_events+0x110>
        {
            nextEvent = EVENT_BUTTON_MID_R;
   8268c:	2309      	movs	r3, #9
   8268e:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_mid_act == pb_mid_prev && pb_mid_act == 0)
        {
            nextEvent = EVENT_BUTTON_MID_H;
        }*/
        
        if (pb_right_act != pb_right_prev && pb_right_act == 0)
   82690:	4b39      	ldr	r3, [pc, #228]	; (82778 <button_events+0x1f8>)
   82692:	781a      	ldrb	r2, [r3, #0]
   82694:	4b3e      	ldr	r3, [pc, #248]	; (82790 <button_events+0x210>)
   82696:	781b      	ldrb	r3, [r3, #0]
   82698:	429a      	cmp	r2, r3
   8269a:	d006      	beq.n	826aa <button_events+0x12a>
   8269c:	4b36      	ldr	r3, [pc, #216]	; (82778 <button_events+0x1f8>)
   8269e:	781b      	ldrb	r3, [r3, #0]
   826a0:	2b00      	cmp	r3, #0
   826a2:	d102      	bne.n	826aa <button_events+0x12a>
        {
            nextEvent = EVENT_BUTTON_RIGHT_P;
   826a4:	230a      	movs	r3, #10
   826a6:	71fb      	strb	r3, [r7, #7]
   826a8:	e00b      	b.n	826c2 <button_events+0x142>
        }
        else if (pb_right_act != pb_right_prev && pb_right_act == 1)
   826aa:	4b33      	ldr	r3, [pc, #204]	; (82778 <button_events+0x1f8>)
   826ac:	781a      	ldrb	r2, [r3, #0]
   826ae:	4b38      	ldr	r3, [pc, #224]	; (82790 <button_events+0x210>)
   826b0:	781b      	ldrb	r3, [r3, #0]
   826b2:	429a      	cmp	r2, r3
   826b4:	d005      	beq.n	826c2 <button_events+0x142>
   826b6:	4b30      	ldr	r3, [pc, #192]	; (82778 <button_events+0x1f8>)
   826b8:	781b      	ldrb	r3, [r3, #0]
   826ba:	2b01      	cmp	r3, #1
   826bc:	d101      	bne.n	826c2 <button_events+0x142>
        {
            nextEvent = EVENT_BUTTON_RIGHT_R;
   826be:	230c      	movs	r3, #12
   826c0:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_right_act == pb_right_prev && pb_right_act == 0)
        {
            nextEvent = EVENT_BUTTON_RIGHT_H;
        }*/
        
        if (pb_down_act != pb_down_prev && pb_down_act == 0)
   826c2:	4b2e      	ldr	r3, [pc, #184]	; (8277c <button_events+0x1fc>)
   826c4:	781a      	ldrb	r2, [r3, #0]
   826c6:	4b33      	ldr	r3, [pc, #204]	; (82794 <button_events+0x214>)
   826c8:	781b      	ldrb	r3, [r3, #0]
   826ca:	429a      	cmp	r2, r3
   826cc:	d006      	beq.n	826dc <button_events+0x15c>
   826ce:	4b2b      	ldr	r3, [pc, #172]	; (8277c <button_events+0x1fc>)
   826d0:	781b      	ldrb	r3, [r3, #0]
   826d2:	2b00      	cmp	r3, #0
   826d4:	d102      	bne.n	826dc <button_events+0x15c>
        {
            nextEvent = EVENT_BUTTON_DOWN_P;
   826d6:	230d      	movs	r3, #13
   826d8:	71fb      	strb	r3, [r7, #7]
   826da:	e00b      	b.n	826f4 <button_events+0x174>
        }
        else if (pb_down_act != pb_down_prev && pb_down_act == 1)
   826dc:	4b27      	ldr	r3, [pc, #156]	; (8277c <button_events+0x1fc>)
   826de:	781a      	ldrb	r2, [r3, #0]
   826e0:	4b2c      	ldr	r3, [pc, #176]	; (82794 <button_events+0x214>)
   826e2:	781b      	ldrb	r3, [r3, #0]
   826e4:	429a      	cmp	r2, r3
   826e6:	d005      	beq.n	826f4 <button_events+0x174>
   826e8:	4b24      	ldr	r3, [pc, #144]	; (8277c <button_events+0x1fc>)
   826ea:	781b      	ldrb	r3, [r3, #0]
   826ec:	2b01      	cmp	r3, #1
   826ee:	d101      	bne.n	826f4 <button_events+0x174>
        {
            nextEvent = EVENT_BUTTON_DOWN_R;
   826f0:	230f      	movs	r3, #15
   826f2:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_down_act == pb_down_prev && pb_down_act == 0)
        {
            nextEvent = EVENT_BUTTON_DOWN_H;
        }*/
        
        if (pb_return_act != pb_return_prev && pb_return_act == 0)
   826f4:	4b22      	ldr	r3, [pc, #136]	; (82780 <button_events+0x200>)
   826f6:	781a      	ldrb	r2, [r3, #0]
   826f8:	4b27      	ldr	r3, [pc, #156]	; (82798 <button_events+0x218>)
   826fa:	781b      	ldrb	r3, [r3, #0]
   826fc:	429a      	cmp	r2, r3
   826fe:	d006      	beq.n	8270e <button_events+0x18e>
   82700:	4b1f      	ldr	r3, [pc, #124]	; (82780 <button_events+0x200>)
   82702:	781b      	ldrb	r3, [r3, #0]
   82704:	2b00      	cmp	r3, #0
   82706:	d102      	bne.n	8270e <button_events+0x18e>
        {
            nextEvent = EVENT_BUTTON_RETURN_P;
   82708:	2310      	movs	r3, #16
   8270a:	71fb      	strb	r3, [r7, #7]
   8270c:	e00b      	b.n	82726 <button_events+0x1a6>
        }
        else if (pb_return_act != pb_return_prev && pb_return_act == 1)
   8270e:	4b1c      	ldr	r3, [pc, #112]	; (82780 <button_events+0x200>)
   82710:	781a      	ldrb	r2, [r3, #0]
   82712:	4b21      	ldr	r3, [pc, #132]	; (82798 <button_events+0x218>)
   82714:	781b      	ldrb	r3, [r3, #0]
   82716:	429a      	cmp	r2, r3
   82718:	d005      	beq.n	82726 <button_events+0x1a6>
   8271a:	4b19      	ldr	r3, [pc, #100]	; (82780 <button_events+0x200>)
   8271c:	781b      	ldrb	r3, [r3, #0]
   8271e:	2b01      	cmp	r3, #1
   82720:	d101      	bne.n	82726 <button_events+0x1a6>
        {
            nextEvent = EVENT_BUTTON_RETURN_R;
   82722:	2312      	movs	r3, #18
   82724:	71fb      	strb	r3, [r7, #7]
        /*else if (pb_return_act == pb_up_prev && pb_return_act == 0)
        {
            nextEvent = EVENT_BUTTON_RETURN_H;
        }*/
        
        pb_up_prev = pb_up_act;
   82726:	4b11      	ldr	r3, [pc, #68]	; (8276c <button_events+0x1ec>)
   82728:	781a      	ldrb	r2, [r3, #0]
   8272a:	4b16      	ldr	r3, [pc, #88]	; (82784 <button_events+0x204>)
   8272c:	701a      	strb	r2, [r3, #0]
        pb_left_prev = pb_left_act;
   8272e:	4b10      	ldr	r3, [pc, #64]	; (82770 <button_events+0x1f0>)
   82730:	781a      	ldrb	r2, [r3, #0]
   82732:	4b15      	ldr	r3, [pc, #84]	; (82788 <button_events+0x208>)
   82734:	701a      	strb	r2, [r3, #0]
        pb_mid_prev = pb_mid_act;
   82736:	4b0f      	ldr	r3, [pc, #60]	; (82774 <button_events+0x1f4>)
   82738:	781a      	ldrb	r2, [r3, #0]
   8273a:	4b14      	ldr	r3, [pc, #80]	; (8278c <button_events+0x20c>)
   8273c:	701a      	strb	r2, [r3, #0]
        pb_right_prev = pb_right_act;
   8273e:	4b0e      	ldr	r3, [pc, #56]	; (82778 <button_events+0x1f8>)
   82740:	781a      	ldrb	r2, [r3, #0]
   82742:	4b13      	ldr	r3, [pc, #76]	; (82790 <button_events+0x210>)
   82744:	701a      	strb	r2, [r3, #0]
        pb_down_prev = pb_down_act;
   82746:	4b0d      	ldr	r3, [pc, #52]	; (8277c <button_events+0x1fc>)
   82748:	781a      	ldrb	r2, [r3, #0]
   8274a:	4b12      	ldr	r3, [pc, #72]	; (82794 <button_events+0x214>)
   8274c:	701a      	strb	r2, [r3, #0]
        pb_return_prev = pb_return_act;
   8274e:	4b0c      	ldr	r3, [pc, #48]	; (82780 <button_events+0x200>)
   82750:	781a      	ldrb	r2, [r3, #0]
   82752:	4b11      	ldr	r3, [pc, #68]	; (82798 <button_events+0x218>)
   82754:	701a      	strb	r2, [r3, #0]
    }

    return nextEvent;
   82756:	79fb      	ldrb	r3, [r7, #7]
}
   82758:	4618      	mov	r0, r3
   8275a:	3708      	adds	r7, #8
   8275c:	46bd      	mov	sp, r7
   8275e:	bd80      	pop	{r7, pc}
   82760:	00082f51 	.word	0x00082f51
   82764:	20070e20 	.word	0x20070e20
   82768:	00081ba3 	.word	0x00081ba3
   8276c:	20070e49 	.word	0x20070e49
   82770:	20070e30 	.word	0x20070e30
   82774:	20070e48 	.word	0x20070e48
   82778:	20070e4a 	.word	0x20070e4a
   8277c:	20070e2c 	.word	0x20070e2c
   82780:	20070e28 	.word	0x20070e28
   82784:	20070e2d 	.word	0x20070e2d
   82788:	20070e2b 	.word	0x20070e2b
   8278c:	20070e29 	.word	0x20070e29
   82790:	20070e2e 	.word	0x20070e2e
   82794:	20070e2a 	.word	0x20070e2a
   82798:	20070e2f 	.word	0x20070e2f

0008279c <NVIC_EnableIRQ>:
{
   8279c:	b480      	push	{r7}
   8279e:	b083      	sub	sp, #12
   827a0:	af00      	add	r7, sp, #0
   827a2:	4603      	mov	r3, r0
   827a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   827a6:	4908      	ldr	r1, [pc, #32]	; (827c8 <NVIC_EnableIRQ+0x2c>)
   827a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827ac:	095b      	lsrs	r3, r3, #5
   827ae:	79fa      	ldrb	r2, [r7, #7]
   827b0:	f002 021f 	and.w	r2, r2, #31
   827b4:	2001      	movs	r0, #1
   827b6:	fa00 f202 	lsl.w	r2, r0, r2
   827ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   827be:	bf00      	nop
   827c0:	370c      	adds	r7, #12
   827c2:	46bd      	mov	sp, r7
   827c4:	bc80      	pop	{r7}
   827c6:	4770      	bx	lr
   827c8:	e000e100 	.word	0xe000e100

000827cc <NVIC_DisableIRQ>:
{
   827cc:	b480      	push	{r7}
   827ce:	b083      	sub	sp, #12
   827d0:	af00      	add	r7, sp, #0
   827d2:	4603      	mov	r3, r0
   827d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   827d6:	4909      	ldr	r1, [pc, #36]	; (827fc <NVIC_DisableIRQ+0x30>)
   827d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827dc:	095b      	lsrs	r3, r3, #5
   827de:	79fa      	ldrb	r2, [r7, #7]
   827e0:	f002 021f 	and.w	r2, r2, #31
   827e4:	2001      	movs	r0, #1
   827e6:	fa00 f202 	lsl.w	r2, r0, r2
   827ea:	3320      	adds	r3, #32
   827ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   827f0:	bf00      	nop
   827f2:	370c      	adds	r7, #12
   827f4:	46bd      	mov	sp, r7
   827f6:	bc80      	pop	{r7}
   827f8:	4770      	bx	lr
   827fa:	bf00      	nop
   827fc:	e000e100 	.word	0xe000e100

00082800 <NVIC_ClearPendingIRQ>:
{
   82800:	b480      	push	{r7}
   82802:	b083      	sub	sp, #12
   82804:	af00      	add	r7, sp, #0
   82806:	4603      	mov	r3, r0
   82808:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8280a:	4909      	ldr	r1, [pc, #36]	; (82830 <NVIC_ClearPendingIRQ+0x30>)
   8280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82810:	095b      	lsrs	r3, r3, #5
   82812:	79fa      	ldrb	r2, [r7, #7]
   82814:	f002 021f 	and.w	r2, r2, #31
   82818:	2001      	movs	r0, #1
   8281a:	fa00 f202 	lsl.w	r2, r0, r2
   8281e:	3360      	adds	r3, #96	; 0x60
   82820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82824:	bf00      	nop
   82826:	370c      	adds	r7, #12
   82828:	46bd      	mov	sp, r7
   8282a:	bc80      	pop	{r7}
   8282c:	4770      	bx	lr
   8282e:	bf00      	nop
   82830:	e000e100 	.word	0xe000e100

00082834 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   82834:	b480      	push	{r7}
   82836:	b083      	sub	sp, #12
   82838:	af00      	add	r7, sp, #0
   8283a:	4603      	mov	r3, r0
   8283c:	6039      	str	r1, [r7, #0]
   8283e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82840:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82844:	2b00      	cmp	r3, #0
   82846:	da0b      	bge.n	82860 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82848:	490d      	ldr	r1, [pc, #52]	; (82880 <NVIC_SetPriority+0x4c>)
   8284a:	79fb      	ldrb	r3, [r7, #7]
   8284c:	f003 030f 	and.w	r3, r3, #15
   82850:	3b04      	subs	r3, #4
   82852:	683a      	ldr	r2, [r7, #0]
   82854:	b2d2      	uxtb	r2, r2
   82856:	0112      	lsls	r2, r2, #4
   82858:	b2d2      	uxtb	r2, r2
   8285a:	440b      	add	r3, r1
   8285c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8285e:	e009      	b.n	82874 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82860:	4908      	ldr	r1, [pc, #32]	; (82884 <NVIC_SetPriority+0x50>)
   82862:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82866:	683a      	ldr	r2, [r7, #0]
   82868:	b2d2      	uxtb	r2, r2
   8286a:	0112      	lsls	r2, r2, #4
   8286c:	b2d2      	uxtb	r2, r2
   8286e:	440b      	add	r3, r1
   82870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82874:	bf00      	nop
   82876:	370c      	adds	r7, #12
   82878:	46bd      	mov	sp, r7
   8287a:	bc80      	pop	{r7}
   8287c:	4770      	bx	lr
   8287e:	bf00      	nop
   82880:	e000ed00 	.word	0xe000ed00
   82884:	e000e100 	.word	0xe000e100

00082888 <sysclk_enable_peripheral_clock>:
{
   82888:	b580      	push	{r7, lr}
   8288a:	b082      	sub	sp, #8
   8288c:	af00      	add	r7, sp, #0
   8288e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82890:	6878      	ldr	r0, [r7, #4]
   82892:	4b03      	ldr	r3, [pc, #12]	; (828a0 <sysclk_enable_peripheral_clock+0x18>)
   82894:	4798      	blx	r3
}
   82896:	bf00      	nop
   82898:	3708      	adds	r7, #8
   8289a:	46bd      	mov	sp, r7
   8289c:	bd80      	pop	{r7, pc}
   8289e:	bf00      	nop
   828a0:	00083911 	.word	0x00083911

000828a4 <ioport_set_pin_level>:
{
   828a4:	b480      	push	{r7}
   828a6:	b08b      	sub	sp, #44	; 0x2c
   828a8:	af00      	add	r7, sp, #0
   828aa:	6078      	str	r0, [r7, #4]
   828ac:	460b      	mov	r3, r1
   828ae:	70fb      	strb	r3, [r7, #3]
   828b0:	687b      	ldr	r3, [r7, #4]
   828b2:	627b      	str	r3, [r7, #36]	; 0x24
   828b4:	78fb      	ldrb	r3, [r7, #3]
   828b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   828ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   828bc:	61fb      	str	r3, [r7, #28]
   828be:	69fb      	ldr	r3, [r7, #28]
   828c0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   828c2:	69bb      	ldr	r3, [r7, #24]
   828c4:	095b      	lsrs	r3, r3, #5
   828c6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   828c8:	697b      	ldr	r3, [r7, #20]
   828ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   828ce:	f203 7307 	addw	r3, r3, #1799	; 0x707
   828d2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   828d4:	613b      	str	r3, [r7, #16]
	if (level) {
   828d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   828da:	2b00      	cmp	r3, #0
   828dc:	d009      	beq.n	828f2 <ioport_set_pin_level+0x4e>
   828de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   828e0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   828e2:	68fb      	ldr	r3, [r7, #12]
   828e4:	f003 031f 	and.w	r3, r3, #31
   828e8:	2201      	movs	r2, #1
   828ea:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   828ec:	693b      	ldr	r3, [r7, #16]
   828ee:	631a      	str	r2, [r3, #48]	; 0x30
}
   828f0:	e008      	b.n	82904 <ioport_set_pin_level+0x60>
   828f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   828f4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   828f6:	68bb      	ldr	r3, [r7, #8]
   828f8:	f003 031f 	and.w	r3, r3, #31
   828fc:	2201      	movs	r2, #1
   828fe:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82900:	693b      	ldr	r3, [r7, #16]
   82902:	635a      	str	r2, [r3, #52]	; 0x34
   82904:	bf00      	nop
   82906:	372c      	adds	r7, #44	; 0x2c
   82908:	46bd      	mov	sp, r7
   8290a:	bc80      	pop	{r7}
   8290c:	4770      	bx	lr

0008290e <ioport_get_port_level>:
 * \return Logical levels of the specified pins from the read port, returned as
 * a mask.
 */
static inline ioport_port_mask_t ioport_get_port_level(ioport_pin_t port,
		ioport_port_mask_t mask)
{
   8290e:	b480      	push	{r7}
   82910:	b087      	sub	sp, #28
   82912:	af00      	add	r7, sp, #0
   82914:	6078      	str	r0, [r7, #4]
   82916:	6039      	str	r1, [r7, #0]
   82918:	687b      	ldr	r3, [r7, #4]
   8291a:	617b      	str	r3, [r7, #20]
   8291c:	683b      	ldr	r3, [r7, #0]
   8291e:	613b      	str	r3, [r7, #16]
   82920:	697b      	ldr	r3, [r7, #20]
   82922:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82924:	68fb      	ldr	r3, [r7, #12]
   82926:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8292a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8292e:	025b      	lsls	r3, r3, #9
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
   82930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82932:	693b      	ldr	r3, [r7, #16]
   82934:	4013      	ands	r3, r2
	return arch_ioport_get_port_level(port, mask);
   82936:	bf00      	nop
}
   82938:	4618      	mov	r0, r3
   8293a:	371c      	adds	r7, #28
   8293c:	46bd      	mov	sp, r7
   8293e:	bc80      	pop	{r7}
   82940:	4770      	bx	lr
	...

00082944 <motor_init>:
float CosinMA1 = -0.866025404f;
float CosinMA2 = 0.866025404f;
float CosinMA3 = 0.0f;

void motor_init(void)
{
   82944:	b5b0      	push	{r4, r5, r7, lr}
   82946:	af00      	add	r7, sp, #0
	/* Initialize PWM channel for MLeft */
  /* Period is left-aligned */
  g_pwm_channel_MLeft.alignment = PWM_ALIGN_LEFT;
   82948:	4b5e      	ldr	r3, [pc, #376]	; (82ac4 <motor_init+0x180>)
   8294a:	2200      	movs	r2, #0
   8294c:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MLeft.polarity = PWM_LOW;
   8294e:	4b5d      	ldr	r3, [pc, #372]	; (82ac4 <motor_init+0x180>)
   82950:	2200      	movs	r2, #0
   82952:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MLeft.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82954:	4b5b      	ldr	r3, [pc, #364]	; (82ac4 <motor_init+0x180>)
   82956:	220b      	movs	r2, #11
   82958:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MLeft.ul_period = PERIOD_VALUE;
   8295a:	4b5a      	ldr	r3, [pc, #360]	; (82ac4 <motor_init+0x180>)
   8295c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82960:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MLeft.ul_duty = INIT_DUTY_VALUE;
   82962:	4b58      	ldr	r3, [pc, #352]	; (82ac4 <motor_init+0x180>)
   82964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82968:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MLeft.channel = MOTOR_LEFT;
   8296a:	4b56      	ldr	r3, [pc, #344]	; (82ac4 <motor_init+0x180>)
   8296c:	2200      	movs	r2, #0
   8296e:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MLeft);
   82970:	4954      	ldr	r1, [pc, #336]	; (82ac4 <motor_init+0x180>)
   82972:	4855      	ldr	r0, [pc, #340]	; (82ac8 <motor_init+0x184>)
   82974:	4b55      	ldr	r3, [pc, #340]	; (82acc <motor_init+0x188>)
   82976:	4798      	blx	r3


  /* Initialize PWM channel for MRight */
  /* Period is left-aligned */
  g_pwm_channel_MRight.alignment = PWM_ALIGN_LEFT;
   82978:	4b55      	ldr	r3, [pc, #340]	; (82ad0 <motor_init+0x18c>)
   8297a:	2200      	movs	r2, #0
   8297c:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MRight.polarity = PWM_LOW;
   8297e:	4b54      	ldr	r3, [pc, #336]	; (82ad0 <motor_init+0x18c>)
   82980:	2200      	movs	r2, #0
   82982:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MRight.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82984:	4b52      	ldr	r3, [pc, #328]	; (82ad0 <motor_init+0x18c>)
   82986:	220b      	movs	r2, #11
   82988:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MRight.ul_period = PERIOD_VALUE;
   8298a:	4b51      	ldr	r3, [pc, #324]	; (82ad0 <motor_init+0x18c>)
   8298c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82990:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MRight.ul_duty = INIT_DUTY_VALUE;
   82992:	4b4f      	ldr	r3, [pc, #316]	; (82ad0 <motor_init+0x18c>)
   82994:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   82998:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MRight.channel = MOTOR_RIGHT;
   8299a:	4b4d      	ldr	r3, [pc, #308]	; (82ad0 <motor_init+0x18c>)
   8299c:	2201      	movs	r2, #1
   8299e:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MRight);
   829a0:	494b      	ldr	r1, [pc, #300]	; (82ad0 <motor_init+0x18c>)
   829a2:	4849      	ldr	r0, [pc, #292]	; (82ac8 <motor_init+0x184>)
   829a4:	4b49      	ldr	r3, [pc, #292]	; (82acc <motor_init+0x188>)
   829a6:	4798      	blx	r3


  /* Initialize PWM channel for MBack */
  /* Period is left-aligned */
  g_pwm_channel_MRear.alignment = PWM_ALIGN_LEFT;
   829a8:	4b4a      	ldr	r3, [pc, #296]	; (82ad4 <motor_init+0x190>)
   829aa:	2200      	movs	r2, #0
   829ac:	811a      	strh	r2, [r3, #8]
  /* Output waveform starts at a low level */
  g_pwm_channel_MRear.polarity = PWM_LOW;
   829ae:	4b49      	ldr	r3, [pc, #292]	; (82ad4 <motor_init+0x190>)
   829b0:	2200      	movs	r2, #0
   829b2:	729a      	strb	r2, [r3, #10]
  /* Use PWM clock A as source clock */
  g_pwm_channel_MRear.ul_prescaler = PWM_CMR_CPRE_CLKA;
   829b4:	4b47      	ldr	r3, [pc, #284]	; (82ad4 <motor_init+0x190>)
   829b6:	220b      	movs	r2, #11
   829b8:	605a      	str	r2, [r3, #4]
  /* Period value of output waveform */
  g_pwm_channel_MRear.ul_period = PERIOD_VALUE;
   829ba:	4b46      	ldr	r3, [pc, #280]	; (82ad4 <motor_init+0x190>)
   829bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   829c0:	611a      	str	r2, [r3, #16]
  /* Duty cycle value of output waveform */
  g_pwm_channel_MRear.ul_duty = INIT_DUTY_VALUE;
   829c2:	4b44      	ldr	r3, [pc, #272]	; (82ad4 <motor_init+0x190>)
   829c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   829c8:	60da      	str	r2, [r3, #12]
  g_pwm_channel_MRear.channel = MOTOR_REAR;
   829ca:	4b42      	ldr	r3, [pc, #264]	; (82ad4 <motor_init+0x190>)
   829cc:	2202      	movs	r2, #2
   829ce:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_MRear);
   829d0:	4940      	ldr	r1, [pc, #256]	; (82ad4 <motor_init+0x190>)
   829d2:	483d      	ldr	r0, [pc, #244]	; (82ac8 <motor_init+0x184>)
   829d4:	4b3d      	ldr	r3, [pc, #244]	; (82acc <motor_init+0x188>)
   829d6:	4798      	blx	r3

  pwm_channel_disable(PWM, MOTOR_LEFT);
   829d8:	2100      	movs	r1, #0
   829da:	483b      	ldr	r0, [pc, #236]	; (82ac8 <motor_init+0x184>)
   829dc:	4b3e      	ldr	r3, [pc, #248]	; (82ad8 <motor_init+0x194>)
   829de:	4798      	blx	r3
  pwm_channel_disable(PWM, MOTOR_RIGHT);
   829e0:	2101      	movs	r1, #1
   829e2:	4839      	ldr	r0, [pc, #228]	; (82ac8 <motor_init+0x184>)
   829e4:	4b3c      	ldr	r3, [pc, #240]	; (82ad8 <motor_init+0x194>)
   829e6:	4798      	blx	r3
  pwm_channel_disable(PWM, MOTOR_REAR);
   829e8:	2102      	movs	r1, #2
   829ea:	4837      	ldr	r0, [pc, #220]	; (82ac8 <motor_init+0x184>)
   829ec:	4b3a      	ldr	r3, [pc, #232]	; (82ad8 <motor_init+0x194>)
   829ee:	4798      	blx	r3

  g_pwm_channel_ENC.alignment = PWM_ALIGN_LEFT;
   829f0:	4b3a      	ldr	r3, [pc, #232]	; (82adc <motor_init+0x198>)
   829f2:	2200      	movs	r2, #0
   829f4:	811a      	strh	r2, [r3, #8]
  g_pwm_channel_ENC.polarity = PWM_LOW;
   829f6:	4b39      	ldr	r3, [pc, #228]	; (82adc <motor_init+0x198>)
   829f8:	2200      	movs	r2, #0
   829fa:	729a      	strb	r2, [r3, #10]
  g_pwm_channel_ENC.ul_prescaler = PWM_CMR_CPRE_CLKA;
   829fc:	4b37      	ldr	r3, [pc, #220]	; (82adc <motor_init+0x198>)
   829fe:	220b      	movs	r2, #11
   82a00:	605a      	str	r2, [r3, #4]
  g_pwm_channel_ENC.ul_period = 330;
   82a02:	4b36      	ldr	r3, [pc, #216]	; (82adc <motor_init+0x198>)
   82a04:	f44f 72a5 	mov.w	r2, #330	; 0x14a
   82a08:	611a      	str	r2, [r3, #16]
  g_pwm_channel_ENC.ul_duty = 165;
   82a0a:	4b34      	ldr	r3, [pc, #208]	; (82adc <motor_init+0x198>)
   82a0c:	22a5      	movs	r2, #165	; 0xa5
   82a0e:	60da      	str	r2, [r3, #12]
  g_pwm_channel_ENC.channel = ENC_CLK;
   82a10:	4b32      	ldr	r3, [pc, #200]	; (82adc <motor_init+0x198>)
   82a12:	2255      	movs	r2, #85	; 0x55
   82a14:	601a      	str	r2, [r3, #0]
  pwm_channel_init(PWM, &g_pwm_channel_ENC);
   82a16:	4931      	ldr	r1, [pc, #196]	; (82adc <motor_init+0x198>)
   82a18:	482b      	ldr	r0, [pc, #172]	; (82ac8 <motor_init+0x184>)
   82a1a:	4b2c      	ldr	r3, [pc, #176]	; (82acc <motor_init+0x188>)
   82a1c:	4798      	blx	r3
  pwm_channel_enable(PWM, ENC_CLK);
   82a1e:	2155      	movs	r1, #85	; 0x55
   82a20:	4829      	ldr	r0, [pc, #164]	; (82ac8 <motor_init+0x184>)
   82a22:	4b2f      	ldr	r3, [pc, #188]	; (82ae0 <motor_init+0x19c>)
   82a24:	4798      	blx	r3

  sysclk_enable_peripheral_clock(ID_TC1);
   82a26:	201c      	movs	r0, #28
   82a28:	4b2e      	ldr	r3, [pc, #184]	; (82ae4 <motor_init+0x1a0>)
   82a2a:	4798      	blx	r3
  tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG);
   82a2c:	f244 0203 	movw	r2, #16387	; 0x4003
   82a30:	2101      	movs	r1, #1
   82a32:	482d      	ldr	r0, [pc, #180]	; (82ae8 <motor_init+0x1a4>)
   82a34:	4b2d      	ldr	r3, [pc, #180]	; (82aec <motor_init+0x1a8>)
   82a36:	4798      	blx	r3
  tc_write_rc(TC0, 1, 5249);  //MCLK / 128 * 0,008
   82a38:	f241 4281 	movw	r2, #5249	; 0x1481
   82a3c:	2101      	movs	r1, #1
   82a3e:	482a      	ldr	r0, [pc, #168]	; (82ae8 <motor_init+0x1a4>)
   82a40:	4b2b      	ldr	r3, [pc, #172]	; (82af0 <motor_init+0x1ac>)
   82a42:	4798      	blx	r3
  NVIC_DisableIRQ(TC1_IRQn);
   82a44:	201c      	movs	r0, #28
   82a46:	4b2b      	ldr	r3, [pc, #172]	; (82af4 <motor_init+0x1b0>)
   82a48:	4798      	blx	r3
  NVIC_ClearPendingIRQ(TC1_IRQn);
   82a4a:	201c      	movs	r0, #28
   82a4c:	4b2a      	ldr	r3, [pc, #168]	; (82af8 <motor_init+0x1b4>)
   82a4e:	4798      	blx	r3
  NVIC_SetPriority(TC1_IRQn, 0);
   82a50:	2100      	movs	r1, #0
   82a52:	201c      	movs	r0, #28
   82a54:	4b29      	ldr	r3, [pc, #164]	; (82afc <motor_init+0x1b8>)
   82a56:	4798      	blx	r3
  NVIC_EnableIRQ(TC1_IRQn);
   82a58:	201c      	movs	r0, #28
   82a5a:	4b29      	ldr	r3, [pc, #164]	; (82b00 <motor_init+0x1bc>)
   82a5c:	4798      	blx	r3
  tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82a5e:	2210      	movs	r2, #16
   82a60:	2101      	movs	r1, #1
   82a62:	4821      	ldr	r0, [pc, #132]	; (82ae8 <motor_init+0x1a4>)
   82a64:	4b27      	ldr	r3, [pc, #156]	; (82b04 <motor_init+0x1c0>)
   82a66:	4798      	blx	r3
  tc_start(TC0, 1);
   82a68:	2101      	movs	r1, #1
   82a6a:	481f      	ldr	r0, [pc, #124]	; (82ae8 <motor_init+0x1a4>)
   82a6c:	4b26      	ldr	r3, [pc, #152]	; (82b08 <motor_init+0x1c4>)
   82a6e:	4798      	blx	r3

  mleft_pid_reg.kp = 15.0f;
   82a70:	4b26      	ldr	r3, [pc, #152]	; (82b0c <motor_init+0x1c8>)
   82a72:	4a27      	ldr	r2, [pc, #156]	; (82b10 <motor_init+0x1cc>)
   82a74:	601a      	str	r2, [r3, #0]
  mleft_pid_reg.ki = 10.0f;
   82a76:	4b25      	ldr	r3, [pc, #148]	; (82b0c <motor_init+0x1c8>)
   82a78:	4a26      	ldr	r2, [pc, #152]	; (82b14 <motor_init+0x1d0>)
   82a7a:	605a      	str	r2, [r3, #4]
  mleft_pid_reg.kc = 1.0f;
   82a7c:	4b23      	ldr	r3, [pc, #140]	; (82b0c <motor_init+0x1c8>)
   82a7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   82a82:	609a      	str	r2, [r3, #8]
  mleft_pid_reg.kd = 5.0f;
   82a84:	4b21      	ldr	r3, [pc, #132]	; (82b0c <motor_init+0x1c8>)
   82a86:	4a24      	ldr	r2, [pc, #144]	; (82b18 <motor_init+0x1d4>)
   82a88:	60da      	str	r2, [r3, #12]
  mleft_pid_reg.outMin = -500.0f;
   82a8a:	4b20      	ldr	r3, [pc, #128]	; (82b0c <motor_init+0x1c8>)
   82a8c:	4a23      	ldr	r2, [pc, #140]	; (82b1c <motor_init+0x1d8>)
   82a8e:	619a      	str	r2, [r3, #24]
  mleft_pid_reg.outMax = 500.0f;
   82a90:	4b1e      	ldr	r3, [pc, #120]	; (82b0c <motor_init+0x1c8>)
   82a92:	4a23      	ldr	r2, [pc, #140]	; (82b20 <motor_init+0x1dc>)
   82a94:	615a      	str	r2, [r3, #20]

  mright_pid_reg = mleft_pid_reg;
   82a96:	4a23      	ldr	r2, [pc, #140]	; (82b24 <motor_init+0x1e0>)
   82a98:	4b1c      	ldr	r3, [pc, #112]	; (82b0c <motor_init+0x1c8>)
   82a9a:	4614      	mov	r4, r2
   82a9c:	461d      	mov	r5, r3
   82a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82aa6:	682b      	ldr	r3, [r5, #0]
   82aa8:	6023      	str	r3, [r4, #0]
  mrear_pid_reg = mleft_pid_reg;
   82aaa:	4a1f      	ldr	r2, [pc, #124]	; (82b28 <motor_init+0x1e4>)
   82aac:	4b17      	ldr	r3, [pc, #92]	; (82b0c <motor_init+0x1c8>)
   82aae:	4614      	mov	r4, r2
   82ab0:	461d      	mov	r5, r3
   82ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82aba:	682b      	ldr	r3, [r5, #0]
   82abc:	6023      	str	r3, [r4, #0]
}
   82abe:	bf00      	nop
   82ac0:	bdb0      	pop	{r4, r5, r7, pc}
   82ac2:	bf00      	nop
   82ac4:	20070e64 	.word	0x20070e64
   82ac8:	40094000 	.word	0x40094000
   82acc:	00080369 	.word	0x00080369
   82ad0:	20070f34 	.word	0x20070f34
   82ad4:	20070edc 	.word	0x20070edc
   82ad8:	00080615 	.word	0x00080615
   82adc:	20070e8c 	.word	0x20070e8c
   82ae0:	000805f3 	.word	0x000805f3
   82ae4:	00082889 	.word	0x00082889
   82ae8:	40080000 	.word	0x40080000
   82aec:	00080637 	.word	0x00080637
   82af0:	0008068f 	.word	0x0008068f
   82af4:	000827cd 	.word	0x000827cd
   82af8:	00082801 	.word	0x00082801
   82afc:	00082835 	.word	0x00082835
   82b00:	0008279d 	.word	0x0008279d
   82b04:	000806b3 	.word	0x000806b3
   82b08:	0008066f 	.word	0x0008066f
   82b0c:	20070f5c 	.word	0x20070f5c
   82b10:	41700000 	.word	0x41700000
   82b14:	41200000 	.word	0x41200000
   82b18:	40a00000 	.word	0x40a00000
   82b1c:	c3fa0000 	.word	0xc3fa0000
   82b20:	43fa0000 	.word	0x43fa0000
   82b24:	20070eb4 	.word	0x20070eb4
   82b28:	20070f04 	.word	0x20070f04

00082b2c <enable_motor>:

void enable_motor(void)
{
   82b2c:	b580      	push	{r7, lr}
   82b2e:	af00      	add	r7, sp, #0
    pwm_channel_enable(PWM, MOTOR_LEFT);
   82b30:	2100      	movs	r1, #0
   82b32:	480d      	ldr	r0, [pc, #52]	; (82b68 <enable_motor+0x3c>)
   82b34:	4b0d      	ldr	r3, [pc, #52]	; (82b6c <enable_motor+0x40>)
   82b36:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
   82b38:	2101      	movs	r1, #1
   82b3a:	480b      	ldr	r0, [pc, #44]	; (82b68 <enable_motor+0x3c>)
   82b3c:	4b0b      	ldr	r3, [pc, #44]	; (82b6c <enable_motor+0x40>)
   82b3e:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_REAR);
   82b40:	2102      	movs	r1, #2
   82b42:	4809      	ldr	r0, [pc, #36]	; (82b68 <enable_motor+0x3c>)
   82b44:	4b09      	ldr	r3, [pc, #36]	; (82b6c <enable_motor+0x40>)
   82b46:	4798      	blx	r3

    ioport_set_pin_level(ENC_LOAD, 0);
   82b48:	2100      	movs	r1, #0
   82b4a:	2020      	movs	r0, #32
   82b4c:	4b08      	ldr	r3, [pc, #32]	; (82b70 <enable_motor+0x44>)
   82b4e:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82b50:	2101      	movs	r1, #1
   82b52:	2020      	movs	r0, #32
   82b54:	4b06      	ldr	r3, [pc, #24]	; (82b70 <enable_motor+0x44>)
   82b56:	4798      	blx	r3

    tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   82b58:	2210      	movs	r2, #16
   82b5a:	2101      	movs	r1, #1
   82b5c:	4805      	ldr	r0, [pc, #20]	; (82b74 <enable_motor+0x48>)
   82b5e:	4b06      	ldr	r3, [pc, #24]	; (82b78 <enable_motor+0x4c>)
   82b60:	4798      	blx	r3
}
   82b62:	bf00      	nop
   82b64:	bd80      	pop	{r7, pc}
   82b66:	bf00      	nop
   82b68:	40094000 	.word	0x40094000
   82b6c:	000805f3 	.word	0x000805f3
   82b70:	000828a5 	.word	0x000828a5
   82b74:	40080000 	.word	0x40080000
   82b78:	000806b3 	.word	0x000806b3

00082b7c <motor_speed>:
    pwm_channel_enable(PWM, ENC_CLK);
  }*/ 
}

void motor_speed(uint8_t motor, int16_t ispeed)
{
   82b7c:	b580      	push	{r7, lr}
   82b7e:	b084      	sub	sp, #16
   82b80:	af00      	add	r7, sp, #0
   82b82:	4603      	mov	r3, r0
   82b84:	460a      	mov	r2, r1
   82b86:	71fb      	strb	r3, [r7, #7]
   82b88:	4613      	mov	r3, r2
   82b8a:	80bb      	strh	r3, [r7, #4]
  if (ispeed > 500)
   82b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82b90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82b94:	dd02      	ble.n	82b9c <motor_speed+0x20>
  {
    ispeed = 500;
   82b96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   82b9a:	80bb      	strh	r3, [r7, #4]
  }

  if (ispeed < -500)
   82b9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   82ba0:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   82ba4:	da02      	bge.n	82bac <motor_speed+0x30>
  {
    ispeed = -500;
   82ba6:	f64f 630c 	movw	r3, #65036	; 0xfe0c
   82baa:	80bb      	strh	r3, [r7, #4]
  }

  uint16_t duty_cycle = (uint16_t)(ispeed + (int16_t)INIT_DUTY_VALUE);
   82bac:	88bb      	ldrh	r3, [r7, #4]
   82bae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   82bb2:	81fb      	strh	r3, [r7, #14]

  if (duty_cycle < 10)
   82bb4:	89fb      	ldrh	r3, [r7, #14]
   82bb6:	2b09      	cmp	r3, #9
   82bb8:	d801      	bhi.n	82bbe <motor_speed+0x42>
  {
    duty_cycle = 10;
   82bba:	230a      	movs	r3, #10
   82bbc:	81fb      	strh	r3, [r7, #14]
  }

  if (duty_cycle > 990)
   82bbe:	89fb      	ldrh	r3, [r7, #14]
   82bc0:	f240 32de 	movw	r2, #990	; 0x3de
   82bc4:	4293      	cmp	r3, r2
   82bc6:	d902      	bls.n	82bce <motor_speed+0x52>
  {
    duty_cycle = 990;
   82bc8:	f240 33de 	movw	r3, #990	; 0x3de
   82bcc:	81fb      	strh	r3, [r7, #14]
  }

  switch(motor)
   82bce:	79fb      	ldrb	r3, [r7, #7]
   82bd0:	2b01      	cmp	r3, #1
   82bd2:	d00b      	beq.n	82bec <motor_speed+0x70>
   82bd4:	2b02      	cmp	r3, #2
   82bd6:	d010      	beq.n	82bfa <motor_speed+0x7e>
   82bd8:	2b00      	cmp	r3, #0
   82bda:	d000      	beq.n	82bde <motor_speed+0x62>
      break;
    case MOTOR_REAR:
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
      break;
    default:
      break;
   82bdc:	e014      	b.n	82c08 <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MLeft, duty_cycle);
   82bde:	89fb      	ldrh	r3, [r7, #14]
   82be0:	461a      	mov	r2, r3
   82be2:	490b      	ldr	r1, [pc, #44]	; (82c10 <motor_speed+0x94>)
   82be4:	480b      	ldr	r0, [pc, #44]	; (82c14 <motor_speed+0x98>)
   82be6:	4b0c      	ldr	r3, [pc, #48]	; (82c18 <motor_speed+0x9c>)
   82be8:	4798      	blx	r3
      break;
   82bea:	e00d      	b.n	82c08 <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRight, duty_cycle);
   82bec:	89fb      	ldrh	r3, [r7, #14]
   82bee:	461a      	mov	r2, r3
   82bf0:	490a      	ldr	r1, [pc, #40]	; (82c1c <motor_speed+0xa0>)
   82bf2:	4808      	ldr	r0, [pc, #32]	; (82c14 <motor_speed+0x98>)
   82bf4:	4b08      	ldr	r3, [pc, #32]	; (82c18 <motor_speed+0x9c>)
   82bf6:	4798      	blx	r3
      break;
   82bf8:	e006      	b.n	82c08 <motor_speed+0x8c>
      pwm_channel_update_duty(PWM, &g_pwm_channel_MRear, duty_cycle);
   82bfa:	89fb      	ldrh	r3, [r7, #14]
   82bfc:	461a      	mov	r2, r3
   82bfe:	4908      	ldr	r1, [pc, #32]	; (82c20 <motor_speed+0xa4>)
   82c00:	4804      	ldr	r0, [pc, #16]	; (82c14 <motor_speed+0x98>)
   82c02:	4b05      	ldr	r3, [pc, #20]	; (82c18 <motor_speed+0x9c>)
   82c04:	4798      	blx	r3
      break;
   82c06:	bf00      	nop
  }
}
   82c08:	bf00      	nop
   82c0a:	3710      	adds	r7, #16
   82c0c:	46bd      	mov	sp, r7
   82c0e:	bd80      	pop	{r7, pc}
   82c10:	20070e64 	.word	0x20070e64
   82c14:	40094000 	.word	0x40094000
   82c18:	000805af 	.word	0x000805af
   82c1c:	20070f34 	.word	0x20070f34
   82c20:	20070edc 	.word	0x20070edc

00082c24 <TC1_Handler>:

void TC1_Handler(void)
{
   82c24:	b590      	push	{r4, r7, lr}
   82c26:	b085      	sub	sp, #20
   82c28:	af00      	add	r7, sp, #0
  uint32_t PIOC_value;
  int32_t eleft_counts;
  int32_t eright_counts;
  int32_t erear_counts;

  ioport_set_pin_level(LED_M3, 1);
   82c2a:	2101      	movs	r1, #1
   82c2c:	2069      	movs	r0, #105	; 0x69
   82c2e:	4b50      	ldr	r3, [pc, #320]	; (82d70 <TC1_Handler+0x14c>)
   82c30:	4798      	blx	r3

  if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   82c32:	2101      	movs	r1, #1
   82c34:	484f      	ldr	r0, [pc, #316]	; (82d74 <TC1_Handler+0x150>)
   82c36:	4b50      	ldr	r3, [pc, #320]	; (82d78 <TC1_Handler+0x154>)
   82c38:	4798      	blx	r3
   82c3a:	4603      	mov	r3, r0
   82c3c:	f003 0310 	and.w	r3, r3, #16
   82c40:	2b10      	cmp	r3, #16
   82c42:	f040 808c 	bne.w	82d5e <TC1_Handler+0x13a>
  {
    pwm_channel_disable(PWM, ENC_CLK);
   82c46:	2155      	movs	r1, #85	; 0x55
   82c48:	484c      	ldr	r0, [pc, #304]	; (82d7c <TC1_Handler+0x158>)
   82c4a:	4b4d      	ldr	r3, [pc, #308]	; (82d80 <TC1_Handler+0x15c>)
   82c4c:	4798      	blx	r3
    PIOC_value = ioport_get_port_level(IOPORT_PIOC, 0xFFFFFFFF);
   82c4e:	f04f 31ff 	mov.w	r1, #4294967295
   82c52:	2002      	movs	r0, #2
   82c54:	4b4b      	ldr	r3, [pc, #300]	; (82d84 <TC1_Handler+0x160>)
   82c56:	4798      	blx	r3
   82c58:	60f8      	str	r0, [r7, #12]
    ioport_set_pin_level(ENC_LOAD, 0);
   82c5a:	2100      	movs	r1, #0
   82c5c:	2020      	movs	r0, #32
   82c5e:	4b44      	ldr	r3, [pc, #272]	; (82d70 <TC1_Handler+0x14c>)
   82c60:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   82c62:	2101      	movs	r1, #1
   82c64:	2020      	movs	r0, #32
   82c66:	4b42      	ldr	r3, [pc, #264]	; (82d70 <TC1_Handler+0x14c>)
   82c68:	4798      	blx	r3
    pwm_channel_enable(PWM, ENC_CLK);
   82c6a:	2155      	movs	r1, #85	; 0x55
   82c6c:	4843      	ldr	r0, [pc, #268]	; (82d7c <TC1_Handler+0x158>)
   82c6e:	4b46      	ldr	r3, [pc, #280]	; (82d88 <TC1_Handler+0x164>)
   82c70:	4798      	blx	r3

    eleft_counts = (PIOC_value & 0x7F000000) >> 24;
   82c72:	68fb      	ldr	r3, [r7, #12]
   82c74:	0e1b      	lsrs	r3, r3, #24
   82c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82c7a:	60bb      	str	r3, [r7, #8]
    eleft_counts = (eleft_counts & 0x00000040) ? eleft_counts - 128 : eleft_counts;
   82c7c:	68bb      	ldr	r3, [r7, #8]
   82c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82c82:	2b00      	cmp	r3, #0
   82c84:	d002      	beq.n	82c8c <TC1_Handler+0x68>
   82c86:	68bb      	ldr	r3, [r7, #8]
   82c88:	3b80      	subs	r3, #128	; 0x80
   82c8a:	e000      	b.n	82c8e <TC1_Handler+0x6a>
   82c8c:	68bb      	ldr	r3, [r7, #8]
   82c8e:	60bb      	str	r3, [r7, #8]
    eright_counts = ((PIOC_value & 0x00C00000) >> 17) | ((PIOC_value & 0x001F0000) >> 16);
   82c90:	68fb      	ldr	r3, [r7, #12]
   82c92:	0c5b      	lsrs	r3, r3, #17
   82c94:	f003 0260 	and.w	r2, r3, #96	; 0x60
   82c98:	68fb      	ldr	r3, [r7, #12]
   82c9a:	0c1b      	lsrs	r3, r3, #16
   82c9c:	f003 031f 	and.w	r3, r3, #31
   82ca0:	4313      	orrs	r3, r2
   82ca2:	607b      	str	r3, [r7, #4]
    eright_counts = (eright_counts & 0x00000040) ? eright_counts - 128 : eright_counts;
   82ca4:	687b      	ldr	r3, [r7, #4]
   82ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82caa:	2b00      	cmp	r3, #0
   82cac:	d002      	beq.n	82cb4 <TC1_Handler+0x90>
   82cae:	687b      	ldr	r3, [r7, #4]
   82cb0:	3b80      	subs	r3, #128	; 0x80
   82cb2:	e000      	b.n	82cb6 <TC1_Handler+0x92>
   82cb4:	687b      	ldr	r3, [r7, #4]
   82cb6:	607b      	str	r3, [r7, #4]
    erear_counts = ((PIOC_value & 0x0000FC00) >> 9) | ((PIOC_value & 0x00000002) >> 1);
   82cb8:	68fb      	ldr	r3, [r7, #12]
   82cba:	0a5b      	lsrs	r3, r3, #9
   82cbc:	f003 027e 	and.w	r2, r3, #126	; 0x7e
   82cc0:	68fb      	ldr	r3, [r7, #12]
   82cc2:	085b      	lsrs	r3, r3, #1
   82cc4:	f003 0301 	and.w	r3, r3, #1
   82cc8:	4313      	orrs	r3, r2
   82cca:	603b      	str	r3, [r7, #0]
    erear_counts = (erear_counts & 0x00000040) ? erear_counts - 128 : erear_counts;
   82ccc:	683b      	ldr	r3, [r7, #0]
   82cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82cd2:	2b00      	cmp	r3, #0
   82cd4:	d002      	beq.n	82cdc <TC1_Handler+0xb8>
   82cd6:	683b      	ldr	r3, [r7, #0]
   82cd8:	3b80      	subs	r3, #128	; 0x80
   82cda:	e000      	b.n	82cde <TC1_Handler+0xba>
   82cdc:	683b      	ldr	r3, [r7, #0]
   82cde:	603b      	str	r3, [r7, #0]

    motor_speed(MOTOR_LEFT, pidReg(&mleft_pid_reg, speed_mleft, (float)eleft_counts));
   82ce0:	4b2a      	ldr	r3, [pc, #168]	; (82d8c <TC1_Handler+0x168>)
   82ce2:	681c      	ldr	r4, [r3, #0]
   82ce4:	4b2a      	ldr	r3, [pc, #168]	; (82d90 <TC1_Handler+0x16c>)
   82ce6:	68b8      	ldr	r0, [r7, #8]
   82ce8:	4798      	blx	r3
   82cea:	4603      	mov	r3, r0
   82cec:	461a      	mov	r2, r3
   82cee:	4621      	mov	r1, r4
   82cf0:	4828      	ldr	r0, [pc, #160]	; (82d94 <TC1_Handler+0x170>)
   82cf2:	4b29      	ldr	r3, [pc, #164]	; (82d98 <TC1_Handler+0x174>)
   82cf4:	4798      	blx	r3
   82cf6:	4602      	mov	r2, r0
   82cf8:	4b28      	ldr	r3, [pc, #160]	; (82d9c <TC1_Handler+0x178>)
   82cfa:	4610      	mov	r0, r2
   82cfc:	4798      	blx	r3
   82cfe:	4603      	mov	r3, r0
   82d00:	b21b      	sxth	r3, r3
   82d02:	4619      	mov	r1, r3
   82d04:	2000      	movs	r0, #0
   82d06:	4b26      	ldr	r3, [pc, #152]	; (82da0 <TC1_Handler+0x17c>)
   82d08:	4798      	blx	r3
    motor_speed(MOTOR_RIGHT, pidReg(&mright_pid_reg, speed_mright, (float)eright_counts));
   82d0a:	4b26      	ldr	r3, [pc, #152]	; (82da4 <TC1_Handler+0x180>)
   82d0c:	681c      	ldr	r4, [r3, #0]
   82d0e:	4b20      	ldr	r3, [pc, #128]	; (82d90 <TC1_Handler+0x16c>)
   82d10:	6878      	ldr	r0, [r7, #4]
   82d12:	4798      	blx	r3
   82d14:	4603      	mov	r3, r0
   82d16:	461a      	mov	r2, r3
   82d18:	4621      	mov	r1, r4
   82d1a:	4823      	ldr	r0, [pc, #140]	; (82da8 <TC1_Handler+0x184>)
   82d1c:	4b1e      	ldr	r3, [pc, #120]	; (82d98 <TC1_Handler+0x174>)
   82d1e:	4798      	blx	r3
   82d20:	4602      	mov	r2, r0
   82d22:	4b1e      	ldr	r3, [pc, #120]	; (82d9c <TC1_Handler+0x178>)
   82d24:	4610      	mov	r0, r2
   82d26:	4798      	blx	r3
   82d28:	4603      	mov	r3, r0
   82d2a:	b21b      	sxth	r3, r3
   82d2c:	4619      	mov	r1, r3
   82d2e:	2001      	movs	r0, #1
   82d30:	4b1b      	ldr	r3, [pc, #108]	; (82da0 <TC1_Handler+0x17c>)
   82d32:	4798      	blx	r3
    motor_speed(MOTOR_REAR, pidReg(&mrear_pid_reg, speed_mrear, (float)erear_counts));
   82d34:	4b1d      	ldr	r3, [pc, #116]	; (82dac <TC1_Handler+0x188>)
   82d36:	681c      	ldr	r4, [r3, #0]
   82d38:	4b15      	ldr	r3, [pc, #84]	; (82d90 <TC1_Handler+0x16c>)
   82d3a:	6838      	ldr	r0, [r7, #0]
   82d3c:	4798      	blx	r3
   82d3e:	4603      	mov	r3, r0
   82d40:	461a      	mov	r2, r3
   82d42:	4621      	mov	r1, r4
   82d44:	481a      	ldr	r0, [pc, #104]	; (82db0 <TC1_Handler+0x18c>)
   82d46:	4b14      	ldr	r3, [pc, #80]	; (82d98 <TC1_Handler+0x174>)
   82d48:	4798      	blx	r3
   82d4a:	4602      	mov	r2, r0
   82d4c:	4b13      	ldr	r3, [pc, #76]	; (82d9c <TC1_Handler+0x178>)
   82d4e:	4610      	mov	r0, r2
   82d50:	4798      	blx	r3
   82d52:	4603      	mov	r3, r0
   82d54:	b21b      	sxth	r3, r3
   82d56:	4619      	mov	r1, r3
   82d58:	2002      	movs	r0, #2
   82d5a:	4b11      	ldr	r3, [pc, #68]	; (82da0 <TC1_Handler+0x17c>)
   82d5c:	4798      	blx	r3

    //pwm_channel_enable(PWM, ENC_CLK);
  }

  ioport_set_pin_level(LED_M3, 0);
   82d5e:	2100      	movs	r1, #0
   82d60:	2069      	movs	r0, #105	; 0x69
   82d62:	4b03      	ldr	r3, [pc, #12]	; (82d70 <TC1_Handler+0x14c>)
   82d64:	4798      	blx	r3
}
   82d66:	bf00      	nop
   82d68:	3714      	adds	r7, #20
   82d6a:	46bd      	mov	sp, r7
   82d6c:	bd90      	pop	{r4, r7, pc}
   82d6e:	bf00      	nop
   82d70:	000828a5 	.word	0x000828a5
   82d74:	40080000 	.word	0x40080000
   82d78:	000806d9 	.word	0x000806d9
   82d7c:	40094000 	.word	0x40094000
   82d80:	00080615 	.word	0x00080615
   82d84:	0008290f 	.word	0x0008290f
   82d88:	000805f3 	.word	0x000805f3
   82d8c:	20070f2c 	.word	0x20070f2c
   82d90:	00084ff5 	.word	0x00084ff5
   82d94:	20070f5c 	.word	0x20070f5c
   82d98:	00082db5 	.word	0x00082db5
   82d9c:	00085429 	.word	0x00085429
   82da0:	00082b7d 	.word	0x00082b7d
   82da4:	20070ed8 	.word	0x20070ed8
   82da8:	20070eb4 	.word	0x20070eb4
   82dac:	20070fb4 	.word	0x20070fb4
   82db0:	20070f04 	.word	0x20070f04

00082db4 <pidReg>:
/************************************************************************/

#include "pid.h"

float pidReg(pidReg_t* reg, float refer, float act)
{
   82db4:	b590      	push	{r4, r7, lr}
   82db6:	b08b      	sub	sp, #44	; 0x2c
   82db8:	af00      	add	r7, sp, #0
   82dba:	60f8      	str	r0, [r7, #12]
   82dbc:	60b9      	str	r1, [r7, #8]
   82dbe:	607a      	str	r2, [r7, #4]
    float diff;
    float outPreSat;
    float out;

    // Compute the error
    err = refer - act;
   82dc0:	4b3c      	ldr	r3, [pc, #240]	; (82eb4 <pidReg+0x100>)
   82dc2:	6879      	ldr	r1, [r7, #4]
   82dc4:	68b8      	ldr	r0, [r7, #8]
   82dc6:	4798      	blx	r3
   82dc8:	4603      	mov	r3, r0
   82dca:	623b      	str	r3, [r7, #32]

    // Compute the proportional output
    prop = reg->kp * err;
   82dcc:	68fb      	ldr	r3, [r7, #12]
   82dce:	681a      	ldr	r2, [r3, #0]
   82dd0:	4b39      	ldr	r3, [pc, #228]	; (82eb8 <pidReg+0x104>)
   82dd2:	6a39      	ldr	r1, [r7, #32]
   82dd4:	4610      	mov	r0, r2
   82dd6:	4798      	blx	r3
   82dd8:	4603      	mov	r3, r0
   82dda:	61fb      	str	r3, [r7, #28]

    // Compute the integral output
    reg->intg = reg->intg + reg->ki * err + reg->kc * reg->satErr;
   82ddc:	68fb      	ldr	r3, [r7, #12]
   82dde:	691c      	ldr	r4, [r3, #16]
   82de0:	68fb      	ldr	r3, [r7, #12]
   82de2:	685a      	ldr	r2, [r3, #4]
   82de4:	4b34      	ldr	r3, [pc, #208]	; (82eb8 <pidReg+0x104>)
   82de6:	6a39      	ldr	r1, [r7, #32]
   82de8:	4610      	mov	r0, r2
   82dea:	4798      	blx	r3
   82dec:	4603      	mov	r3, r0
   82dee:	461a      	mov	r2, r3
   82df0:	4b32      	ldr	r3, [pc, #200]	; (82ebc <pidReg+0x108>)
   82df2:	4611      	mov	r1, r2
   82df4:	4620      	mov	r0, r4
   82df6:	4798      	blx	r3
   82df8:	4603      	mov	r3, r0
   82dfa:	461c      	mov	r4, r3
   82dfc:	68fb      	ldr	r3, [r7, #12]
   82dfe:	689a      	ldr	r2, [r3, #8]
   82e00:	68fb      	ldr	r3, [r7, #12]
   82e02:	69d9      	ldr	r1, [r3, #28]
   82e04:	4b2c      	ldr	r3, [pc, #176]	; (82eb8 <pidReg+0x104>)
   82e06:	4610      	mov	r0, r2
   82e08:	4798      	blx	r3
   82e0a:	4603      	mov	r3, r0
   82e0c:	461a      	mov	r2, r3
   82e0e:	4b2b      	ldr	r3, [pc, #172]	; (82ebc <pidReg+0x108>)
   82e10:	4611      	mov	r1, r2
   82e12:	4620      	mov	r0, r4
   82e14:	4798      	blx	r3
   82e16:	4603      	mov	r3, r0
   82e18:	461a      	mov	r2, r3
   82e1a:	68fb      	ldr	r3, [r7, #12]
   82e1c:	611a      	str	r2, [r3, #16]

    // Compute the derivative output
    diff = reg->kd * (err - reg->prevErr);
   82e1e:	68fb      	ldr	r3, [r7, #12]
   82e20:	68dc      	ldr	r4, [r3, #12]
   82e22:	68fb      	ldr	r3, [r7, #12]
   82e24:	6a1a      	ldr	r2, [r3, #32]
   82e26:	4b23      	ldr	r3, [pc, #140]	; (82eb4 <pidReg+0x100>)
   82e28:	4611      	mov	r1, r2
   82e2a:	6a38      	ldr	r0, [r7, #32]
   82e2c:	4798      	blx	r3
   82e2e:	4603      	mov	r3, r0
   82e30:	461a      	mov	r2, r3
   82e32:	4b21      	ldr	r3, [pc, #132]	; (82eb8 <pidReg+0x104>)
   82e34:	4611      	mov	r1, r2
   82e36:	4620      	mov	r0, r4
   82e38:	4798      	blx	r3
   82e3a:	4603      	mov	r3, r0
   82e3c:	61bb      	str	r3, [r7, #24]

    // Compute the pre-saturated output
    outPreSat = prop + reg->intg + diff;
   82e3e:	68fb      	ldr	r3, [r7, #12]
   82e40:	691a      	ldr	r2, [r3, #16]
   82e42:	4b1e      	ldr	r3, [pc, #120]	; (82ebc <pidReg+0x108>)
   82e44:	69f9      	ldr	r1, [r7, #28]
   82e46:	4610      	mov	r0, r2
   82e48:	4798      	blx	r3
   82e4a:	4603      	mov	r3, r0
   82e4c:	461a      	mov	r2, r3
   82e4e:	4b1b      	ldr	r3, [pc, #108]	; (82ebc <pidReg+0x108>)
   82e50:	69b9      	ldr	r1, [r7, #24]
   82e52:	4610      	mov	r0, r2
   82e54:	4798      	blx	r3
   82e56:	4603      	mov	r3, r0
   82e58:	617b      	str	r3, [r7, #20]

    // Saturate the output
    if (outPreSat > reg->outMax)
   82e5a:	68fb      	ldr	r3, [r7, #12]
   82e5c:	695a      	ldr	r2, [r3, #20]
   82e5e:	4b18      	ldr	r3, [pc, #96]	; (82ec0 <pidReg+0x10c>)
   82e60:	6979      	ldr	r1, [r7, #20]
   82e62:	4610      	mov	r0, r2
   82e64:	4798      	blx	r3
   82e66:	4603      	mov	r3, r0
   82e68:	2b00      	cmp	r3, #0
   82e6a:	d003      	beq.n	82e74 <pidReg+0xc0>
    {
        out = reg->outMax;
   82e6c:	68fb      	ldr	r3, [r7, #12]
   82e6e:	695b      	ldr	r3, [r3, #20]
   82e70:	627b      	str	r3, [r7, #36]	; 0x24
   82e72:	e00e      	b.n	82e92 <pidReg+0xde>
    }
    else if (outPreSat < reg->outMin)
   82e74:	68fb      	ldr	r3, [r7, #12]
   82e76:	699a      	ldr	r2, [r3, #24]
   82e78:	4b12      	ldr	r3, [pc, #72]	; (82ec4 <pidReg+0x110>)
   82e7a:	6979      	ldr	r1, [r7, #20]
   82e7c:	4610      	mov	r0, r2
   82e7e:	4798      	blx	r3
   82e80:	4603      	mov	r3, r0
   82e82:	2b00      	cmp	r3, #0
   82e84:	d003      	beq.n	82e8e <pidReg+0xda>
    {
        out = reg->outMin;
   82e86:	68fb      	ldr	r3, [r7, #12]
   82e88:	699b      	ldr	r3, [r3, #24]
   82e8a:	627b      	str	r3, [r7, #36]	; 0x24
   82e8c:	e001      	b.n	82e92 <pidReg+0xde>
    }
    else
    {
        out = outPreSat;
   82e8e:	697b      	ldr	r3, [r7, #20]
   82e90:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Compute the saturate difference
    reg->satErr = out - outPreSat;
   82e92:	4b08      	ldr	r3, [pc, #32]	; (82eb4 <pidReg+0x100>)
   82e94:	6979      	ldr	r1, [r7, #20]
   82e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
   82e98:	4798      	blx	r3
   82e9a:	4603      	mov	r3, r0
   82e9c:	461a      	mov	r2, r3
   82e9e:	68fb      	ldr	r3, [r7, #12]
   82ea0:	61da      	str	r2, [r3, #28]

    // Keep error for next iteration
    reg->prevErr = err;
   82ea2:	68fb      	ldr	r3, [r7, #12]
   82ea4:	6a3a      	ldr	r2, [r7, #32]
   82ea6:	621a      	str	r2, [r3, #32]

    return out;
   82ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   82eaa:	4618      	mov	r0, r3
   82eac:	372c      	adds	r7, #44	; 0x2c
   82eae:	46bd      	mov	sp, r7
   82eb0:	bd90      	pop	{r4, r7, pc}
   82eb2:	bf00      	nop
   82eb4:	00084e89 	.word	0x00084e89
   82eb8:	0008509d 	.word	0x0008509d
   82ebc:	00084e8d 	.word	0x00084e8d
   82ec0:	000853d9 	.word	0x000853d9
   82ec4:	00085415 	.word	0x00085415

00082ec8 <ioport_set_pin_level>:
{
   82ec8:	b480      	push	{r7}
   82eca:	b08b      	sub	sp, #44	; 0x2c
   82ecc:	af00      	add	r7, sp, #0
   82ece:	6078      	str	r0, [r7, #4]
   82ed0:	460b      	mov	r3, r1
   82ed2:	70fb      	strb	r3, [r7, #3]
   82ed4:	687b      	ldr	r3, [r7, #4]
   82ed6:	627b      	str	r3, [r7, #36]	; 0x24
   82ed8:	78fb      	ldrb	r3, [r7, #3]
   82eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   82ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82ee0:	61fb      	str	r3, [r7, #28]
   82ee2:	69fb      	ldr	r3, [r7, #28]
   82ee4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   82ee6:	69bb      	ldr	r3, [r7, #24]
   82ee8:	095b      	lsrs	r3, r3, #5
   82eea:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82eec:	697b      	ldr	r3, [r7, #20]
   82eee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ef2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ef6:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   82ef8:	613b      	str	r3, [r7, #16]
	if (level) {
   82efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   82efe:	2b00      	cmp	r3, #0
   82f00:	d009      	beq.n	82f16 <ioport_set_pin_level+0x4e>
   82f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82f04:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   82f06:	68fb      	ldr	r3, [r7, #12]
   82f08:	f003 031f 	and.w	r3, r3, #31
   82f0c:	2201      	movs	r2, #1
   82f0e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82f10:	693b      	ldr	r3, [r7, #16]
   82f12:	631a      	str	r2, [r3, #48]	; 0x30
}
   82f14:	e008      	b.n	82f28 <ioport_set_pin_level+0x60>
   82f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82f18:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   82f1a:	68bb      	ldr	r3, [r7, #8]
   82f1c:	f003 031f 	and.w	r3, r3, #31
   82f20:	2201      	movs	r2, #1
   82f22:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82f24:	693b      	ldr	r3, [r7, #16]
   82f26:	635a      	str	r2, [r3, #52]	; 0x34
   82f28:	bf00      	nop
   82f2a:	372c      	adds	r7, #44	; 0x2c
   82f2c:	46bd      	mov	sp, r7
   82f2e:	bc80      	pop	{r7}
   82f30:	4770      	bx	lr
	...

00082f34 <SysTick_Handler>:
//float battery_voltage = 0;
uint8_t battery_percentage;
uint8_t prev_battery_percentage = 0;

void SysTick_Handler(void)
{
   82f34:	b480      	push	{r7}
   82f36:	af00      	add	r7, sp, #0
    g_ul_ms_ticks++;
   82f38:	4b04      	ldr	r3, [pc, #16]	; (82f4c <SysTick_Handler+0x18>)
   82f3a:	681b      	ldr	r3, [r3, #0]
   82f3c:	3301      	adds	r3, #1
   82f3e:	4a03      	ldr	r2, [pc, #12]	; (82f4c <SysTick_Handler+0x18>)
   82f40:	6013      	str	r3, [r2, #0]
}
   82f42:	bf00      	nop
   82f44:	46bd      	mov	sp, r7
   82f46:	bc80      	pop	{r7}
   82f48:	4770      	bx	lr
   82f4a:	bf00      	nop
   82f4c:	20070dc4 	.word	0x20070dc4

00082f50 <getTicks>:

uint32_t getTicks(void)
{
   82f50:	b480      	push	{r7}
   82f52:	af00      	add	r7, sp, #0
    return g_ul_ms_ticks;
   82f54:	4b02      	ldr	r3, [pc, #8]	; (82f60 <getTicks+0x10>)
   82f56:	681b      	ldr	r3, [r3, #0]
}
   82f58:	4618      	mov	r0, r3
   82f5a:	46bd      	mov	sp, r7
   82f5c:	bc80      	pop	{r7}
   82f5e:	4770      	bx	lr
   82f60:	20070dc4 	.word	0x20070dc4

00082f64 <mdelay>:

void mdelay(uint32_t ul_dly_ticks)
{
   82f64:	b480      	push	{r7}
   82f66:	b085      	sub	sp, #20
   82f68:	af00      	add	r7, sp, #0
   82f6a:	6078      	str	r0, [r7, #4]
    uint32_t ul_cur_ticks;

    ul_cur_ticks = g_ul_ms_ticks;
   82f6c:	4b07      	ldr	r3, [pc, #28]	; (82f8c <mdelay+0x28>)
   82f6e:	681b      	ldr	r3, [r3, #0]
   82f70:	60fb      	str	r3, [r7, #12]
    while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   82f72:	bf00      	nop
   82f74:	4b05      	ldr	r3, [pc, #20]	; (82f8c <mdelay+0x28>)
   82f76:	681a      	ldr	r2, [r3, #0]
   82f78:	68fb      	ldr	r3, [r7, #12]
   82f7a:	1ad2      	subs	r2, r2, r3
   82f7c:	687b      	ldr	r3, [r7, #4]
   82f7e:	429a      	cmp	r2, r3
   82f80:	d3f8      	bcc.n	82f74 <mdelay+0x10>
}
   82f82:	bf00      	nop
   82f84:	3714      	adds	r7, #20
   82f86:	46bd      	mov	sp, r7
   82f88:	bc80      	pop	{r7}
   82f8a:	4770      	bx	lr
   82f8c:	20070dc4 	.word	0x20070dc4

00082f90 <update_comm>:

void update_comm(void)
{
   82f90:	b580      	push	{r7, lr}
   82f92:	af00      	add	r7, sp, #0
    if ((getTicks() - ticks_comm) > 5)
   82f94:	4b0b      	ldr	r3, [pc, #44]	; (82fc4 <update_comm+0x34>)
   82f96:	4798      	blx	r3
   82f98:	4602      	mov	r2, r0
   82f9a:	4b0b      	ldr	r3, [pc, #44]	; (82fc8 <update_comm+0x38>)
   82f9c:	681b      	ldr	r3, [r3, #0]
   82f9e:	1ad3      	subs	r3, r2, r3
   82fa0:	2b05      	cmp	r3, #5
   82fa2:	d90d      	bls.n	82fc0 <update_comm+0x30>
    {
        ticks_comm = getTicks();
   82fa4:	4b07      	ldr	r3, [pc, #28]	; (82fc4 <update_comm+0x34>)
   82fa6:	4798      	blx	r3
   82fa8:	4602      	mov	r2, r0
   82faa:	4b07      	ldr	r3, [pc, #28]	; (82fc8 <update_comm+0x38>)
   82fac:	601a      	str	r2, [r3, #0]
        
        memcpy(&sens_buf, &mts, sizeof(mts));
   82fae:	4b07      	ldr	r3, [pc, #28]	; (82fcc <update_comm+0x3c>)
   82fb0:	681b      	ldr	r3, [r3, #0]
   82fb2:	461a      	mov	r2, r3
   82fb4:	4b06      	ldr	r3, [pc, #24]	; (82fd0 <update_comm+0x40>)
   82fb6:	601a      	str	r2, [r3, #0]
        spi_master_transfer(&sens_buf, sizeof(sens_buf));
   82fb8:	2103      	movs	r1, #3
   82fba:	4805      	ldr	r0, [pc, #20]	; (82fd0 <update_comm+0x40>)
   82fbc:	4b05      	ldr	r3, [pc, #20]	; (82fd4 <update_comm+0x44>)
   82fbe:	4798      	blx	r3
    }
}
   82fc0:	bf00      	nop
   82fc2:	bd80      	pop	{r7, pc}
   82fc4:	00082f51 	.word	0x00082f51
   82fc8:	20070e18 	.word	0x20070e18
   82fcc:	20070e0c 	.word	0x20070e0c
   82fd0:	20070e08 	.word	0x20070e08
   82fd4:	00080b15 	.word	0x00080b15

00082fd8 <update_battery>:

void update_battery(Bool update_forced)
{
   82fd8:	b580      	push	{r7, lr}
   82fda:	b084      	sub	sp, #16
   82fdc:	af00      	add	r7, sp, #0
   82fde:	4603      	mov	r3, r0
   82fe0:	71fb      	strb	r3, [r7, #7]
    char tmp[6];
    battery_percentage = stm.bat_percentage;
   82fe2:	4b20      	ldr	r3, [pc, #128]	; (83064 <update_battery+0x8c>)
   82fe4:	789a      	ldrb	r2, [r3, #2]
   82fe6:	4b20      	ldr	r3, [pc, #128]	; (83068 <update_battery+0x90>)
   82fe8:	701a      	strb	r2, [r3, #0]
    
    if (update_forced || prev_battery_percentage != battery_percentage)
   82fea:	79fb      	ldrb	r3, [r7, #7]
   82fec:	2b00      	cmp	r3, #0
   82fee:	d105      	bne.n	82ffc <update_battery+0x24>
   82ff0:	4b1e      	ldr	r3, [pc, #120]	; (8306c <update_battery+0x94>)
   82ff2:	781a      	ldrb	r2, [r3, #0]
   82ff4:	4b1c      	ldr	r3, [pc, #112]	; (83068 <update_battery+0x90>)
   82ff6:	781b      	ldrb	r3, [r3, #0]
   82ff8:	429a      	cmp	r2, r3
   82ffa:	d02f      	beq.n	8305c <update_battery+0x84>
    {
        if (battery_percentage >= 100)
   82ffc:	4b1a      	ldr	r3, [pc, #104]	; (83068 <update_battery+0x90>)
   82ffe:	781b      	ldrb	r3, [r3, #0]
   83000:	2b63      	cmp	r3, #99	; 0x63
   83002:	d909      	bls.n	83018 <update_battery+0x40>
        {
            sprintf(tmp, "%3u%%", battery_percentage);
   83004:	4b18      	ldr	r3, [pc, #96]	; (83068 <update_battery+0x90>)
   83006:	781b      	ldrb	r3, [r3, #0]
   83008:	461a      	mov	r2, r3
   8300a:	f107 0308 	add.w	r3, r7, #8
   8300e:	4918      	ldr	r1, [pc, #96]	; (83070 <update_battery+0x98>)
   83010:	4618      	mov	r0, r3
   83012:	4b18      	ldr	r3, [pc, #96]	; (83074 <update_battery+0x9c>)
   83014:	4798      	blx	r3
   83016:	e016      	b.n	83046 <update_battery+0x6e>
        }
        else if (battery_percentage >= 10)
   83018:	4b13      	ldr	r3, [pc, #76]	; (83068 <update_battery+0x90>)
   8301a:	781b      	ldrb	r3, [r3, #0]
   8301c:	2b09      	cmp	r3, #9
   8301e:	d909      	bls.n	83034 <update_battery+0x5c>
        {
            sprintf(tmp, " %2u%%", battery_percentage);
   83020:	4b11      	ldr	r3, [pc, #68]	; (83068 <update_battery+0x90>)
   83022:	781b      	ldrb	r3, [r3, #0]
   83024:	461a      	mov	r2, r3
   83026:	f107 0308 	add.w	r3, r7, #8
   8302a:	4913      	ldr	r1, [pc, #76]	; (83078 <update_battery+0xa0>)
   8302c:	4618      	mov	r0, r3
   8302e:	4b11      	ldr	r3, [pc, #68]	; (83074 <update_battery+0x9c>)
   83030:	4798      	blx	r3
   83032:	e008      	b.n	83046 <update_battery+0x6e>
        }
        else
        {
            sprintf(tmp, "  %1u%%", battery_percentage);
   83034:	4b0c      	ldr	r3, [pc, #48]	; (83068 <update_battery+0x90>)
   83036:	781b      	ldrb	r3, [r3, #0]
   83038:	461a      	mov	r2, r3
   8303a:	f107 0308 	add.w	r3, r7, #8
   8303e:	490f      	ldr	r1, [pc, #60]	; (8307c <update_battery+0xa4>)
   83040:	4618      	mov	r0, r3
   83042:	4b0c      	ldr	r3, [pc, #48]	; (83074 <update_battery+0x9c>)
   83044:	4798      	blx	r3
        }
            
        lcd_print_s(1, 16, tmp);
   83046:	f107 0308 	add.w	r3, r7, #8
   8304a:	461a      	mov	r2, r3
   8304c:	2110      	movs	r1, #16
   8304e:	2001      	movs	r0, #1
   83050:	4b0b      	ldr	r3, [pc, #44]	; (83080 <update_battery+0xa8>)
   83052:	4798      	blx	r3
        prev_battery_percentage = battery_percentage;
   83054:	4b04      	ldr	r3, [pc, #16]	; (83068 <update_battery+0x90>)
   83056:	781a      	ldrb	r2, [r3, #0]
   83058:	4b04      	ldr	r3, [pc, #16]	; (8306c <update_battery+0x94>)
   8305a:	701a      	strb	r2, [r3, #0]
    }
}
   8305c:	bf00      	nop
   8305e:	3710      	adds	r7, #16
   83060:	46bd      	mov	sp, r7
   83062:	bd80      	pop	{r7, pc}
   83064:	20070e10 	.word	0x20070e10
   83068:	20070fb8 	.word	0x20070fb8
   8306c:	20070dc8 	.word	0x20070dc8
   83070:	000896a4 	.word	0x000896a4
   83074:	00085561 	.word	0x00085561
   83078:	000896ac 	.word	0x000896ac
   8307c:	000896b4 	.word	0x000896b4
   83080:	0008169d 	.word	0x0008169d

00083084 <update_heartbeat>:

void update_heartbeat(void)
{
   83084:	b580      	push	{r7, lr}
   83086:	af00      	add	r7, sp, #0
    if (heart_state)
   83088:	4b20      	ldr	r3, [pc, #128]	; (8310c <update_heartbeat+0x88>)
   8308a:	781b      	ldrb	r3, [r3, #0]
   8308c:	2b00      	cmp	r3, #0
   8308e:	d01d      	beq.n	830cc <update_heartbeat+0x48>
    {
        if (getTicks() >= (ticks_heartbeat + 100))
   83090:	4b1f      	ldr	r3, [pc, #124]	; (83110 <update_heartbeat+0x8c>)
   83092:	4798      	blx	r3
   83094:	4602      	mov	r2, r0
   83096:	4b1f      	ldr	r3, [pc, #124]	; (83114 <update_heartbeat+0x90>)
   83098:	681b      	ldr	r3, [r3, #0]
   8309a:	3364      	adds	r3, #100	; 0x64
   8309c:	429a      	cmp	r2, r3
   8309e:	d333      	bcc.n	83108 <update_heartbeat+0x84>
        {
            ticks_heartbeat = getTicks();
   830a0:	4b1b      	ldr	r3, [pc, #108]	; (83110 <update_heartbeat+0x8c>)
   830a2:	4798      	blx	r3
   830a4:	4602      	mov	r2, r0
   830a6:	4b1b      	ldr	r3, [pc, #108]	; (83114 <update_heartbeat+0x90>)
   830a8:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 0);
   830aa:	2100      	movs	r1, #0
   830ac:	206a      	movs	r0, #106	; 0x6a
   830ae:	4b1a      	ldr	r3, [pc, #104]	; (83118 <update_heartbeat+0x94>)
   830b0:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 0);
   830b2:	2100      	movs	r1, #0
   830b4:	2067      	movs	r0, #103	; 0x67
   830b6:	4b18      	ldr	r3, [pc, #96]	; (83118 <update_heartbeat+0x94>)
   830b8:	4798      	blx	r3
            mts.ibit.heartbeat = 0;
   830ba:	4a18      	ldr	r2, [pc, #96]	; (8311c <update_heartbeat+0x98>)
   830bc:	7813      	ldrb	r3, [r2, #0]
   830be:	f36f 0300 	bfc	r3, #0, #1
   830c2:	7013      	strb	r3, [r2, #0]
            heart_state = 0;
   830c4:	4b11      	ldr	r3, [pc, #68]	; (8310c <update_heartbeat+0x88>)
   830c6:	2200      	movs	r2, #0
   830c8:	701a      	strb	r2, [r3, #0]
            ioport_set_pin_level(LED_M1, 1);
            mts.ibit.heartbeat = 1;
            heart_state = 1;
        }
    }
}
   830ca:	e01d      	b.n	83108 <update_heartbeat+0x84>
        if (getTicks() >= (ticks_heartbeat + 900))
   830cc:	4b10      	ldr	r3, [pc, #64]	; (83110 <update_heartbeat+0x8c>)
   830ce:	4798      	blx	r3
   830d0:	4602      	mov	r2, r0
   830d2:	4b10      	ldr	r3, [pc, #64]	; (83114 <update_heartbeat+0x90>)
   830d4:	681b      	ldr	r3, [r3, #0]
   830d6:	f503 7361 	add.w	r3, r3, #900	; 0x384
   830da:	429a      	cmp	r2, r3
   830dc:	d314      	bcc.n	83108 <update_heartbeat+0x84>
            ticks_heartbeat = getTicks();
   830de:	4b0c      	ldr	r3, [pc, #48]	; (83110 <update_heartbeat+0x8c>)
   830e0:	4798      	blx	r3
   830e2:	4602      	mov	r2, r0
   830e4:	4b0b      	ldr	r3, [pc, #44]	; (83114 <update_heartbeat+0x90>)
   830e6:	601a      	str	r2, [r3, #0]
            ioport_set_pin_level(LED_ONBOARD, 1);
   830e8:	2101      	movs	r1, #1
   830ea:	206a      	movs	r0, #106	; 0x6a
   830ec:	4b0a      	ldr	r3, [pc, #40]	; (83118 <update_heartbeat+0x94>)
   830ee:	4798      	blx	r3
            ioport_set_pin_level(LED_M1, 1);
   830f0:	2101      	movs	r1, #1
   830f2:	2067      	movs	r0, #103	; 0x67
   830f4:	4b08      	ldr	r3, [pc, #32]	; (83118 <update_heartbeat+0x94>)
   830f6:	4798      	blx	r3
            mts.ibit.heartbeat = 1;
   830f8:	4a08      	ldr	r2, [pc, #32]	; (8311c <update_heartbeat+0x98>)
   830fa:	7813      	ldrb	r3, [r2, #0]
   830fc:	f043 0301 	orr.w	r3, r3, #1
   83100:	7013      	strb	r3, [r2, #0]
            heart_state = 1;
   83102:	4b02      	ldr	r3, [pc, #8]	; (8310c <update_heartbeat+0x88>)
   83104:	2201      	movs	r2, #1
   83106:	701a      	strb	r2, [r3, #0]
}
   83108:	bf00      	nop
   8310a:	bd80      	pop	{r7, pc}
   8310c:	20070e14 	.word	0x20070e14
   83110:	00082f51 	.word	0x00082f51
   83114:	20070e24 	.word	0x20070e24
   83118:	00082ec9 	.word	0x00082ec9
   8311c:	20070e0c 	.word	0x20070e0c

00083120 <osc_enable>:
{
   83120:	b580      	push	{r7, lr}
   83122:	b082      	sub	sp, #8
   83124:	af00      	add	r7, sp, #0
   83126:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83128:	687b      	ldr	r3, [r7, #4]
   8312a:	2b07      	cmp	r3, #7
   8312c:	d831      	bhi.n	83192 <osc_enable+0x72>
   8312e:	a201      	add	r2, pc, #4	; (adr r2, 83134 <osc_enable+0x14>)
   83130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83134:	00083191 	.word	0x00083191
   83138:	00083155 	.word	0x00083155
   8313c:	0008315d 	.word	0x0008315d
   83140:	00083165 	.word	0x00083165
   83144:	0008316d 	.word	0x0008316d
   83148:	00083175 	.word	0x00083175
   8314c:	0008317d 	.word	0x0008317d
   83150:	00083187 	.word	0x00083187
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83154:	2000      	movs	r0, #0
   83156:	4b11      	ldr	r3, [pc, #68]	; (8319c <osc_enable+0x7c>)
   83158:	4798      	blx	r3
		break;
   8315a:	e01a      	b.n	83192 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8315c:	2001      	movs	r0, #1
   8315e:	4b0f      	ldr	r3, [pc, #60]	; (8319c <osc_enable+0x7c>)
   83160:	4798      	blx	r3
		break;
   83162:	e016      	b.n	83192 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83164:	2000      	movs	r0, #0
   83166:	4b0e      	ldr	r3, [pc, #56]	; (831a0 <osc_enable+0x80>)
   83168:	4798      	blx	r3
		break;
   8316a:	e012      	b.n	83192 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8316c:	2010      	movs	r0, #16
   8316e:	4b0c      	ldr	r3, [pc, #48]	; (831a0 <osc_enable+0x80>)
   83170:	4798      	blx	r3
		break;
   83172:	e00e      	b.n	83192 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83174:	2020      	movs	r0, #32
   83176:	4b0a      	ldr	r3, [pc, #40]	; (831a0 <osc_enable+0x80>)
   83178:	4798      	blx	r3
		break;
   8317a:	e00a      	b.n	83192 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8317c:	213e      	movs	r1, #62	; 0x3e
   8317e:	2000      	movs	r0, #0
   83180:	4b08      	ldr	r3, [pc, #32]	; (831a4 <osc_enable+0x84>)
   83182:	4798      	blx	r3
		break;
   83184:	e005      	b.n	83192 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   83186:	213e      	movs	r1, #62	; 0x3e
   83188:	2001      	movs	r0, #1
   8318a:	4b06      	ldr	r3, [pc, #24]	; (831a4 <osc_enable+0x84>)
   8318c:	4798      	blx	r3
		break;
   8318e:	e000      	b.n	83192 <osc_enable+0x72>
		break;
   83190:	bf00      	nop
}
   83192:	bf00      	nop
   83194:	3708      	adds	r7, #8
   83196:	46bd      	mov	sp, r7
   83198:	bd80      	pop	{r7, pc}
   8319a:	bf00      	nop
   8319c:	0008375d 	.word	0x0008375d
   831a0:	000837c9 	.word	0x000837c9
   831a4:	00083839 	.word	0x00083839

000831a8 <osc_is_ready>:
{
   831a8:	b580      	push	{r7, lr}
   831aa:	b082      	sub	sp, #8
   831ac:	af00      	add	r7, sp, #0
   831ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   831b0:	687b      	ldr	r3, [r7, #4]
   831b2:	2b07      	cmp	r3, #7
   831b4:	d826      	bhi.n	83204 <osc_is_ready+0x5c>
   831b6:	a201      	add	r2, pc, #4	; (adr r2, 831bc <osc_is_ready+0x14>)
   831b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   831bc:	000831dd 	.word	0x000831dd
   831c0:	000831e1 	.word	0x000831e1
   831c4:	000831e1 	.word	0x000831e1
   831c8:	000831f3 	.word	0x000831f3
   831cc:	000831f3 	.word	0x000831f3
   831d0:	000831f3 	.word	0x000831f3
   831d4:	000831f3 	.word	0x000831f3
   831d8:	000831f3 	.word	0x000831f3
		return 1;
   831dc:	2301      	movs	r3, #1
   831de:	e012      	b.n	83206 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
   831e0:	4b0b      	ldr	r3, [pc, #44]	; (83210 <osc_is_ready+0x68>)
   831e2:	4798      	blx	r3
   831e4:	4603      	mov	r3, r0
   831e6:	2b00      	cmp	r3, #0
   831e8:	bf14      	ite	ne
   831ea:	2301      	movne	r3, #1
   831ec:	2300      	moveq	r3, #0
   831ee:	b2db      	uxtb	r3, r3
   831f0:	e009      	b.n	83206 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
   831f2:	4b08      	ldr	r3, [pc, #32]	; (83214 <osc_is_ready+0x6c>)
   831f4:	4798      	blx	r3
   831f6:	4603      	mov	r3, r0
   831f8:	2b00      	cmp	r3, #0
   831fa:	bf14      	ite	ne
   831fc:	2301      	movne	r3, #1
   831fe:	2300      	moveq	r3, #0
   83200:	b2db      	uxtb	r3, r3
   83202:	e000      	b.n	83206 <osc_is_ready+0x5e>
	return 0;
   83204:	2300      	movs	r3, #0
}
   83206:	4618      	mov	r0, r3
   83208:	3708      	adds	r7, #8
   8320a:	46bd      	mov	sp, r7
   8320c:	bd80      	pop	{r7, pc}
   8320e:	bf00      	nop
   83210:	00083795 	.word	0x00083795
   83214:	000838b1 	.word	0x000838b1

00083218 <osc_get_rate>:
{
   83218:	b480      	push	{r7}
   8321a:	b083      	sub	sp, #12
   8321c:	af00      	add	r7, sp, #0
   8321e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83220:	687b      	ldr	r3, [r7, #4]
   83222:	2b07      	cmp	r3, #7
   83224:	d825      	bhi.n	83272 <osc_get_rate+0x5a>
   83226:	a201      	add	r2, pc, #4	; (adr r2, 8322c <osc_get_rate+0x14>)
   83228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8322c:	0008324d 	.word	0x0008324d
   83230:	00083253 	.word	0x00083253
   83234:	00083259 	.word	0x00083259
   83238:	0008325f 	.word	0x0008325f
   8323c:	00083263 	.word	0x00083263
   83240:	00083267 	.word	0x00083267
   83244:	0008326b 	.word	0x0008326b
   83248:	0008326f 	.word	0x0008326f
		return OSC_SLCK_32K_RC_HZ;
   8324c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83250:	e010      	b.n	83274 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   83252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83256:	e00d      	b.n	83274 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   83258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8325c:	e00a      	b.n	83274 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   8325e:	4b08      	ldr	r3, [pc, #32]	; (83280 <osc_get_rate+0x68>)
   83260:	e008      	b.n	83274 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   83262:	4b08      	ldr	r3, [pc, #32]	; (83284 <osc_get_rate+0x6c>)
   83264:	e006      	b.n	83274 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   83266:	4b08      	ldr	r3, [pc, #32]	; (83288 <osc_get_rate+0x70>)
   83268:	e004      	b.n	83274 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   8326a:	4b07      	ldr	r3, [pc, #28]	; (83288 <osc_get_rate+0x70>)
   8326c:	e002      	b.n	83274 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   8326e:	4b06      	ldr	r3, [pc, #24]	; (83288 <osc_get_rate+0x70>)
   83270:	e000      	b.n	83274 <osc_get_rate+0x5c>
	return 0;
   83272:	2300      	movs	r3, #0
}
   83274:	4618      	mov	r0, r3
   83276:	370c      	adds	r7, #12
   83278:	46bd      	mov	sp, r7
   8327a:	bc80      	pop	{r7}
   8327c:	4770      	bx	lr
   8327e:	bf00      	nop
   83280:	003d0900 	.word	0x003d0900
   83284:	007a1200 	.word	0x007a1200
   83288:	00b71b00 	.word	0x00b71b00

0008328c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8328c:	b580      	push	{r7, lr}
   8328e:	b082      	sub	sp, #8
   83290:	af00      	add	r7, sp, #0
   83292:	4603      	mov	r3, r0
   83294:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83296:	bf00      	nop
   83298:	79fb      	ldrb	r3, [r7, #7]
   8329a:	4618      	mov	r0, r3
   8329c:	4b05      	ldr	r3, [pc, #20]	; (832b4 <osc_wait_ready+0x28>)
   8329e:	4798      	blx	r3
   832a0:	4603      	mov	r3, r0
   832a2:	f083 0301 	eor.w	r3, r3, #1
   832a6:	b2db      	uxtb	r3, r3
   832a8:	2b00      	cmp	r3, #0
   832aa:	d1f5      	bne.n	83298 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   832ac:	bf00      	nop
   832ae:	3708      	adds	r7, #8
   832b0:	46bd      	mov	sp, r7
   832b2:	bd80      	pop	{r7, pc}
   832b4:	000831a9 	.word	0x000831a9

000832b8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   832b8:	b580      	push	{r7, lr}
   832ba:	b086      	sub	sp, #24
   832bc:	af00      	add	r7, sp, #0
   832be:	60f8      	str	r0, [r7, #12]
   832c0:	607a      	str	r2, [r7, #4]
   832c2:	603b      	str	r3, [r7, #0]
   832c4:	460b      	mov	r3, r1
   832c6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	2b00      	cmp	r3, #0
   832cc:	d107      	bne.n	832de <pll_config_init+0x26>
   832ce:	683b      	ldr	r3, [r7, #0]
   832d0:	2b00      	cmp	r3, #0
   832d2:	d104      	bne.n	832de <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   832d4:	68fb      	ldr	r3, [r7, #12]
   832d6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   832da:	601a      	str	r2, [r3, #0]
   832dc:	e019      	b.n	83312 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   832de:	7afb      	ldrb	r3, [r7, #11]
   832e0:	4618      	mov	r0, r3
   832e2:	4b0e      	ldr	r3, [pc, #56]	; (8331c <pll_config_init+0x64>)
   832e4:	4798      	blx	r3
   832e6:	4602      	mov	r2, r0
   832e8:	687b      	ldr	r3, [r7, #4]
   832ea:	fbb2 f3f3 	udiv	r3, r2, r3
   832ee:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   832f0:	697b      	ldr	r3, [r7, #20]
   832f2:	683a      	ldr	r2, [r7, #0]
   832f4:	fb02 f303 	mul.w	r3, r2, r3
   832f8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   832fa:	683b      	ldr	r3, [r7, #0]
   832fc:	3b01      	subs	r3, #1
   832fe:	041a      	lsls	r2, r3, #16
   83300:	4b07      	ldr	r3, [pc, #28]	; (83320 <pll_config_init+0x68>)
   83302:	4013      	ands	r3, r2
   83304:	687a      	ldr	r2, [r7, #4]
   83306:	b2d2      	uxtb	r2, r2
   83308:	4313      	orrs	r3, r2
   8330a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8330e:	68fb      	ldr	r3, [r7, #12]
   83310:	601a      	str	r2, [r3, #0]
	}
}
   83312:	bf00      	nop
   83314:	3718      	adds	r7, #24
   83316:	46bd      	mov	sp, r7
   83318:	bd80      	pop	{r7, pc}
   8331a:	bf00      	nop
   8331c:	00083219 	.word	0x00083219
   83320:	07ff0000 	.word	0x07ff0000

00083324 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83324:	b580      	push	{r7, lr}
   83326:	b082      	sub	sp, #8
   83328:	af00      	add	r7, sp, #0
   8332a:	6078      	str	r0, [r7, #4]
   8332c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8332e:	683b      	ldr	r3, [r7, #0]
   83330:	2b00      	cmp	r3, #0
   83332:	d108      	bne.n	83346 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83334:	4b09      	ldr	r3, [pc, #36]	; (8335c <pll_enable+0x38>)
   83336:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83338:	4a09      	ldr	r2, [pc, #36]	; (83360 <pll_enable+0x3c>)
   8333a:	687b      	ldr	r3, [r7, #4]
   8333c:	681b      	ldr	r3, [r3, #0]
   8333e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83342:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83344:	e005      	b.n	83352 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83346:	4a06      	ldr	r2, [pc, #24]	; (83360 <pll_enable+0x3c>)
   83348:	687b      	ldr	r3, [r7, #4]
   8334a:	681b      	ldr	r3, [r3, #0]
   8334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83350:	61d3      	str	r3, [r2, #28]
}
   83352:	bf00      	nop
   83354:	3708      	adds	r7, #8
   83356:	46bd      	mov	sp, r7
   83358:	bd80      	pop	{r7, pc}
   8335a:	bf00      	nop
   8335c:	000838c9 	.word	0x000838c9
   83360:	400e0600 	.word	0x400e0600

00083364 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83364:	b580      	push	{r7, lr}
   83366:	b082      	sub	sp, #8
   83368:	af00      	add	r7, sp, #0
   8336a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8336c:	687b      	ldr	r3, [r7, #4]
   8336e:	2b00      	cmp	r3, #0
   83370:	d103      	bne.n	8337a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83372:	4b05      	ldr	r3, [pc, #20]	; (83388 <pll_is_locked+0x24>)
   83374:	4798      	blx	r3
   83376:	4603      	mov	r3, r0
   83378:	e002      	b.n	83380 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8337a:	4b04      	ldr	r3, [pc, #16]	; (8338c <pll_is_locked+0x28>)
   8337c:	4798      	blx	r3
   8337e:	4603      	mov	r3, r0
	}
}
   83380:	4618      	mov	r0, r3
   83382:	3708      	adds	r7, #8
   83384:	46bd      	mov	sp, r7
   83386:	bd80      	pop	{r7, pc}
   83388:	000838e1 	.word	0x000838e1
   8338c:	000838f9 	.word	0x000838f9

00083390 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   83390:	b580      	push	{r7, lr}
   83392:	b082      	sub	sp, #8
   83394:	af00      	add	r7, sp, #0
   83396:	4603      	mov	r3, r0
   83398:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8339a:	79fb      	ldrb	r3, [r7, #7]
   8339c:	3b03      	subs	r3, #3
   8339e:	2b04      	cmp	r3, #4
   833a0:	d808      	bhi.n	833b4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   833a2:	79fb      	ldrb	r3, [r7, #7]
   833a4:	4618      	mov	r0, r3
   833a6:	4b06      	ldr	r3, [pc, #24]	; (833c0 <pll_enable_source+0x30>)
   833a8:	4798      	blx	r3
		osc_wait_ready(e_src);
   833aa:	79fb      	ldrb	r3, [r7, #7]
   833ac:	4618      	mov	r0, r3
   833ae:	4b05      	ldr	r3, [pc, #20]	; (833c4 <pll_enable_source+0x34>)
   833b0:	4798      	blx	r3
		break;
   833b2:	e000      	b.n	833b6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   833b4:	bf00      	nop
	}
}
   833b6:	bf00      	nop
   833b8:	3708      	adds	r7, #8
   833ba:	46bd      	mov	sp, r7
   833bc:	bd80      	pop	{r7, pc}
   833be:	bf00      	nop
   833c0:	00083121 	.word	0x00083121
   833c4:	0008328d 	.word	0x0008328d

000833c8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   833c8:	b580      	push	{r7, lr}
   833ca:	b082      	sub	sp, #8
   833cc:	af00      	add	r7, sp, #0
   833ce:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   833d0:	bf00      	nop
   833d2:	6878      	ldr	r0, [r7, #4]
   833d4:	4b04      	ldr	r3, [pc, #16]	; (833e8 <pll_wait_for_lock+0x20>)
   833d6:	4798      	blx	r3
   833d8:	4603      	mov	r3, r0
   833da:	2b00      	cmp	r3, #0
   833dc:	d0f9      	beq.n	833d2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   833de:	2300      	movs	r3, #0
}
   833e0:	4618      	mov	r0, r3
   833e2:	3708      	adds	r7, #8
   833e4:	46bd      	mov	sp, r7
   833e6:	bd80      	pop	{r7, pc}
   833e8:	00083365 	.word	0x00083365

000833ec <sysclk_get_main_hz>:
{
   833ec:	b580      	push	{r7, lr}
   833ee:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   833f0:	2006      	movs	r0, #6
   833f2:	4b04      	ldr	r3, [pc, #16]	; (83404 <sysclk_get_main_hz+0x18>)
   833f4:	4798      	blx	r3
   833f6:	4602      	mov	r2, r0
   833f8:	4613      	mov	r3, r2
   833fa:	00db      	lsls	r3, r3, #3
   833fc:	1a9b      	subs	r3, r3, r2
   833fe:	005b      	lsls	r3, r3, #1
}
   83400:	4618      	mov	r0, r3
   83402:	bd80      	pop	{r7, pc}
   83404:	00083219 	.word	0x00083219

00083408 <sysclk_get_cpu_hz>:
{
   83408:	b580      	push	{r7, lr}
   8340a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8340c:	4b02      	ldr	r3, [pc, #8]	; (83418 <sysclk_get_cpu_hz+0x10>)
   8340e:	4798      	blx	r3
   83410:	4603      	mov	r3, r0
   83412:	085b      	lsrs	r3, r3, #1
}
   83414:	4618      	mov	r0, r3
   83416:	bd80      	pop	{r7, pc}
   83418:	000833ed 	.word	0x000833ed

0008341c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8341c:	b590      	push	{r4, r7, lr}
   8341e:	b083      	sub	sp, #12
   83420:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83422:	4811      	ldr	r0, [pc, #68]	; (83468 <sysclk_init+0x4c>)
   83424:	4b11      	ldr	r3, [pc, #68]	; (8346c <sysclk_init+0x50>)
   83426:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83428:	2006      	movs	r0, #6
   8342a:	4b11      	ldr	r3, [pc, #68]	; (83470 <sysclk_init+0x54>)
   8342c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8342e:	1d38      	adds	r0, r7, #4
   83430:	230e      	movs	r3, #14
   83432:	2201      	movs	r2, #1
   83434:	2106      	movs	r1, #6
   83436:	4c0f      	ldr	r4, [pc, #60]	; (83474 <sysclk_init+0x58>)
   83438:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8343a:	1d3b      	adds	r3, r7, #4
   8343c:	2100      	movs	r1, #0
   8343e:	4618      	mov	r0, r3
   83440:	4b0d      	ldr	r3, [pc, #52]	; (83478 <sysclk_init+0x5c>)
   83442:	4798      	blx	r3
		pll_wait_for_lock(0);
   83444:	2000      	movs	r0, #0
   83446:	4b0d      	ldr	r3, [pc, #52]	; (8347c <sysclk_init+0x60>)
   83448:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8344a:	2010      	movs	r0, #16
   8344c:	4b0c      	ldr	r3, [pc, #48]	; (83480 <sysclk_init+0x64>)
   8344e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83450:	4b0c      	ldr	r3, [pc, #48]	; (83484 <sysclk_init+0x68>)
   83452:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83454:	4b0c      	ldr	r3, [pc, #48]	; (83488 <sysclk_init+0x6c>)
   83456:	4798      	blx	r3
   83458:	4603      	mov	r3, r0
   8345a:	4618      	mov	r0, r3
   8345c:	4b03      	ldr	r3, [pc, #12]	; (8346c <sysclk_init+0x50>)
   8345e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83460:	bf00      	nop
   83462:	370c      	adds	r7, #12
   83464:	46bd      	mov	sp, r7
   83466:	bd90      	pop	{r4, r7, pc}
   83468:	0501bd00 	.word	0x0501bd00
   8346c:	200700d1 	.word	0x200700d1
   83470:	00083391 	.word	0x00083391
   83474:	000832b9 	.word	0x000832b9
   83478:	00083325 	.word	0x00083325
   8347c:	000833c9 	.word	0x000833c9
   83480:	000836dd 	.word	0x000836dd
   83484:	0008406d 	.word	0x0008406d
   83488:	00083409 	.word	0x00083409

0008348c <dmac_init>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_init(
		Dmac *p_dmac)
{
   8348c:	b580      	push	{r7, lr}
   8348e:	b082      	sub	sp, #8
   83490:	af00      	add	r7, sp, #0
   83492:	6078      	str	r0, [r7, #4]
	dmac_disable(p_dmac);
   83494:	6878      	ldr	r0, [r7, #4]
   83496:	4b03      	ldr	r3, [pc, #12]	; (834a4 <dmac_init+0x18>)
   83498:	4798      	blx	r3
}
   8349a:	bf00      	nop
   8349c:	3708      	adds	r7, #8
   8349e:	46bd      	mov	sp, r7
   834a0:	bd80      	pop	{r7, pc}
   834a2:	bf00      	nop
   834a4:	000834e7 	.word	0x000834e7

000834a8 <dmac_set_priority_mode>:
 * \param[in] mode       \ref dmac_priority_mode_t "Priority mode"
 */
void dmac_set_priority_mode(
		Dmac *p_dmac,
		dmac_priority_mode_t mode)
{
   834a8:	b480      	push	{r7}
   834aa:	b083      	sub	sp, #12
   834ac:	af00      	add	r7, sp, #0
   834ae:	6078      	str	r0, [r7, #4]
   834b0:	460b      	mov	r3, r1
   834b2:	70fb      	strb	r3, [r7, #3]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
   834b4:	687b      	ldr	r3, [r7, #4]
   834b6:	681b      	ldr	r3, [r3, #0]
   834b8:	f023 0210 	bic.w	r2, r3, #16
   834bc:	78fb      	ldrb	r3, [r7, #3]
   834be:	431a      	orrs	r2, r3
   834c0:	687b      	ldr	r3, [r7, #4]
   834c2:	601a      	str	r2, [r3, #0]
}
   834c4:	bf00      	nop
   834c6:	370c      	adds	r7, #12
   834c8:	46bd      	mov	sp, r7
   834ca:	bc80      	pop	{r7}
   834cc:	4770      	bx	lr

000834ce <dmac_enable>:
 *
 * \param[out] p_dmac Module hardware register base address pointer
 */
void dmac_enable(
		Dmac *p_dmac)
{
   834ce:	b480      	push	{r7}
   834d0:	b083      	sub	sp, #12
   834d2:	af00      	add	r7, sp, #0
   834d4:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   834d6:	687b      	ldr	r3, [r7, #4]
   834d8:	2201      	movs	r2, #1
   834da:	605a      	str	r2, [r3, #4]
}
   834dc:	bf00      	nop
   834de:	370c      	adds	r7, #12
   834e0:	46bd      	mov	sp, r7
   834e2:	bc80      	pop	{r7}
   834e4:	4770      	bx	lr

000834e6 <dmac_disable>:
 *
 * \param[in,out] p_dmac Module hardware register base address pointer
 */
void dmac_disable(
		Dmac *p_dmac)
{
   834e6:	b480      	push	{r7}
   834e8:	b083      	sub	sp, #12
   834ea:	af00      	add	r7, sp, #0
   834ec:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
   834ee:	687b      	ldr	r3, [r7, #4]
   834f0:	685b      	ldr	r3, [r3, #4]
   834f2:	f023 0201 	bic.w	r2, r3, #1
   834f6:	687b      	ldr	r3, [r7, #4]
   834f8:	605a      	str	r2, [r3, #4]
}
   834fa:	bf00      	nop
   834fc:	370c      	adds	r7, #12
   834fe:	46bd      	mov	sp, r7
   83500:	bc80      	pop	{r7}
   83502:	4770      	bx	lr

00083504 <dmac_enable_interrupt>:
 * </table>
 */
void dmac_enable_interrupt(
		Dmac *p_dmac,
		uint32_t ul_mask)
{
   83504:	b480      	push	{r7}
   83506:	b083      	sub	sp, #12
   83508:	af00      	add	r7, sp, #0
   8350a:	6078      	str	r0, [r7, #4]
   8350c:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
   8350e:	687b      	ldr	r3, [r7, #4]
   83510:	683a      	ldr	r2, [r7, #0]
   83512:	619a      	str	r2, [r3, #24]
}
   83514:	bf00      	nop
   83516:	370c      	adds	r7, #12
   83518:	46bd      	mov	sp, r7
   8351a:	bc80      	pop	{r7}
   8351c:	4770      	bx	lr

0008351e <dmac_get_status>:
 * Buffer Transfer and Chained Buffer Transfer Status Register" in the
 * device-specific datasheet for more information.
 */
uint32_t dmac_get_status(
		Dmac *p_dmac)
{
   8351e:	b480      	push	{r7}
   83520:	b083      	sub	sp, #12
   83522:	af00      	add	r7, sp, #0
   83524:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
   83526:	687b      	ldr	r3, [r7, #4]
   83528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   8352a:	4618      	mov	r0, r3
   8352c:	370c      	adds	r7, #12
   8352e:	46bd      	mov	sp, r7
   83530:	bc80      	pop	{r7}
   83532:	4770      	bx	lr

00083534 <dmac_channel_enable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_enable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83534:	b480      	push	{r7}
   83536:	b083      	sub	sp, #12
   83538:	af00      	add	r7, sp, #0
   8353a:	6078      	str	r0, [r7, #4]
   8353c:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8353e:	2201      	movs	r2, #1
   83540:	683b      	ldr	r3, [r7, #0]
   83542:	409a      	lsls	r2, r3
   83544:	687b      	ldr	r3, [r7, #4]
   83546:	629a      	str	r2, [r3, #40]	; 0x28
}
   83548:	bf00      	nop
   8354a:	370c      	adds	r7, #12
   8354c:	46bd      	mov	sp, r7
   8354e:	bc80      	pop	{r7}
   83550:	4770      	bx	lr

00083552 <dmac_channel_disable>:
 * \param[in] ul_num  DMA Channel number (range 0 to 3)
 */
void dmac_channel_disable(
		Dmac *p_dmac,
		uint32_t ul_num)
{
   83552:	b480      	push	{r7}
   83554:	b083      	sub	sp, #12
   83556:	af00      	add	r7, sp, #0
   83558:	6078      	str	r0, [r7, #4]
   8355a:	6039      	str	r1, [r7, #0]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   8355c:	2201      	movs	r2, #1
   8355e:	683b      	ldr	r3, [r7, #0]
   83560:	409a      	lsls	r2, r3
   83562:	687b      	ldr	r3, [r7, #4]
   83564:	62da      	str	r2, [r3, #44]	; 0x2c
}
   83566:	bf00      	nop
   83568:	370c      	adds	r7, #12
   8356a:	46bd      	mov	sp, r7
   8356c:	bc80      	pop	{r7}
   8356e:	4770      	bx	lr

00083570 <dmac_channel_set_source_addr>:
 */
void dmac_channel_set_source_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_addr)
{
   83570:	b480      	push	{r7}
   83572:	b085      	sub	sp, #20
   83574:	af00      	add	r7, sp, #0
   83576:	60f8      	str	r0, [r7, #12]
   83578:	60b9      	str	r1, [r7, #8]
   8357a:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   8357c:	68f9      	ldr	r1, [r7, #12]
   8357e:	68ba      	ldr	r2, [r7, #8]
   83580:	4613      	mov	r3, r2
   83582:	009b      	lsls	r3, r3, #2
   83584:	4413      	add	r3, r2
   83586:	00db      	lsls	r3, r3, #3
   83588:	440b      	add	r3, r1
   8358a:	333c      	adds	r3, #60	; 0x3c
   8358c:	687a      	ldr	r2, [r7, #4]
   8358e:	601a      	str	r2, [r3, #0]
}
   83590:	bf00      	nop
   83592:	3714      	adds	r7, #20
   83594:	46bd      	mov	sp, r7
   83596:	bc80      	pop	{r7}
   83598:	4770      	bx	lr

0008359a <dmac_channel_set_destination_addr>:
 */
void dmac_channel_set_destination_addr(
		Dmac *p_dmac, 
		uint32_t ul_num,
		uint32_t ul_addr)
{
   8359a:	b480      	push	{r7}
   8359c:	b085      	sub	sp, #20
   8359e:	af00      	add	r7, sp, #0
   835a0:	60f8      	str	r0, [r7, #12]
   835a2:	60b9      	str	r1, [r7, #8]
   835a4:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   835a6:	68f9      	ldr	r1, [r7, #12]
   835a8:	68ba      	ldr	r2, [r7, #8]
   835aa:	4613      	mov	r3, r2
   835ac:	009b      	lsls	r3, r3, #2
   835ae:	4413      	add	r3, r2
   835b0:	00db      	lsls	r3, r3, #3
   835b2:	440b      	add	r3, r1
   835b4:	3340      	adds	r3, #64	; 0x40
   835b6:	687a      	ldr	r2, [r7, #4]
   835b8:	601a      	str	r2, [r3, #0]
}
   835ba:	bf00      	nop
   835bc:	3714      	adds	r7, #20
   835be:	46bd      	mov	sp, r7
   835c0:	bc80      	pop	{r7}
   835c2:	4770      	bx	lr

000835c4 <dmac_channel_set_descriptor_addr>:
 */
void dmac_channel_set_descriptor_addr(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_desc)
{
   835c4:	b480      	push	{r7}
   835c6:	b085      	sub	sp, #20
   835c8:	af00      	add	r7, sp, #0
   835ca:	60f8      	str	r0, [r7, #12]
   835cc:	60b9      	str	r1, [r7, #8]
   835ce:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   835d0:	68f9      	ldr	r1, [r7, #12]
   835d2:	68ba      	ldr	r2, [r7, #8]
   835d4:	4613      	mov	r3, r2
   835d6:	009b      	lsls	r3, r3, #2
   835d8:	4413      	add	r3, r2
   835da:	00db      	lsls	r3, r3, #3
   835dc:	440b      	add	r3, r1
   835de:	3344      	adds	r3, #68	; 0x44
   835e0:	687a      	ldr	r2, [r7, #4]
   835e2:	601a      	str	r2, [r3, #0]
}
   835e4:	bf00      	nop
   835e6:	3714      	adds	r7, #20
   835e8:	46bd      	mov	sp, r7
   835ea:	bc80      	pop	{r7}
   835ec:	4770      	bx	lr

000835ee <dmac_channel_set_ctrlA>:
 */
void dmac_channel_set_ctrlA(
		Dmac *p_dmac, 
		uint32_t ul_num, 
		uint32_t ul_ctrlA)
{
   835ee:	b480      	push	{r7}
   835f0:	b085      	sub	sp, #20
   835f2:	af00      	add	r7, sp, #0
   835f4:	60f8      	str	r0, [r7, #12]
   835f6:	60b9      	str	r1, [r7, #8]
   835f8:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   835fa:	68f9      	ldr	r1, [r7, #12]
   835fc:	68ba      	ldr	r2, [r7, #8]
   835fe:	4613      	mov	r3, r2
   83600:	009b      	lsls	r3, r3, #2
   83602:	4413      	add	r3, r2
   83604:	00db      	lsls	r3, r3, #3
   83606:	440b      	add	r3, r1
   83608:	3348      	adds	r3, #72	; 0x48
   8360a:	687a      	ldr	r2, [r7, #4]
   8360c:	601a      	str	r2, [r3, #0]
}
   8360e:	bf00      	nop
   83610:	3714      	adds	r7, #20
   83612:	46bd      	mov	sp, r7
   83614:	bc80      	pop	{r7}
   83616:	4770      	bx	lr

00083618 <dmac_channel_set_ctrlB>:
 */
void dmac_channel_set_ctrlB(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_ctrlB)
{
   83618:	b480      	push	{r7}
   8361a:	b085      	sub	sp, #20
   8361c:	af00      	add	r7, sp, #0
   8361e:	60f8      	str	r0, [r7, #12]
   83620:	60b9      	str	r1, [r7, #8]
   83622:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83624:	68f9      	ldr	r1, [r7, #12]
   83626:	68ba      	ldr	r2, [r7, #8]
   83628:	4613      	mov	r3, r2
   8362a:	009b      	lsls	r3, r3, #2
   8362c:	4413      	add	r3, r2
   8362e:	00db      	lsls	r3, r3, #3
   83630:	440b      	add	r3, r1
   83632:	334c      	adds	r3, #76	; 0x4c
   83634:	687a      	ldr	r2, [r7, #4]
   83636:	601a      	str	r2, [r3, #0]
}
   83638:	bf00      	nop
   8363a:	3714      	adds	r7, #20
   8363c:	46bd      	mov	sp, r7
   8363e:	bc80      	pop	{r7}
   83640:	4770      	bx	lr

00083642 <dmac_channel_set_configuration>:
 */
void dmac_channel_set_configuration(
		Dmac *p_dmac,
		uint32_t ul_num,
		uint32_t ul_cfg)
{
   83642:	b480      	push	{r7}
   83644:	b085      	sub	sp, #20
   83646:	af00      	add	r7, sp, #0
   83648:	60f8      	str	r0, [r7, #12]
   8364a:	60b9      	str	r1, [r7, #8]
   8364c:	607a      	str	r2, [r7, #4]
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8364e:	68f9      	ldr	r1, [r7, #12]
   83650:	68ba      	ldr	r2, [r7, #8]
   83652:	4613      	mov	r3, r2
   83654:	009b      	lsls	r3, r3, #2
   83656:	4413      	add	r3, r2
   83658:	00db      	lsls	r3, r3, #3
   8365a:	440b      	add	r3, r1
   8365c:	3350      	adds	r3, #80	; 0x50
   8365e:	687a      	ldr	r2, [r7, #4]
   83660:	601a      	str	r2, [r3, #0]
}
   83662:	bf00      	nop
   83664:	3714      	adds	r7, #20
   83666:	46bd      	mov	sp, r7
   83668:	bc80      	pop	{r7}
   8366a:	4770      	bx	lr

0008366c <dmac_channel_single_buf_transfer_init>:
 */
void dmac_channel_single_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
   8366c:	b580      	push	{r7, lr}
   8366e:	b084      	sub	sp, #16
   83670:	af00      	add	r7, sp, #0
   83672:	60f8      	str	r0, [r7, #12]
   83674:	60b9      	str	r1, [r7, #8]
   83676:	607a      	str	r2, [r7, #4]
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   83678:	68fb      	ldr	r3, [r7, #12]
   8367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   8367c:	687b      	ldr	r3, [r7, #4]
   8367e:	681b      	ldr	r3, [r3, #0]
   83680:	461a      	mov	r2, r3
   83682:	68b9      	ldr	r1, [r7, #8]
   83684:	68f8      	ldr	r0, [r7, #12]
   83686:	4b10      	ldr	r3, [pc, #64]	; (836c8 <dmac_channel_single_buf_transfer_init+0x5c>)
   83688:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   8368a:	687b      	ldr	r3, [r7, #4]
   8368c:	685b      	ldr	r3, [r3, #4]
   8368e:	461a      	mov	r2, r3
   83690:	68b9      	ldr	r1, [r7, #8]
   83692:	68f8      	ldr	r0, [r7, #12]
   83694:	4b0d      	ldr	r3, [pc, #52]	; (836cc <dmac_channel_single_buf_transfer_init+0x60>)
   83696:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   83698:	2200      	movs	r2, #0
   8369a:	68b9      	ldr	r1, [r7, #8]
   8369c:	68f8      	ldr	r0, [r7, #12]
   8369e:	4b0c      	ldr	r3, [pc, #48]	; (836d0 <dmac_channel_single_buf_transfer_init+0x64>)
   836a0:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   836a2:	687b      	ldr	r3, [r7, #4]
   836a4:	689b      	ldr	r3, [r3, #8]
   836a6:	461a      	mov	r2, r3
   836a8:	68b9      	ldr	r1, [r7, #8]
   836aa:	68f8      	ldr	r0, [r7, #12]
   836ac:	4b09      	ldr	r3, [pc, #36]	; (836d4 <dmac_channel_single_buf_transfer_init+0x68>)
   836ae:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   836b0:	687b      	ldr	r3, [r7, #4]
   836b2:	68db      	ldr	r3, [r3, #12]
   836b4:	461a      	mov	r2, r3
   836b6:	68b9      	ldr	r1, [r7, #8]
   836b8:	68f8      	ldr	r0, [r7, #12]
   836ba:	4b07      	ldr	r3, [pc, #28]	; (836d8 <dmac_channel_single_buf_transfer_init+0x6c>)
   836bc:	4798      	blx	r3
}
   836be:	bf00      	nop
   836c0:	3710      	adds	r7, #16
   836c2:	46bd      	mov	sp, r7
   836c4:	bd80      	pop	{r7, pc}
   836c6:	bf00      	nop
   836c8:	00083571 	.word	0x00083571
   836cc:	0008359b 	.word	0x0008359b
   836d0:	000835c5 	.word	0x000835c5
   836d4:	000835ef 	.word	0x000835ef
   836d8:	00083619 	.word	0x00083619

000836dc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   836dc:	b480      	push	{r7}
   836de:	b085      	sub	sp, #20
   836e0:	af00      	add	r7, sp, #0
   836e2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   836e4:	491c      	ldr	r1, [pc, #112]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   836e6:	4b1c      	ldr	r3, [pc, #112]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   836e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   836ee:	687b      	ldr	r3, [r7, #4]
   836f0:	4313      	orrs	r3, r2
   836f2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   836f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836f8:	60fb      	str	r3, [r7, #12]
   836fa:	e007      	b.n	8370c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   836fc:	68fb      	ldr	r3, [r7, #12]
   836fe:	2b00      	cmp	r3, #0
   83700:	d101      	bne.n	83706 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83702:	2301      	movs	r3, #1
   83704:	e023      	b.n	8374e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83706:	68fb      	ldr	r3, [r7, #12]
   83708:	3b01      	subs	r3, #1
   8370a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8370c:	4b12      	ldr	r3, [pc, #72]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   8370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83710:	f003 0308 	and.w	r3, r3, #8
   83714:	2b00      	cmp	r3, #0
   83716:	d0f1      	beq.n	836fc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83718:	4a0f      	ldr	r2, [pc, #60]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   8371a:	4b0f      	ldr	r3, [pc, #60]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   8371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8371e:	f023 0303 	bic.w	r3, r3, #3
   83722:	f043 0302 	orr.w	r3, r3, #2
   83726:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83728:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8372c:	60fb      	str	r3, [r7, #12]
   8372e:	e007      	b.n	83740 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83730:	68fb      	ldr	r3, [r7, #12]
   83732:	2b00      	cmp	r3, #0
   83734:	d101      	bne.n	8373a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83736:	2301      	movs	r3, #1
   83738:	e009      	b.n	8374e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	3b01      	subs	r3, #1
   8373e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83740:	4b05      	ldr	r3, [pc, #20]	; (83758 <pmc_switch_mck_to_pllack+0x7c>)
   83742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83744:	f003 0308 	and.w	r3, r3, #8
   83748:	2b00      	cmp	r3, #0
   8374a:	d0f1      	beq.n	83730 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   8374c:	2300      	movs	r3, #0
}
   8374e:	4618      	mov	r0, r3
   83750:	3714      	adds	r7, #20
   83752:	46bd      	mov	sp, r7
   83754:	bc80      	pop	{r7}
   83756:	4770      	bx	lr
   83758:	400e0600 	.word	0x400e0600

0008375c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8375c:	b480      	push	{r7}
   8375e:	b083      	sub	sp, #12
   83760:	af00      	add	r7, sp, #0
   83762:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83764:	687b      	ldr	r3, [r7, #4]
   83766:	2b01      	cmp	r3, #1
   83768:	d107      	bne.n	8377a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8376a:	4a08      	ldr	r2, [pc, #32]	; (8378c <pmc_switch_sclk_to_32kxtal+0x30>)
   8376c:	4b07      	ldr	r3, [pc, #28]	; (8378c <pmc_switch_sclk_to_32kxtal+0x30>)
   8376e:	689b      	ldr	r3, [r3, #8]
   83770:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83778:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8377a:	4b04      	ldr	r3, [pc, #16]	; (8378c <pmc_switch_sclk_to_32kxtal+0x30>)
   8377c:	4a04      	ldr	r2, [pc, #16]	; (83790 <pmc_switch_sclk_to_32kxtal+0x34>)
   8377e:	601a      	str	r2, [r3, #0]
}
   83780:	bf00      	nop
   83782:	370c      	adds	r7, #12
   83784:	46bd      	mov	sp, r7
   83786:	bc80      	pop	{r7}
   83788:	4770      	bx	lr
   8378a:	bf00      	nop
   8378c:	400e1a10 	.word	0x400e1a10
   83790:	a5000008 	.word	0xa5000008

00083794 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83794:	b480      	push	{r7}
   83796:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83798:	4b09      	ldr	r3, [pc, #36]	; (837c0 <pmc_osc_is_ready_32kxtal+0x2c>)
   8379a:	695b      	ldr	r3, [r3, #20]
   8379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   837a0:	2b00      	cmp	r3, #0
   837a2:	d007      	beq.n	837b4 <pmc_osc_is_ready_32kxtal+0x20>
   837a4:	4b07      	ldr	r3, [pc, #28]	; (837c4 <pmc_osc_is_ready_32kxtal+0x30>)
   837a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   837ac:	2b00      	cmp	r3, #0
   837ae:	d001      	beq.n	837b4 <pmc_osc_is_ready_32kxtal+0x20>
   837b0:	2301      	movs	r3, #1
   837b2:	e000      	b.n	837b6 <pmc_osc_is_ready_32kxtal+0x22>
   837b4:	2300      	movs	r3, #0
}
   837b6:	4618      	mov	r0, r3
   837b8:	46bd      	mov	sp, r7
   837ba:	bc80      	pop	{r7}
   837bc:	4770      	bx	lr
   837be:	bf00      	nop
   837c0:	400e1a10 	.word	0x400e1a10
   837c4:	400e0600 	.word	0x400e0600

000837c8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   837c8:	b480      	push	{r7}
   837ca:	b083      	sub	sp, #12
   837cc:	af00      	add	r7, sp, #0
   837ce:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   837d0:	4a18      	ldr	r2, [pc, #96]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   837d2:	4b18      	ldr	r3, [pc, #96]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   837d4:	6a1b      	ldr	r3, [r3, #32]
   837d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   837da:	f043 0308 	orr.w	r3, r3, #8
   837de:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   837e0:	bf00      	nop
   837e2:	4b14      	ldr	r3, [pc, #80]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   837e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   837ea:	2b00      	cmp	r3, #0
   837ec:	d0f9      	beq.n	837e2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   837ee:	4911      	ldr	r1, [pc, #68]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   837f0:	4b10      	ldr	r3, [pc, #64]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   837f2:	6a1b      	ldr	r3, [r3, #32]
   837f4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   837f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   837fc:	687a      	ldr	r2, [r7, #4]
   837fe:	4313      	orrs	r3, r2
   83800:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83804:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83806:	bf00      	nop
   83808:	4b0a      	ldr	r3, [pc, #40]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   8380a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83810:	2b00      	cmp	r3, #0
   83812:	d0f9      	beq.n	83808 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83814:	4a07      	ldr	r2, [pc, #28]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   83816:	4b07      	ldr	r3, [pc, #28]	; (83834 <pmc_switch_mainck_to_fastrc+0x6c>)
   83818:	6a1b      	ldr	r3, [r3, #32]
   8381a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83822:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83826:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   83828:	bf00      	nop
   8382a:	370c      	adds	r7, #12
   8382c:	46bd      	mov	sp, r7
   8382e:	bc80      	pop	{r7}
   83830:	4770      	bx	lr
   83832:	bf00      	nop
   83834:	400e0600 	.word	0x400e0600

00083838 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83838:	b480      	push	{r7}
   8383a:	b083      	sub	sp, #12
   8383c:	af00      	add	r7, sp, #0
   8383e:	6078      	str	r0, [r7, #4]
   83840:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83842:	687b      	ldr	r3, [r7, #4]
   83844:	2b00      	cmp	r3, #0
   83846:	d008      	beq.n	8385a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83848:	4916      	ldr	r1, [pc, #88]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8384a:	4b16      	ldr	r3, [pc, #88]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8384c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8384e:	4a16      	ldr	r2, [pc, #88]	; (838a8 <pmc_switch_mainck_to_xtal+0x70>)
   83850:	401a      	ands	r2, r3
   83852:	4b16      	ldr	r3, [pc, #88]	; (838ac <pmc_switch_mainck_to_xtal+0x74>)
   83854:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83856:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   83858:	e01e      	b.n	83898 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8385a:	4912      	ldr	r1, [pc, #72]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8385c:	4b11      	ldr	r3, [pc, #68]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8385e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83860:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83864:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83868:	683a      	ldr	r2, [r7, #0]
   8386a:	0212      	lsls	r2, r2, #8
   8386c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8386e:	4313      	orrs	r3, r2
   83870:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83874:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83878:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8387a:	bf00      	nop
   8387c:	4b09      	ldr	r3, [pc, #36]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8387e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83880:	f003 0301 	and.w	r3, r3, #1
   83884:	2b00      	cmp	r3, #0
   83886:	d0f9      	beq.n	8387c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83888:	4a06      	ldr	r2, [pc, #24]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8388a:	4b06      	ldr	r3, [pc, #24]	; (838a4 <pmc_switch_mainck_to_xtal+0x6c>)
   8388c:	6a1b      	ldr	r3, [r3, #32]
   8388e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83896:	6213      	str	r3, [r2, #32]
}
   83898:	bf00      	nop
   8389a:	370c      	adds	r7, #12
   8389c:	46bd      	mov	sp, r7
   8389e:	bc80      	pop	{r7}
   838a0:	4770      	bx	lr
   838a2:	bf00      	nop
   838a4:	400e0600 	.word	0x400e0600
   838a8:	fec8fffc 	.word	0xfec8fffc
   838ac:	01370002 	.word	0x01370002

000838b0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   838b0:	b480      	push	{r7}
   838b2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   838b4:	4b03      	ldr	r3, [pc, #12]	; (838c4 <pmc_osc_is_ready_mainck+0x14>)
   838b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   838bc:	4618      	mov	r0, r3
   838be:	46bd      	mov	sp, r7
   838c0:	bc80      	pop	{r7}
   838c2:	4770      	bx	lr
   838c4:	400e0600 	.word	0x400e0600

000838c8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   838c8:	b480      	push	{r7}
   838ca:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   838cc:	4b03      	ldr	r3, [pc, #12]	; (838dc <pmc_disable_pllack+0x14>)
   838ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   838d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   838d4:	bf00      	nop
   838d6:	46bd      	mov	sp, r7
   838d8:	bc80      	pop	{r7}
   838da:	4770      	bx	lr
   838dc:	400e0600 	.word	0x400e0600

000838e0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   838e0:	b480      	push	{r7}
   838e2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   838e4:	4b03      	ldr	r3, [pc, #12]	; (838f4 <pmc_is_locked_pllack+0x14>)
   838e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838e8:	f003 0302 	and.w	r3, r3, #2
}
   838ec:	4618      	mov	r0, r3
   838ee:	46bd      	mov	sp, r7
   838f0:	bc80      	pop	{r7}
   838f2:	4770      	bx	lr
   838f4:	400e0600 	.word	0x400e0600

000838f8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   838f8:	b480      	push	{r7}
   838fa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   838fc:	4b03      	ldr	r3, [pc, #12]	; (8390c <pmc_is_locked_upll+0x14>)
   838fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83900:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83904:	4618      	mov	r0, r3
   83906:	46bd      	mov	sp, r7
   83908:	bc80      	pop	{r7}
   8390a:	4770      	bx	lr
   8390c:	400e0600 	.word	0x400e0600

00083910 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83910:	b480      	push	{r7}
   83912:	b083      	sub	sp, #12
   83914:	af00      	add	r7, sp, #0
   83916:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83918:	687b      	ldr	r3, [r7, #4]
   8391a:	2b2c      	cmp	r3, #44	; 0x2c
   8391c:	d901      	bls.n	83922 <pmc_enable_periph_clk+0x12>
		return 1;
   8391e:	2301      	movs	r3, #1
   83920:	e02f      	b.n	83982 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83922:	687b      	ldr	r3, [r7, #4]
   83924:	2b1f      	cmp	r3, #31
   83926:	d813      	bhi.n	83950 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83928:	4b18      	ldr	r3, [pc, #96]	; (8398c <pmc_enable_periph_clk+0x7c>)
   8392a:	699a      	ldr	r2, [r3, #24]
   8392c:	2101      	movs	r1, #1
   8392e:	687b      	ldr	r3, [r7, #4]
   83930:	fa01 f303 	lsl.w	r3, r1, r3
   83934:	401a      	ands	r2, r3
   83936:	2101      	movs	r1, #1
   83938:	687b      	ldr	r3, [r7, #4]
   8393a:	fa01 f303 	lsl.w	r3, r1, r3
   8393e:	429a      	cmp	r2, r3
   83940:	d01e      	beq.n	83980 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83942:	4a12      	ldr	r2, [pc, #72]	; (8398c <pmc_enable_periph_clk+0x7c>)
   83944:	2101      	movs	r1, #1
   83946:	687b      	ldr	r3, [r7, #4]
   83948:	fa01 f303 	lsl.w	r3, r1, r3
   8394c:	6113      	str	r3, [r2, #16]
   8394e:	e017      	b.n	83980 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83950:	687b      	ldr	r3, [r7, #4]
   83952:	3b20      	subs	r3, #32
   83954:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83956:	4b0d      	ldr	r3, [pc, #52]	; (8398c <pmc_enable_periph_clk+0x7c>)
   83958:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8395c:	2101      	movs	r1, #1
   8395e:	687b      	ldr	r3, [r7, #4]
   83960:	fa01 f303 	lsl.w	r3, r1, r3
   83964:	401a      	ands	r2, r3
   83966:	2101      	movs	r1, #1
   83968:	687b      	ldr	r3, [r7, #4]
   8396a:	fa01 f303 	lsl.w	r3, r1, r3
   8396e:	429a      	cmp	r2, r3
   83970:	d006      	beq.n	83980 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83972:	4a06      	ldr	r2, [pc, #24]	; (8398c <pmc_enable_periph_clk+0x7c>)
   83974:	2101      	movs	r1, #1
   83976:	687b      	ldr	r3, [r7, #4]
   83978:	fa01 f303 	lsl.w	r3, r1, r3
   8397c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83980:	2300      	movs	r3, #0
}
   83982:	4618      	mov	r0, r3
   83984:	370c      	adds	r7, #12
   83986:	46bd      	mov	sp, r7
   83988:	bc80      	pop	{r7}
   8398a:	4770      	bx	lr
   8398c:	400e0600 	.word	0x400e0600

00083990 <osc_get_rate>:
{
   83990:	b480      	push	{r7}
   83992:	b083      	sub	sp, #12
   83994:	af00      	add	r7, sp, #0
   83996:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83998:	687b      	ldr	r3, [r7, #4]
   8399a:	2b07      	cmp	r3, #7
   8399c:	d825      	bhi.n	839ea <osc_get_rate+0x5a>
   8399e:	a201      	add	r2, pc, #4	; (adr r2, 839a4 <osc_get_rate+0x14>)
   839a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   839a4:	000839c5 	.word	0x000839c5
   839a8:	000839cb 	.word	0x000839cb
   839ac:	000839d1 	.word	0x000839d1
   839b0:	000839d7 	.word	0x000839d7
   839b4:	000839db 	.word	0x000839db
   839b8:	000839df 	.word	0x000839df
   839bc:	000839e3 	.word	0x000839e3
   839c0:	000839e7 	.word	0x000839e7
		return OSC_SLCK_32K_RC_HZ;
   839c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   839c8:	e010      	b.n	839ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   839ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   839ce:	e00d      	b.n	839ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   839d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   839d4:	e00a      	b.n	839ec <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   839d6:	4b08      	ldr	r3, [pc, #32]	; (839f8 <osc_get_rate+0x68>)
   839d8:	e008      	b.n	839ec <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   839da:	4b08      	ldr	r3, [pc, #32]	; (839fc <osc_get_rate+0x6c>)
   839dc:	e006      	b.n	839ec <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   839de:	4b08      	ldr	r3, [pc, #32]	; (83a00 <osc_get_rate+0x70>)
   839e0:	e004      	b.n	839ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   839e2:	4b07      	ldr	r3, [pc, #28]	; (83a00 <osc_get_rate+0x70>)
   839e4:	e002      	b.n	839ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   839e6:	4b06      	ldr	r3, [pc, #24]	; (83a00 <osc_get_rate+0x70>)
   839e8:	e000      	b.n	839ec <osc_get_rate+0x5c>
	return 0;
   839ea:	2300      	movs	r3, #0
}
   839ec:	4618      	mov	r0, r3
   839ee:	370c      	adds	r7, #12
   839f0:	46bd      	mov	sp, r7
   839f2:	bc80      	pop	{r7}
   839f4:	4770      	bx	lr
   839f6:	bf00      	nop
   839f8:	003d0900 	.word	0x003d0900
   839fc:	007a1200 	.word	0x007a1200
   83a00:	00b71b00 	.word	0x00b71b00

00083a04 <sysclk_get_main_hz>:
{
   83a04:	b580      	push	{r7, lr}
   83a06:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83a08:	2006      	movs	r0, #6
   83a0a:	4b04      	ldr	r3, [pc, #16]	; (83a1c <sysclk_get_main_hz+0x18>)
   83a0c:	4798      	blx	r3
   83a0e:	4602      	mov	r2, r0
   83a10:	4613      	mov	r3, r2
   83a12:	00db      	lsls	r3, r3, #3
   83a14:	1a9b      	subs	r3, r3, r2
   83a16:	005b      	lsls	r3, r3, #1
}
   83a18:	4618      	mov	r0, r3
   83a1a:	bd80      	pop	{r7, pc}
   83a1c:	00083991 	.word	0x00083991

00083a20 <sysclk_get_cpu_hz>:
{
   83a20:	b580      	push	{r7, lr}
   83a22:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83a24:	4b02      	ldr	r3, [pc, #8]	; (83a30 <sysclk_get_cpu_hz+0x10>)
   83a26:	4798      	blx	r3
   83a28:	4603      	mov	r3, r0
   83a2a:	085b      	lsrs	r3, r3, #1
}
   83a2c:	4618      	mov	r0, r3
   83a2e:	bd80      	pop	{r7, pc}
   83a30:	00083a05 	.word	0x00083a05

00083a34 <sysclk_enable_peripheral_clock>:
{
   83a34:	b580      	push	{r7, lr}
   83a36:	b082      	sub	sp, #8
   83a38:	af00      	add	r7, sp, #0
   83a3a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83a3c:	6878      	ldr	r0, [r7, #4]
   83a3e:	4b03      	ldr	r3, [pc, #12]	; (83a4c <sysclk_enable_peripheral_clock+0x18>)
   83a40:	4798      	blx	r3
}
   83a42:	bf00      	nop
   83a44:	3708      	adds	r7, #8
   83a46:	46bd      	mov	sp, r7
   83a48:	bd80      	pop	{r7, pc}
   83a4a:	bf00      	nop
   83a4c:	00083911 	.word	0x00083911

00083a50 <ioport_init>:
{
   83a50:	b580      	push	{r7, lr}
   83a52:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   83a54:	200b      	movs	r0, #11
   83a56:	4b06      	ldr	r3, [pc, #24]	; (83a70 <ioport_init+0x20>)
   83a58:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   83a5a:	200c      	movs	r0, #12
   83a5c:	4b04      	ldr	r3, [pc, #16]	; (83a70 <ioport_init+0x20>)
   83a5e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
   83a60:	200d      	movs	r0, #13
   83a62:	4b03      	ldr	r3, [pc, #12]	; (83a70 <ioport_init+0x20>)
   83a64:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
   83a66:	200e      	movs	r0, #14
   83a68:	4b01      	ldr	r3, [pc, #4]	; (83a70 <ioport_init+0x20>)
   83a6a:	4798      	blx	r3
}
   83a6c:	bf00      	nop
   83a6e:	bd80      	pop	{r7, pc}
   83a70:	00083a35 	.word	0x00083a35

00083a74 <ioport_disable_pin>:
{
   83a74:	b480      	push	{r7}
   83a76:	b089      	sub	sp, #36	; 0x24
   83a78:	af00      	add	r7, sp, #0
   83a7a:	6078      	str	r0, [r7, #4]
   83a7c:	687b      	ldr	r3, [r7, #4]
   83a7e:	61fb      	str	r3, [r7, #28]
   83a80:	69fb      	ldr	r3, [r7, #28]
   83a82:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83a84:	69bb      	ldr	r3, [r7, #24]
   83a86:	095a      	lsrs	r2, r3, #5
   83a88:	69fb      	ldr	r3, [r7, #28]
   83a8a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83a8c:	697b      	ldr	r3, [r7, #20]
   83a8e:	f003 031f 	and.w	r3, r3, #31
   83a92:	2101      	movs	r1, #1
   83a94:	fa01 f303 	lsl.w	r3, r1, r3
   83a98:	613a      	str	r2, [r7, #16]
   83a9a:	60fb      	str	r3, [r7, #12]
   83a9c:	693b      	ldr	r3, [r7, #16]
   83a9e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83aa0:	68bb      	ldr	r3, [r7, #8]
   83aa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83aa6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83aaa:	025b      	lsls	r3, r3, #9
   83aac:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   83aae:	68fb      	ldr	r3, [r7, #12]
   83ab0:	6053      	str	r3, [r2, #4]
}
   83ab2:	bf00      	nop
   83ab4:	3724      	adds	r7, #36	; 0x24
   83ab6:	46bd      	mov	sp, r7
   83ab8:	bc80      	pop	{r7}
   83aba:	4770      	bx	lr

00083abc <ioport_set_pin_mode>:
{
   83abc:	b480      	push	{r7}
   83abe:	b08d      	sub	sp, #52	; 0x34
   83ac0:	af00      	add	r7, sp, #0
   83ac2:	6078      	str	r0, [r7, #4]
   83ac4:	6039      	str	r1, [r7, #0]
   83ac6:	687b      	ldr	r3, [r7, #4]
   83ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   83aca:	683b      	ldr	r3, [r7, #0]
   83acc:	62bb      	str	r3, [r7, #40]	; 0x28
   83ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ad0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
   83ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ad4:	095a      	lsrs	r2, r3, #5
   83ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83ad8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
   83ada:	6a3b      	ldr	r3, [r7, #32]
   83adc:	f003 031f 	and.w	r3, r3, #31
   83ae0:	2101      	movs	r1, #1
   83ae2:	fa01 f303 	lsl.w	r3, r1, r3
   83ae6:	61fa      	str	r2, [r7, #28]
   83ae8:	61bb      	str	r3, [r7, #24]
   83aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83aec:	617b      	str	r3, [r7, #20]
   83aee:	69fb      	ldr	r3, [r7, #28]
   83af0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83af2:	693b      	ldr	r3, [r7, #16]
   83af4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83af8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83afc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
   83afe:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
   83b00:	697b      	ldr	r3, [r7, #20]
   83b02:	f003 0308 	and.w	r3, r3, #8
   83b06:	2b00      	cmp	r3, #0
   83b08:	d003      	beq.n	83b12 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   83b0a:	68fb      	ldr	r3, [r7, #12]
   83b0c:	69ba      	ldr	r2, [r7, #24]
   83b0e:	665a      	str	r2, [r3, #100]	; 0x64
   83b10:	e002      	b.n	83b18 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
   83b12:	68fb      	ldr	r3, [r7, #12]
   83b14:	69ba      	ldr	r2, [r7, #24]
   83b16:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   83b18:	697b      	ldr	r3, [r7, #20]
   83b1a:	f003 0320 	and.w	r3, r3, #32
   83b1e:	2b00      	cmp	r3, #0
   83b20:	d003      	beq.n	83b2a <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   83b22:	68fb      	ldr	r3, [r7, #12]
   83b24:	69ba      	ldr	r2, [r7, #24]
   83b26:	651a      	str	r2, [r3, #80]	; 0x50
   83b28:	e002      	b.n	83b30 <ioport_set_pin_mode+0x74>
		base->PIO_MDDR = mask;
   83b2a:	68fb      	ldr	r3, [r7, #12]
   83b2c:	69ba      	ldr	r2, [r7, #24]
   83b2e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   83b30:	697b      	ldr	r3, [r7, #20]
   83b32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   83b36:	2b00      	cmp	r3, #0
   83b38:	d003      	beq.n	83b42 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   83b3a:	68fb      	ldr	r3, [r7, #12]
   83b3c:	69ba      	ldr	r2, [r7, #24]
   83b3e:	621a      	str	r2, [r3, #32]
   83b40:	e002      	b.n	83b48 <ioport_set_pin_mode+0x8c>
		base->PIO_IFDR = mask;
   83b42:	68fb      	ldr	r3, [r7, #12]
   83b44:	69ba      	ldr	r2, [r7, #24]
   83b46:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
   83b48:	697b      	ldr	r3, [r7, #20]
   83b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83b4e:	2b00      	cmp	r3, #0
   83b50:	d004      	beq.n	83b5c <ioport_set_pin_mode+0xa0>
		base->PIO_DIFSR = mask;
   83b52:	68fb      	ldr	r3, [r7, #12]
   83b54:	69ba      	ldr	r2, [r7, #24]
   83b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   83b5a:	e003      	b.n	83b64 <ioport_set_pin_mode+0xa8>
		base->PIO_SCIFSR = mask;
   83b5c:	68fb      	ldr	r3, [r7, #12]
   83b5e:	69ba      	ldr	r2, [r7, #24]
   83b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
   83b64:	697b      	ldr	r3, [r7, #20]
   83b66:	f003 0301 	and.w	r3, r3, #1
   83b6a:	2b00      	cmp	r3, #0
   83b6c:	d006      	beq.n	83b7c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   83b6e:	68fb      	ldr	r3, [r7, #12]
   83b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83b72:	69bb      	ldr	r3, [r7, #24]
   83b74:	431a      	orrs	r2, r3
   83b76:	68fb      	ldr	r3, [r7, #12]
   83b78:	671a      	str	r2, [r3, #112]	; 0x70
}
   83b7a:	e006      	b.n	83b8a <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   83b7c:	68fb      	ldr	r3, [r7, #12]
   83b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83b80:	69bb      	ldr	r3, [r7, #24]
   83b82:	43db      	mvns	r3, r3
   83b84:	401a      	ands	r2, r3
   83b86:	68fb      	ldr	r3, [r7, #12]
   83b88:	671a      	str	r2, [r3, #112]	; 0x70
   83b8a:	bf00      	nop
   83b8c:	3734      	adds	r7, #52	; 0x34
   83b8e:	46bd      	mov	sp, r7
   83b90:	bc80      	pop	{r7}
   83b92:	4770      	bx	lr

00083b94 <ioport_set_pin_dir>:
{
   83b94:	b480      	push	{r7}
   83b96:	b08d      	sub	sp, #52	; 0x34
   83b98:	af00      	add	r7, sp, #0
   83b9a:	6078      	str	r0, [r7, #4]
   83b9c:	460b      	mov	r3, r1
   83b9e:	70fb      	strb	r3, [r7, #3]
   83ba0:	687b      	ldr	r3, [r7, #4]
   83ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   83ba4:	78fb      	ldrb	r3, [r7, #3]
   83ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   83baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83bac:	627b      	str	r3, [r7, #36]	; 0x24
   83bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83bb0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
   83bb2:	6a3b      	ldr	r3, [r7, #32]
   83bb4:	095b      	lsrs	r3, r3, #5
   83bb6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83bb8:	69fb      	ldr	r3, [r7, #28]
   83bba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83bbe:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83bc2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83bc4:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
   83bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83bca:	2b01      	cmp	r3, #1
   83bcc:	d109      	bne.n	83be2 <ioport_set_pin_dir+0x4e>
   83bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83bd0:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
   83bd2:	697b      	ldr	r3, [r7, #20]
   83bd4:	f003 031f 	and.w	r3, r3, #31
   83bd8:	2201      	movs	r2, #1
   83bda:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   83bdc:	69bb      	ldr	r3, [r7, #24]
   83bde:	611a      	str	r2, [r3, #16]
   83be0:	e00c      	b.n	83bfc <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
   83be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   83be6:	2b00      	cmp	r3, #0
   83be8:	d108      	bne.n	83bfc <ioport_set_pin_dir+0x68>
   83bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83bec:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
   83bee:	693b      	ldr	r3, [r7, #16]
   83bf0:	f003 031f 	and.w	r3, r3, #31
   83bf4:	2201      	movs	r2, #1
   83bf6:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83bf8:	69bb      	ldr	r3, [r7, #24]
   83bfa:	615a      	str	r2, [r3, #20]
   83bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83bfe:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83c00:	68fb      	ldr	r3, [r7, #12]
   83c02:	f003 031f 	and.w	r3, r3, #31
   83c06:	2201      	movs	r2, #1
   83c08:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   83c0a:	69bb      	ldr	r3, [r7, #24]
   83c0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   83c10:	bf00      	nop
   83c12:	3734      	adds	r7, #52	; 0x34
   83c14:	46bd      	mov	sp, r7
   83c16:	bc80      	pop	{r7}
   83c18:	4770      	bx	lr

00083c1a <ioport_set_pin_level>:
{
   83c1a:	b480      	push	{r7}
   83c1c:	b08b      	sub	sp, #44	; 0x2c
   83c1e:	af00      	add	r7, sp, #0
   83c20:	6078      	str	r0, [r7, #4]
   83c22:	460b      	mov	r3, r1
   83c24:	70fb      	strb	r3, [r7, #3]
   83c26:	687b      	ldr	r3, [r7, #4]
   83c28:	627b      	str	r3, [r7, #36]	; 0x24
   83c2a:	78fb      	ldrb	r3, [r7, #3]
   83c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   83c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c32:	61fb      	str	r3, [r7, #28]
   83c34:	69fb      	ldr	r3, [r7, #28]
   83c36:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   83c38:	69bb      	ldr	r3, [r7, #24]
   83c3a:	095b      	lsrs	r3, r3, #5
   83c3c:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83c3e:	697b      	ldr	r3, [r7, #20]
   83c40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c44:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83c48:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   83c4a:	613b      	str	r3, [r7, #16]
	if (level) {
   83c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83c50:	2b00      	cmp	r3, #0
   83c52:	d009      	beq.n	83c68 <ioport_set_pin_level+0x4e>
   83c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c56:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   83c58:	68fb      	ldr	r3, [r7, #12]
   83c5a:	f003 031f 	and.w	r3, r3, #31
   83c5e:	2201      	movs	r2, #1
   83c60:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   83c62:	693b      	ldr	r3, [r7, #16]
   83c64:	631a      	str	r2, [r3, #48]	; 0x30
}
   83c66:	e008      	b.n	83c7a <ioport_set_pin_level+0x60>
   83c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c6a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   83c6c:	68bb      	ldr	r3, [r7, #8]
   83c6e:	f003 031f 	and.w	r3, r3, #31
   83c72:	2201      	movs	r2, #1
   83c74:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   83c76:	693b      	ldr	r3, [r7, #16]
   83c78:	635a      	str	r2, [r3, #52]	; 0x34
   83c7a:	bf00      	nop
   83c7c:	372c      	adds	r7, #44	; 0x2c
   83c7e:	46bd      	mov	sp, r7
   83c80:	bc80      	pop	{r7}
   83c82:	4770      	bx	lr

00083c84 <board_init>:
#include "asf.h"
#include "board.h"
#include "conf_board.h"

void board_init(void)
{
   83c84:	b580      	push	{r7, lr}
   83c86:	b084      	sub	sp, #16
   83c88:	af00      	add	r7, sp, #0
	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83c8a:	4ba6      	ldr	r3, [pc, #664]	; (83f24 <board_init+0x2a0>)
   83c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83c90:	605a      	str	r2, [r3, #4]
	#endif
	
	ioport_init();
   83c92:	4ba5      	ldr	r3, [pc, #660]	; (83f28 <board_init+0x2a4>)
   83c94:	4798      	blx	r3
	
	/* Configure LED pins */
	ioport_set_pin_dir(LED_ONBOARD, IOPORT_DIR_OUTPUT);
   83c96:	2101      	movs	r1, #1
   83c98:	206a      	movs	r0, #106	; 0x6a
   83c9a:	4ba4      	ldr	r3, [pc, #656]	; (83f2c <board_init+0x2a8>)
   83c9c:	4798      	blx	r3
	ioport_set_pin_level(LED_ONBOARD, 0);
   83c9e:	2100      	movs	r1, #0
   83ca0:	206a      	movs	r0, #106	; 0x6a
   83ca2:	4ba3      	ldr	r3, [pc, #652]	; (83f30 <board_init+0x2ac>)
   83ca4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M1, IOPORT_DIR_OUTPUT);
   83ca6:	2101      	movs	r1, #1
   83ca8:	2067      	movs	r0, #103	; 0x67
   83caa:	4ba0      	ldr	r3, [pc, #640]	; (83f2c <board_init+0x2a8>)
   83cac:	4798      	blx	r3
	ioport_set_pin_level(LED_M1, 0);
   83cae:	2100      	movs	r1, #0
   83cb0:	2067      	movs	r0, #103	; 0x67
   83cb2:	4b9f      	ldr	r3, [pc, #636]	; (83f30 <board_init+0x2ac>)
   83cb4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M2, IOPORT_DIR_OUTPUT);
   83cb6:	2101      	movs	r1, #1
   83cb8:	2068      	movs	r0, #104	; 0x68
   83cba:	4b9c      	ldr	r3, [pc, #624]	; (83f2c <board_init+0x2a8>)
   83cbc:	4798      	blx	r3
	ioport_set_pin_level(LED_M2, 0);
   83cbe:	2100      	movs	r1, #0
   83cc0:	2068      	movs	r0, #104	; 0x68
   83cc2:	4b9b      	ldr	r3, [pc, #620]	; (83f30 <board_init+0x2ac>)
   83cc4:	4798      	blx	r3
	ioport_set_pin_dir(LED_M3, IOPORT_DIR_OUTPUT);
   83cc6:	2101      	movs	r1, #1
   83cc8:	2069      	movs	r0, #105	; 0x69
   83cca:	4b98      	ldr	r3, [pc, #608]	; (83f2c <board_init+0x2a8>)
   83ccc:	4798      	blx	r3
	ioport_set_pin_level(LED_M3, 0);
   83cce:	2100      	movs	r1, #0
   83cd0:	2069      	movs	r0, #105	; 0x69
   83cd2:	4b97      	ldr	r3, [pc, #604]	; (83f30 <board_init+0x2ac>)
   83cd4:	4798      	blx	r3
	ioport_set_pin_dir(LED_BAT, IOPORT_DIR_OUTPUT);
   83cd6:	2101      	movs	r1, #1
   83cd8:	2066      	movs	r0, #102	; 0x66
   83cda:	4b94      	ldr	r3, [pc, #592]	; (83f2c <board_init+0x2a8>)
   83cdc:	4798      	blx	r3
	ioport_set_pin_level(LED_BAT, 0);
   83cde:	2100      	movs	r1, #0
   83ce0:	2066      	movs	r0, #102	; 0x66
   83ce2:	4b93      	ldr	r3, [pc, #588]	; (83f30 <board_init+0x2ac>)
   83ce4:	4798      	blx	r3
	
	/* Configure pushbutton pins */
	ioport_set_pin_dir(PB_UP, IOPORT_DIR_INPUT);
   83ce6:	2100      	movs	r1, #0
   83ce8:	2060      	movs	r0, #96	; 0x60
   83cea:	4b90      	ldr	r3, [pc, #576]	; (83f2c <board_init+0x2a8>)
   83cec:	4798      	blx	r3
	ioport_set_pin_mode(PB_UP, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83cee:	2188      	movs	r1, #136	; 0x88
   83cf0:	2060      	movs	r0, #96	; 0x60
   83cf2:	4b90      	ldr	r3, [pc, #576]	; (83f34 <board_init+0x2b0>)
   83cf4:	4798      	blx	r3
	ioport_set_pin_dir(PB_LEFT, IOPORT_DIR_INPUT);
   83cf6:	2100      	movs	r1, #0
   83cf8:	2061      	movs	r0, #97	; 0x61
   83cfa:	4b8c      	ldr	r3, [pc, #560]	; (83f2c <board_init+0x2a8>)
   83cfc:	4798      	blx	r3
	ioport_set_pin_mode(PB_LEFT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83cfe:	2188      	movs	r1, #136	; 0x88
   83d00:	2061      	movs	r0, #97	; 0x61
   83d02:	4b8c      	ldr	r3, [pc, #560]	; (83f34 <board_init+0x2b0>)
   83d04:	4798      	blx	r3
	ioport_set_pin_dir(PB_MID, IOPORT_DIR_INPUT);
   83d06:	2100      	movs	r1, #0
   83d08:	2062      	movs	r0, #98	; 0x62
   83d0a:	4b88      	ldr	r3, [pc, #544]	; (83f2c <board_init+0x2a8>)
   83d0c:	4798      	blx	r3
	ioport_set_pin_mode(PB_MID, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83d0e:	2188      	movs	r1, #136	; 0x88
   83d10:	2062      	movs	r0, #98	; 0x62
   83d12:	4b88      	ldr	r3, [pc, #544]	; (83f34 <board_init+0x2b0>)
   83d14:	4798      	blx	r3
	ioport_set_pin_dir(PB_RIGHT, IOPORT_DIR_INPUT);
   83d16:	2100      	movs	r1, #0
   83d18:	2063      	movs	r0, #99	; 0x63
   83d1a:	4b84      	ldr	r3, [pc, #528]	; (83f2c <board_init+0x2a8>)
   83d1c:	4798      	blx	r3
	ioport_set_pin_mode(PB_RIGHT, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83d1e:	2188      	movs	r1, #136	; 0x88
   83d20:	2063      	movs	r0, #99	; 0x63
   83d22:	4b84      	ldr	r3, [pc, #528]	; (83f34 <board_init+0x2b0>)
   83d24:	4798      	blx	r3
	ioport_set_pin_dir(PB_DOWN, IOPORT_DIR_INPUT);
   83d26:	2100      	movs	r1, #0
   83d28:	2064      	movs	r0, #100	; 0x64
   83d2a:	4b80      	ldr	r3, [pc, #512]	; (83f2c <board_init+0x2a8>)
   83d2c:	4798      	blx	r3
	ioport_set_pin_mode(PB_DOWN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83d2e:	2188      	movs	r1, #136	; 0x88
   83d30:	2064      	movs	r0, #100	; 0x64
   83d32:	4b80      	ldr	r3, [pc, #512]	; (83f34 <board_init+0x2b0>)
   83d34:	4798      	blx	r3
	ioport_set_pin_dir(PB_RETURN, IOPORT_DIR_INPUT);
   83d36:	2100      	movs	r1, #0
   83d38:	2065      	movs	r0, #101	; 0x65
   83d3a:	4b7c      	ldr	r3, [pc, #496]	; (83f2c <board_init+0x2a8>)
   83d3c:	4798      	blx	r3
	ioport_set_pin_mode(PB_RETURN, IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE);
   83d3e:	2188      	movs	r1, #136	; 0x88
   83d40:	2065      	movs	r0, #101	; 0x65
   83d42:	4b7c      	ldr	r3, [pc, #496]	; (83f34 <board_init+0x2b0>)
   83d44:	4798      	blx	r3
  
    /* Configure Motor pins */
    ioport_set_pin_mode(MOTOR_LEFT_L, IOPORT_MODE_MUX_B);
   83d46:	2101      	movs	r1, #1
   83d48:	2042      	movs	r0, #66	; 0x42
   83d4a:	4b7a      	ldr	r3, [pc, #488]	; (83f34 <board_init+0x2b0>)
   83d4c:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_L);
   83d4e:	2042      	movs	r0, #66	; 0x42
   83d50:	4b79      	ldr	r3, [pc, #484]	; (83f38 <board_init+0x2b4>)
   83d52:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_LEFT_H, IOPORT_MODE_MUX_B);
   83d54:	2101      	movs	r1, #1
   83d56:	2043      	movs	r0, #67	; 0x43
   83d58:	4b76      	ldr	r3, [pc, #472]	; (83f34 <board_init+0x2b0>)
   83d5a:	4798      	blx	r3
    ioport_disable_pin(MOTOR_LEFT_H);
   83d5c:	2043      	movs	r0, #67	; 0x43
   83d5e:	4b76      	ldr	r3, [pc, #472]	; (83f38 <board_init+0x2b4>)
   83d60:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_L, IOPORT_MODE_MUX_B);
   83d62:	2101      	movs	r1, #1
   83d64:	2044      	movs	r0, #68	; 0x44
   83d66:	4b73      	ldr	r3, [pc, #460]	; (83f34 <board_init+0x2b0>)
   83d68:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_L);
   83d6a:	2044      	movs	r0, #68	; 0x44
   83d6c:	4b72      	ldr	r3, [pc, #456]	; (83f38 <board_init+0x2b4>)
   83d6e:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_RIGHT_H, IOPORT_MODE_MUX_B);
   83d70:	2101      	movs	r1, #1
   83d72:	2045      	movs	r0, #69	; 0x45
   83d74:	4b6f      	ldr	r3, [pc, #444]	; (83f34 <board_init+0x2b0>)
   83d76:	4798      	blx	r3
    ioport_disable_pin(MOTOR_RIGHT_H);
   83d78:	2045      	movs	r0, #69	; 0x45
   83d7a:	4b6f      	ldr	r3, [pc, #444]	; (83f38 <board_init+0x2b4>)
   83d7c:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_L, IOPORT_MODE_MUX_B);
   83d7e:	2101      	movs	r1, #1
   83d80:	2046      	movs	r0, #70	; 0x46
   83d82:	4b6c      	ldr	r3, [pc, #432]	; (83f34 <board_init+0x2b0>)
   83d84:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_L);
   83d86:	2046      	movs	r0, #70	; 0x46
   83d88:	4b6b      	ldr	r3, [pc, #428]	; (83f38 <board_init+0x2b4>)
   83d8a:	4798      	blx	r3
    ioport_set_pin_mode(MOTOR_REAR_H, IOPORT_MODE_MUX_B);
   83d8c:	2101      	movs	r1, #1
   83d8e:	2047      	movs	r0, #71	; 0x47
   83d90:	4b68      	ldr	r3, [pc, #416]	; (83f34 <board_init+0x2b0>)
   83d92:	4798      	blx	r3
    ioport_disable_pin(MOTOR_REAR_H);
   83d94:	2047      	movs	r0, #71	; 0x47
   83d96:	4b68      	ldr	r3, [pc, #416]	; (83f38 <board_init+0x2b4>)
   83d98:	4798      	blx	r3

    /* Configure Encoder pins */
    ioport_set_pin_mode(ENC_CLK, IOPORT_MODE_MUX_B);
   83d9a:	2101      	movs	r1, #1
   83d9c:	2055      	movs	r0, #85	; 0x55
   83d9e:	4b65      	ldr	r3, [pc, #404]	; (83f34 <board_init+0x2b0>)
   83da0:	4798      	blx	r3
    ioport_disable_pin(ENC_CLK);
   83da2:	2055      	movs	r0, #85	; 0x55
   83da4:	4b64      	ldr	r3, [pc, #400]	; (83f38 <board_init+0x2b4>)
   83da6:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LOAD, IOPORT_DIR_OUTPUT);
   83da8:	2101      	movs	r1, #1
   83daa:	2020      	movs	r0, #32
   83dac:	4b61      	ldr	r3, [pc, #388]	; (83f34 <board_init+0x2b0>)
   83dae:	4798      	blx	r3
    ioport_set_pin_level(ENC_LOAD, 1);
   83db0:	2101      	movs	r1, #1
   83db2:	2020      	movs	r0, #32
   83db4:	4b5e      	ldr	r3, [pc, #376]	; (83f30 <board_init+0x2ac>)
   83db6:	4798      	blx	r3

    ioport_set_pin_mode(ENC_LEFT_A, ENC_LEFT_A_FLAGS);
   83db8:	2100      	movs	r1, #0
   83dba:	2058      	movs	r0, #88	; 0x58
   83dbc:	4b5d      	ldr	r3, [pc, #372]	; (83f34 <board_init+0x2b0>)
   83dbe:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_B, ENC_LEFT_B_FLAGS);
   83dc0:	2100      	movs	r1, #0
   83dc2:	2059      	movs	r0, #89	; 0x59
   83dc4:	4b5b      	ldr	r3, [pc, #364]	; (83f34 <board_init+0x2b0>)
   83dc6:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_C, ENC_LEFT_C_FLAGS);
   83dc8:	2100      	movs	r1, #0
   83dca:	205a      	movs	r0, #90	; 0x5a
   83dcc:	4b59      	ldr	r3, [pc, #356]	; (83f34 <board_init+0x2b0>)
   83dce:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_D, ENC_LEFT_D_FLAGS);
   83dd0:	2100      	movs	r1, #0
   83dd2:	205b      	movs	r0, #91	; 0x5b
   83dd4:	4b57      	ldr	r3, [pc, #348]	; (83f34 <board_init+0x2b0>)
   83dd6:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_E, ENC_LEFT_E_FLAGS);
   83dd8:	2100      	movs	r1, #0
   83dda:	205c      	movs	r0, #92	; 0x5c
   83ddc:	4b55      	ldr	r3, [pc, #340]	; (83f34 <board_init+0x2b0>)
   83dde:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_F, ENC_LEFT_F_FLAGS);
   83de0:	2100      	movs	r1, #0
   83de2:	205d      	movs	r0, #93	; 0x5d
   83de4:	4b53      	ldr	r3, [pc, #332]	; (83f34 <board_init+0x2b0>)
   83de6:	4798      	blx	r3
    ioport_set_pin_mode(ENC_LEFT_G, ENC_LEFT_G_FLAGS);
   83de8:	2100      	movs	r1, #0
   83dea:	205e      	movs	r0, #94	; 0x5e
   83dec:	4b51      	ldr	r3, [pc, #324]	; (83f34 <board_init+0x2b0>)
   83dee:	4798      	blx	r3
    
    ioport_set_pin_mode(ENC_RIGHT_A, ENC_RIGHT_A_FLAGS);
   83df0:	2100      	movs	r1, #0
   83df2:	2050      	movs	r0, #80	; 0x50
   83df4:	4b4f      	ldr	r3, [pc, #316]	; (83f34 <board_init+0x2b0>)
   83df6:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_B, ENC_RIGHT_B_FLAGS);
   83df8:	2100      	movs	r1, #0
   83dfa:	2051      	movs	r0, #81	; 0x51
   83dfc:	4b4d      	ldr	r3, [pc, #308]	; (83f34 <board_init+0x2b0>)
   83dfe:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_C, ENC_RIGHT_C_FLAGS);
   83e00:	2100      	movs	r1, #0
   83e02:	2052      	movs	r0, #82	; 0x52
   83e04:	4b4b      	ldr	r3, [pc, #300]	; (83f34 <board_init+0x2b0>)
   83e06:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_D, ENC_RIGHT_D_FLAGS);
   83e08:	2100      	movs	r1, #0
   83e0a:	2053      	movs	r0, #83	; 0x53
   83e0c:	4b49      	ldr	r3, [pc, #292]	; (83f34 <board_init+0x2b0>)
   83e0e:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_E, ENC_RIGHT_E_FLAGS);
   83e10:	2100      	movs	r1, #0
   83e12:	2054      	movs	r0, #84	; 0x54
   83e14:	4b47      	ldr	r3, [pc, #284]	; (83f34 <board_init+0x2b0>)
   83e16:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_F, ENC_RIGHT_F_FLAGS);
   83e18:	2100      	movs	r1, #0
   83e1a:	2056      	movs	r0, #86	; 0x56
   83e1c:	4b45      	ldr	r3, [pc, #276]	; (83f34 <board_init+0x2b0>)
   83e1e:	4798      	blx	r3
    ioport_set_pin_mode(ENC_RIGHT_G, ENC_RIGHT_G_FLAGS);
   83e20:	2100      	movs	r1, #0
   83e22:	2057      	movs	r0, #87	; 0x57
   83e24:	4b43      	ldr	r3, [pc, #268]	; (83f34 <board_init+0x2b0>)
   83e26:	4798      	blx	r3
    
    ioport_set_pin_mode(ENC_REAR_A, ENC_REAR_A_FLAGS);
   83e28:	2100      	movs	r1, #0
   83e2a:	2041      	movs	r0, #65	; 0x41
   83e2c:	4b41      	ldr	r3, [pc, #260]	; (83f34 <board_init+0x2b0>)
   83e2e:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_B, ENC_REAR_B_FLAGS);
   83e30:	2100      	movs	r1, #0
   83e32:	204a      	movs	r0, #74	; 0x4a
   83e34:	4b3f      	ldr	r3, [pc, #252]	; (83f34 <board_init+0x2b0>)
   83e36:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_C, ENC_REAR_C_FLAGS);
   83e38:	2100      	movs	r1, #0
   83e3a:	204b      	movs	r0, #75	; 0x4b
   83e3c:	4b3d      	ldr	r3, [pc, #244]	; (83f34 <board_init+0x2b0>)
   83e3e:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_D, ENC_REAR_D_FLAGS);
   83e40:	2100      	movs	r1, #0
   83e42:	204c      	movs	r0, #76	; 0x4c
   83e44:	4b3b      	ldr	r3, [pc, #236]	; (83f34 <board_init+0x2b0>)
   83e46:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_E, ENC_REAR_E_FLAGS);
   83e48:	2100      	movs	r1, #0
   83e4a:	204d      	movs	r0, #77	; 0x4d
   83e4c:	4b39      	ldr	r3, [pc, #228]	; (83f34 <board_init+0x2b0>)
   83e4e:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_F, ENC_REAR_F_FLAGS);
   83e50:	2100      	movs	r1, #0
   83e52:	204e      	movs	r0, #78	; 0x4e
   83e54:	4b37      	ldr	r3, [pc, #220]	; (83f34 <board_init+0x2b0>)
   83e56:	4798      	blx	r3
    ioport_set_pin_mode(ENC_REAR_G, ENC_REAR_G_FLAGS);
   83e58:	2100      	movs	r1, #0
   83e5a:	204f      	movs	r0, #79	; 0x4f
   83e5c:	4b35      	ldr	r3, [pc, #212]	; (83f34 <board_init+0x2b0>)
   83e5e:	4798      	blx	r3
  
    /* Configure Raspberry Pi GPIO pins */
    ioport_set_pin_dir(RPI1, IOPORT_DIR_OUTPUT);
   83e60:	2101      	movs	r1, #1
   83e62:	2001      	movs	r0, #1
   83e64:	4b31      	ldr	r3, [pc, #196]	; (83f2c <board_init+0x2a8>)
   83e66:	4798      	blx	r3
    ioport_set_pin_level(RPI1, 1);
   83e68:	2101      	movs	r1, #1
   83e6a:	2001      	movs	r0, #1
   83e6c:	4b30      	ldr	r3, [pc, #192]	; (83f30 <board_init+0x2ac>)
   83e6e:	4798      	blx	r3
    ioport_set_pin_dir(RPI2, IOPORT_DIR_INPUT);
   83e70:	2100      	movs	r1, #0
   83e72:	2008      	movs	r0, #8
   83e74:	4b2d      	ldr	r3, [pc, #180]	; (83f2c <board_init+0x2a8>)
   83e76:	4798      	blx	r3
    ioport_set_pin_dir(RPI3, IOPORT_DIR_INPUT);
   83e78:	2100      	movs	r1, #0
   83e7a:	2009      	movs	r0, #9
   83e7c:	4b2b      	ldr	r3, [pc, #172]	; (83f2c <board_init+0x2a8>)
   83e7e:	4798      	blx	r3
    ioport_set_pin_dir(RPI4, IOPORT_DIR_INPUT);
   83e80:	2100      	movs	r1, #0
   83e82:	2007      	movs	r0, #7
   83e84:	4b29      	ldr	r3, [pc, #164]	; (83f2c <board_init+0x2a8>)
   83e86:	4798      	blx	r3
    ioport_set_pin_dir(RPI5, IOPORT_DIR_INPUT);
   83e88:	2100      	movs	r1, #0
   83e8a:	2005      	movs	r0, #5
   83e8c:	4b27      	ldr	r3, [pc, #156]	; (83f2c <board_init+0x2a8>)
   83e8e:	4798      	blx	r3
    ioport_set_pin_dir(RPI6, IOPORT_DIR_INPUT);
   83e90:	2100      	movs	r1, #0
   83e92:	2000      	movs	r0, #0
   83e94:	4b25      	ldr	r3, [pc, #148]	; (83f2c <board_init+0x2a8>)
   83e96:	4798      	blx	r3
  
    /* Configure I2C pins */
    ioport_set_pin_mode(I2C0_DATA, IOPORT_MODE_MUX_A);
   83e98:	2100      	movs	r1, #0
   83e9a:	2011      	movs	r0, #17
   83e9c:	4b25      	ldr	r3, [pc, #148]	; (83f34 <board_init+0x2b0>)
   83e9e:	4798      	blx	r3
    ioport_disable_pin(I2C0_DATA);
   83ea0:	2011      	movs	r0, #17
   83ea2:	4b25      	ldr	r3, [pc, #148]	; (83f38 <board_init+0x2b4>)
   83ea4:	4798      	blx	r3
    ioport_set_pin_mode(I2C0_CLK, IOPORT_MODE_MUX_A);
   83ea6:	2100      	movs	r1, #0
   83ea8:	2012      	movs	r0, #18
   83eaa:	4b22      	ldr	r3, [pc, #136]	; (83f34 <board_init+0x2b0>)
   83eac:	4798      	blx	r3
    ioport_disable_pin(I2C0_CLK);
   83eae:	2012      	movs	r0, #18
   83eb0:	4b21      	ldr	r3, [pc, #132]	; (83f38 <board_init+0x2b4>)
   83eb2:	4798      	blx	r3
	
	/* Configure SPI pins */
	ioport_set_pin_mode(SPI1_MISO, IOPORT_MODE_MUX_A);
   83eb4:	2100      	movs	r1, #0
   83eb6:	200c      	movs	r0, #12
   83eb8:	4b1e      	ldr	r3, [pc, #120]	; (83f34 <board_init+0x2b0>)
   83eba:	4798      	blx	r3
	ioport_disable_pin(SPI1_MISO);
   83ebc:	200c      	movs	r0, #12
   83ebe:	4b1e      	ldr	r3, [pc, #120]	; (83f38 <board_init+0x2b4>)
   83ec0:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_MOSI, IOPORT_MODE_MUX_A);
   83ec2:	2100      	movs	r1, #0
   83ec4:	200d      	movs	r0, #13
   83ec6:	4b1b      	ldr	r3, [pc, #108]	; (83f34 <board_init+0x2b0>)
   83ec8:	4798      	blx	r3
	ioport_disable_pin(SPI1_MOSI);
   83eca:	200d      	movs	r0, #13
   83ecc:	4b1a      	ldr	r3, [pc, #104]	; (83f38 <board_init+0x2b4>)
   83ece:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_SPCK, IOPORT_MODE_MUX_A);
   83ed0:	2100      	movs	r1, #0
   83ed2:	2010      	movs	r0, #16
   83ed4:	4b17      	ldr	r3, [pc, #92]	; (83f34 <board_init+0x2b0>)
   83ed6:	4798      	blx	r3
	ioport_disable_pin(SPI1_SPCK);
   83ed8:	2010      	movs	r0, #16
   83eda:	4b17      	ldr	r3, [pc, #92]	; (83f38 <board_init+0x2b4>)
   83edc:	4798      	blx	r3
	ioport_set_pin_mode(SPI1_NPCS0, IOPORT_MODE_MUX_A);
   83ede:	2100      	movs	r1, #0
   83ee0:	200e      	movs	r0, #14
   83ee2:	4b14      	ldr	r3, [pc, #80]	; (83f34 <board_init+0x2b0>)
   83ee4:	4798      	blx	r3
	ioport_disable_pin(SPI1_NPCS0);
   83ee6:	200e      	movs	r0, #14
   83ee8:	4b13      	ldr	r3, [pc, #76]	; (83f38 <board_init+0x2b4>)
   83eea:	4798      	blx	r3

    /* Configure micro SD Card pins */
    ioport_set_pin_mode(MSD_CMD, IOPORT_MODE_MUX_A);
   83eec:	2100      	movs	r1, #0
   83eee:	2014      	movs	r0, #20
   83ef0:	4b10      	ldr	r3, [pc, #64]	; (83f34 <board_init+0x2b0>)
   83ef2:	4798      	blx	r3
	ioport_disable_pin(MSD_CMD);
   83ef4:	2014      	movs	r0, #20
   83ef6:	4b10      	ldr	r3, [pc, #64]	; (83f38 <board_init+0x2b4>)
   83ef8:	4798      	blx	r3
    ioport_set_pin_mode(MSD_CLK, IOPORT_MODE_MUX_A);
   83efa:	2100      	movs	r1, #0
   83efc:	2013      	movs	r0, #19
   83efe:	4b0d      	ldr	r3, [pc, #52]	; (83f34 <board_init+0x2b0>)
   83f00:	4798      	blx	r3
	ioport_disable_pin(MSD_CLK);
   83f02:	2013      	movs	r0, #19
   83f04:	4b0c      	ldr	r3, [pc, #48]	; (83f38 <board_init+0x2b4>)
   83f06:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA0, IOPORT_MODE_MUX_A);
   83f08:	2100      	movs	r1, #0
   83f0a:	2015      	movs	r0, #21
   83f0c:	4b09      	ldr	r3, [pc, #36]	; (83f34 <board_init+0x2b0>)
   83f0e:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA0);
   83f10:	2015      	movs	r0, #21
   83f12:	4b09      	ldr	r3, [pc, #36]	; (83f38 <board_init+0x2b4>)
   83f14:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA1, IOPORT_MODE_MUX_A);
   83f16:	2100      	movs	r1, #0
   83f18:	2016      	movs	r0, #22
   83f1a:	4b06      	ldr	r3, [pc, #24]	; (83f34 <board_init+0x2b0>)
   83f1c:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA1);
   83f1e:	2016      	movs	r0, #22
   83f20:	e00c      	b.n	83f3c <board_init+0x2b8>
   83f22:	bf00      	nop
   83f24:	400e1a50 	.word	0x400e1a50
   83f28:	00083a51 	.word	0x00083a51
   83f2c:	00083b95 	.word	0x00083b95
   83f30:	00083c1b 	.word	0x00083c1b
   83f34:	00083abd 	.word	0x00083abd
   83f38:	00083a75 	.word	0x00083a75
   83f3c:	4b17      	ldr	r3, [pc, #92]	; (83f9c <board_init+0x318>)
   83f3e:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA2, IOPORT_MODE_MUX_A);
   83f40:	2100      	movs	r1, #0
   83f42:	2017      	movs	r0, #23
   83f44:	4b16      	ldr	r3, [pc, #88]	; (83fa0 <board_init+0x31c>)
   83f46:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA2);
   83f48:	2017      	movs	r0, #23
   83f4a:	4b14      	ldr	r3, [pc, #80]	; (83f9c <board_init+0x318>)
   83f4c:	4798      	blx	r3
    ioport_set_pin_mode(MSD_DATA3, IOPORT_MODE_MUX_A);
   83f4e:	2100      	movs	r1, #0
   83f50:	2018      	movs	r0, #24
   83f52:	4b13      	ldr	r3, [pc, #76]	; (83fa0 <board_init+0x31c>)
   83f54:	4798      	blx	r3
	ioport_disable_pin(MSD_DATA3);
   83f56:	2018      	movs	r0, #24
   83f58:	4b10      	ldr	r3, [pc, #64]	; (83f9c <board_init+0x318>)
   83f5a:	4798      	blx	r3


    /* Init PWM */
    pmc_enable_periph_clk(ID_PWM);
   83f5c:	2024      	movs	r0, #36	; 0x24
   83f5e:	4b11      	ldr	r3, [pc, #68]	; (83fa4 <board_init+0x320>)
   83f60:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_LEFT);
   83f62:	2100      	movs	r1, #0
   83f64:	4810      	ldr	r0, [pc, #64]	; (83fa8 <board_init+0x324>)
   83f66:	4b11      	ldr	r3, [pc, #68]	; (83fac <board_init+0x328>)
   83f68:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_RIGHT);
   83f6a:	2101      	movs	r1, #1
   83f6c:	480e      	ldr	r0, [pc, #56]	; (83fa8 <board_init+0x324>)
   83f6e:	4b0f      	ldr	r3, [pc, #60]	; (83fac <board_init+0x328>)
   83f70:	4798      	blx	r3
    pwm_channel_disable(PWM, MOTOR_REAR);
   83f72:	2102      	movs	r1, #2
   83f74:	480c      	ldr	r0, [pc, #48]	; (83fa8 <board_init+0x324>)
   83f76:	4b0d      	ldr	r3, [pc, #52]	; (83fac <board_init+0x328>)
   83f78:	4798      	blx	r3
    pwm_clock_t clock_setting =
   83f7a:	4b0d      	ldr	r3, [pc, #52]	; (83fb0 <board_init+0x32c>)
   83f7c:	607b      	str	r3, [r7, #4]
   83f7e:	2300      	movs	r3, #0
   83f80:	60bb      	str	r3, [r7, #8]
    {
        .ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
   83f82:	4b0c      	ldr	r3, [pc, #48]	; (83fb4 <board_init+0x330>)
   83f84:	4798      	blx	r3
   83f86:	4603      	mov	r3, r0
    pwm_clock_t clock_setting =
   83f88:	60fb      	str	r3, [r7, #12]
    };
    pwm_init(PWM, &clock_setting);
   83f8a:	1d3b      	adds	r3, r7, #4
   83f8c:	4619      	mov	r1, r3
   83f8e:	4806      	ldr	r0, [pc, #24]	; (83fa8 <board_init+0x324>)
   83f90:	4b09      	ldr	r3, [pc, #36]	; (83fb8 <board_init+0x334>)
   83f92:	4798      	blx	r3
}
   83f94:	bf00      	nop
   83f96:	3710      	adds	r7, #16
   83f98:	46bd      	mov	sp, r7
   83f9a:	bd80      	pop	{r7, pc}
   83f9c:	00083a75 	.word	0x00083a75
   83fa0:	00083abd 	.word	0x00083abd
   83fa4:	00083911 	.word	0x00083911
   83fa8:	40094000 	.word	0x40094000
   83fac:	00080615 	.word	0x00080615
   83fb0:	01312d00 	.word	0x01312d00
   83fb4:	00083a21 	.word	0x00083a21
   83fb8:	000802e9 	.word	0x000802e9

00083fbc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83fbc:	b480      	push	{r7}
   83fbe:	af00      	add	r7, sp, #0
	while (1) {
   83fc0:	e7fe      	b.n	83fc0 <Dummy_Handler+0x4>
	...

00083fc4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83fc4:	b580      	push	{r7, lr}
   83fc6:	b082      	sub	sp, #8
   83fc8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83fca:	4b1e      	ldr	r3, [pc, #120]	; (84044 <Reset_Handler+0x80>)
   83fcc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83fce:	4b1e      	ldr	r3, [pc, #120]	; (84048 <Reset_Handler+0x84>)
   83fd0:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83fd2:	687a      	ldr	r2, [r7, #4]
   83fd4:	683b      	ldr	r3, [r7, #0]
   83fd6:	429a      	cmp	r2, r3
   83fd8:	d00c      	beq.n	83ff4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83fda:	e007      	b.n	83fec <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83fdc:	683b      	ldr	r3, [r7, #0]
   83fde:	1d1a      	adds	r2, r3, #4
   83fe0:	603a      	str	r2, [r7, #0]
   83fe2:	687a      	ldr	r2, [r7, #4]
   83fe4:	1d11      	adds	r1, r2, #4
   83fe6:	6079      	str	r1, [r7, #4]
   83fe8:	6812      	ldr	r2, [r2, #0]
   83fea:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83fec:	683b      	ldr	r3, [r7, #0]
   83fee:	4a17      	ldr	r2, [pc, #92]	; (8404c <Reset_Handler+0x88>)
   83ff0:	4293      	cmp	r3, r2
   83ff2:	d3f3      	bcc.n	83fdc <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83ff4:	4b16      	ldr	r3, [pc, #88]	; (84050 <Reset_Handler+0x8c>)
   83ff6:	603b      	str	r3, [r7, #0]
   83ff8:	e004      	b.n	84004 <Reset_Handler+0x40>
		*pDest++ = 0;
   83ffa:	683b      	ldr	r3, [r7, #0]
   83ffc:	1d1a      	adds	r2, r3, #4
   83ffe:	603a      	str	r2, [r7, #0]
   84000:	2200      	movs	r2, #0
   84002:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84004:	683b      	ldr	r3, [r7, #0]
   84006:	4a13      	ldr	r2, [pc, #76]	; (84054 <Reset_Handler+0x90>)
   84008:	4293      	cmp	r3, r2
   8400a:	d3f6      	bcc.n	83ffa <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   8400c:	4b12      	ldr	r3, [pc, #72]	; (84058 <Reset_Handler+0x94>)
   8400e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84010:	4a12      	ldr	r2, [pc, #72]	; (8405c <Reset_Handler+0x98>)
   84012:	687b      	ldr	r3, [r7, #4]
   84014:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84018:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8401c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8401e:	687b      	ldr	r3, [r7, #4]
   84020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84024:	d309      	bcc.n	8403a <Reset_Handler+0x76>
   84026:	687b      	ldr	r3, [r7, #4]
   84028:	4a0d      	ldr	r2, [pc, #52]	; (84060 <Reset_Handler+0x9c>)
   8402a:	4293      	cmp	r3, r2
   8402c:	d805      	bhi.n	8403a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8402e:	4a0b      	ldr	r2, [pc, #44]	; (8405c <Reset_Handler+0x98>)
   84030:	4b0a      	ldr	r3, [pc, #40]	; (8405c <Reset_Handler+0x98>)
   84032:	689b      	ldr	r3, [r3, #8]
   84034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84038:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8403a:	4b0a      	ldr	r3, [pc, #40]	; (84064 <Reset_Handler+0xa0>)
   8403c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8403e:	4b0a      	ldr	r3, [pc, #40]	; (84068 <Reset_Handler+0xa4>)
   84040:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84042:	e7fe      	b.n	84042 <Reset_Handler+0x7e>
   84044:	00089984 	.word	0x00089984
   84048:	20070000 	.word	0x20070000
   8404c:	20070b50 	.word	0x20070b50
   84050:	20070b50 	.word	0x20070b50
   84054:	20070ff4 	.word	0x20070ff4
   84058:	00080000 	.word	0x00080000
   8405c:	e000ed00 	.word	0xe000ed00
   84060:	200fffff 	.word	0x200fffff
   84064:	00085475 	.word	0x00085475
   84068:	0008443d 	.word	0x0008443d

0008406c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   8406c:	b480      	push	{r7}
   8406e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84070:	4b57      	ldr	r3, [pc, #348]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84074:	f003 0303 	and.w	r3, r3, #3
   84078:	2b03      	cmp	r3, #3
   8407a:	f200 808a 	bhi.w	84192 <SystemCoreClockUpdate+0x126>
   8407e:	a201      	add	r2, pc, #4	; (adr r2, 84084 <SystemCoreClockUpdate+0x18>)
   84080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84084:	00084095 	.word	0x00084095
   84088:	000840b5 	.word	0x000840b5
   8408c:	00084105 	.word	0x00084105
   84090:	00084105 	.word	0x00084105
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84094:	4b4f      	ldr	r3, [pc, #316]	; (841d4 <SystemCoreClockUpdate+0x168>)
   84096:	695b      	ldr	r3, [r3, #20]
   84098:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8409c:	2b00      	cmp	r3, #0
   8409e:	d004      	beq.n	840aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   840a0:	4b4d      	ldr	r3, [pc, #308]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   840a6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   840a8:	e073      	b.n	84192 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   840aa:	4b4b      	ldr	r3, [pc, #300]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840ac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   840b0:	601a      	str	r2, [r3, #0]
		break;
   840b2:	e06e      	b.n	84192 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   840b4:	4b46      	ldr	r3, [pc, #280]	; (841d0 <SystemCoreClockUpdate+0x164>)
   840b6:	6a1b      	ldr	r3, [r3, #32]
   840b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   840bc:	2b00      	cmp	r3, #0
   840be:	d003      	beq.n	840c8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   840c0:	4b45      	ldr	r3, [pc, #276]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840c2:	4a46      	ldr	r2, [pc, #280]	; (841dc <SystemCoreClockUpdate+0x170>)
   840c4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   840c6:	e064      	b.n	84192 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   840c8:	4b43      	ldr	r3, [pc, #268]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840ca:	4a45      	ldr	r2, [pc, #276]	; (841e0 <SystemCoreClockUpdate+0x174>)
   840cc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   840ce:	4b40      	ldr	r3, [pc, #256]	; (841d0 <SystemCoreClockUpdate+0x164>)
   840d0:	6a1b      	ldr	r3, [r3, #32]
   840d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840d6:	2b10      	cmp	r3, #16
   840d8:	d004      	beq.n	840e4 <SystemCoreClockUpdate+0x78>
   840da:	2b20      	cmp	r3, #32
   840dc:	d008      	beq.n	840f0 <SystemCoreClockUpdate+0x84>
   840de:	2b00      	cmp	r3, #0
   840e0:	d00e      	beq.n	84100 <SystemCoreClockUpdate+0x94>
				break;
   840e2:	e00e      	b.n	84102 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   840e4:	4b3c      	ldr	r3, [pc, #240]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840e6:	681b      	ldr	r3, [r3, #0]
   840e8:	005b      	lsls	r3, r3, #1
   840ea:	4a3b      	ldr	r2, [pc, #236]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840ec:	6013      	str	r3, [r2, #0]
				break;
   840ee:	e008      	b.n	84102 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   840f0:	4b39      	ldr	r3, [pc, #228]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840f2:	681a      	ldr	r2, [r3, #0]
   840f4:	4613      	mov	r3, r2
   840f6:	005b      	lsls	r3, r3, #1
   840f8:	4413      	add	r3, r2
   840fa:	4a37      	ldr	r2, [pc, #220]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   840fc:	6013      	str	r3, [r2, #0]
				break;
   840fe:	e000      	b.n	84102 <SystemCoreClockUpdate+0x96>
				break;
   84100:	bf00      	nop
		break;
   84102:	e046      	b.n	84192 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84104:	4b32      	ldr	r3, [pc, #200]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84106:	6a1b      	ldr	r3, [r3, #32]
   84108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8410c:	2b00      	cmp	r3, #0
   8410e:	d003      	beq.n	84118 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84110:	4b31      	ldr	r3, [pc, #196]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   84112:	4a32      	ldr	r2, [pc, #200]	; (841dc <SystemCoreClockUpdate+0x170>)
   84114:	601a      	str	r2, [r3, #0]
   84116:	e01c      	b.n	84152 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84118:	4b2f      	ldr	r3, [pc, #188]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8411a:	4a31      	ldr	r2, [pc, #196]	; (841e0 <SystemCoreClockUpdate+0x174>)
   8411c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8411e:	4b2c      	ldr	r3, [pc, #176]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84120:	6a1b      	ldr	r3, [r3, #32]
   84122:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84126:	2b10      	cmp	r3, #16
   84128:	d004      	beq.n	84134 <SystemCoreClockUpdate+0xc8>
   8412a:	2b20      	cmp	r3, #32
   8412c:	d008      	beq.n	84140 <SystemCoreClockUpdate+0xd4>
   8412e:	2b00      	cmp	r3, #0
   84130:	d00e      	beq.n	84150 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84132:	e00e      	b.n	84152 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   84134:	4b28      	ldr	r3, [pc, #160]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   84136:	681b      	ldr	r3, [r3, #0]
   84138:	005b      	lsls	r3, r3, #1
   8413a:	4a27      	ldr	r2, [pc, #156]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8413c:	6013      	str	r3, [r2, #0]
				break;
   8413e:	e008      	b.n	84152 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   84140:	4b25      	ldr	r3, [pc, #148]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   84142:	681a      	ldr	r2, [r3, #0]
   84144:	4613      	mov	r3, r2
   84146:	005b      	lsls	r3, r3, #1
   84148:	4413      	add	r3, r2
   8414a:	4a23      	ldr	r2, [pc, #140]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8414c:	6013      	str	r3, [r2, #0]
				break;
   8414e:	e000      	b.n	84152 <SystemCoreClockUpdate+0xe6>
				break;
   84150:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84152:	4b1f      	ldr	r3, [pc, #124]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84156:	f003 0303 	and.w	r3, r3, #3
   8415a:	2b02      	cmp	r3, #2
   8415c:	d115      	bne.n	8418a <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8415e:	4b1c      	ldr	r3, [pc, #112]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84162:	0c1b      	lsrs	r3, r3, #16
   84164:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   84168:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8416a:	4a1b      	ldr	r2, [pc, #108]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8416c:	6812      	ldr	r2, [r2, #0]
   8416e:	fb02 f303 	mul.w	r3, r2, r3
   84172:	4a19      	ldr	r2, [pc, #100]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   84174:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84176:	4b16      	ldr	r3, [pc, #88]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8417a:	b2db      	uxtb	r3, r3
   8417c:	4a16      	ldr	r2, [pc, #88]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8417e:	6812      	ldr	r2, [r2, #0]
   84180:	fbb2 f3f3 	udiv	r3, r2, r3
   84184:	4a14      	ldr	r2, [pc, #80]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   84186:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   84188:	e002      	b.n	84190 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8418a:	4b13      	ldr	r3, [pc, #76]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   8418c:	4a15      	ldr	r2, [pc, #84]	; (841e4 <SystemCoreClockUpdate+0x178>)
   8418e:	601a      	str	r2, [r3, #0]
		break;
   84190:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84192:	4b0f      	ldr	r3, [pc, #60]	; (841d0 <SystemCoreClockUpdate+0x164>)
   84194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84196:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8419a:	2b70      	cmp	r3, #112	; 0x70
   8419c:	d108      	bne.n	841b0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8419e:	4b0e      	ldr	r3, [pc, #56]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   841a0:	681b      	ldr	r3, [r3, #0]
   841a2:	4a11      	ldr	r2, [pc, #68]	; (841e8 <SystemCoreClockUpdate+0x17c>)
   841a4:	fba2 2303 	umull	r2, r3, r2, r3
   841a8:	085b      	lsrs	r3, r3, #1
   841aa:	4a0b      	ldr	r2, [pc, #44]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   841ac:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   841ae:	e00a      	b.n	841c6 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   841b0:	4b07      	ldr	r3, [pc, #28]	; (841d0 <SystemCoreClockUpdate+0x164>)
   841b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841b4:	091b      	lsrs	r3, r3, #4
   841b6:	f003 0307 	and.w	r3, r3, #7
   841ba:	4a07      	ldr	r2, [pc, #28]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   841bc:	6812      	ldr	r2, [r2, #0]
   841be:	fa22 f303 	lsr.w	r3, r2, r3
   841c2:	4a05      	ldr	r2, [pc, #20]	; (841d8 <SystemCoreClockUpdate+0x16c>)
   841c4:	6013      	str	r3, [r2, #0]
}
   841c6:	bf00      	nop
   841c8:	46bd      	mov	sp, r7
   841ca:	bc80      	pop	{r7}
   841cc:	4770      	bx	lr
   841ce:	bf00      	nop
   841d0:	400e0600 	.word	0x400e0600
   841d4:	400e1a10 	.word	0x400e1a10
   841d8:	2007019c 	.word	0x2007019c
   841dc:	00b71b00 	.word	0x00b71b00
   841e0:	003d0900 	.word	0x003d0900
   841e4:	0e4e1c00 	.word	0x0e4e1c00
   841e8:	aaaaaaab 	.word	0xaaaaaaab

000841ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   841ec:	b480      	push	{r7}
   841ee:	b085      	sub	sp, #20
   841f0:	af00      	add	r7, sp, #0
   841f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   841f4:	4b10      	ldr	r3, [pc, #64]	; (84238 <_sbrk+0x4c>)
   841f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   841f8:	4b10      	ldr	r3, [pc, #64]	; (8423c <_sbrk+0x50>)
   841fa:	681b      	ldr	r3, [r3, #0]
   841fc:	2b00      	cmp	r3, #0
   841fe:	d102      	bne.n	84206 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84200:	4b0e      	ldr	r3, [pc, #56]	; (8423c <_sbrk+0x50>)
   84202:	4a0f      	ldr	r2, [pc, #60]	; (84240 <_sbrk+0x54>)
   84204:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   84206:	4b0d      	ldr	r3, [pc, #52]	; (8423c <_sbrk+0x50>)
   84208:	681b      	ldr	r3, [r3, #0]
   8420a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   8420c:	68ba      	ldr	r2, [r7, #8]
   8420e:	687b      	ldr	r3, [r7, #4]
   84210:	441a      	add	r2, r3
   84212:	68fb      	ldr	r3, [r7, #12]
   84214:	429a      	cmp	r2, r3
   84216:	dd02      	ble.n	8421e <_sbrk+0x32>
		return (caddr_t) -1;	
   84218:	f04f 33ff 	mov.w	r3, #4294967295
   8421c:	e006      	b.n	8422c <_sbrk+0x40>
	}

	heap += incr;
   8421e:	4b07      	ldr	r3, [pc, #28]	; (8423c <_sbrk+0x50>)
   84220:	681a      	ldr	r2, [r3, #0]
   84222:	687b      	ldr	r3, [r7, #4]
   84224:	4413      	add	r3, r2
   84226:	4a05      	ldr	r2, [pc, #20]	; (8423c <_sbrk+0x50>)
   84228:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8422a:	68bb      	ldr	r3, [r7, #8]
}
   8422c:	4618      	mov	r0, r3
   8422e:	3714      	adds	r7, #20
   84230:	46bd      	mov	sp, r7
   84232:	bc80      	pop	{r7}
   84234:	4770      	bx	lr
   84236:	bf00      	nop
   84238:	20087ffc 	.word	0x20087ffc
   8423c:	20070dcc 	.word	0x20070dcc
   84240:	20072ff8 	.word	0x20072ff8

00084244 <NVIC_SetPriority>:
{
   84244:	b480      	push	{r7}
   84246:	b083      	sub	sp, #12
   84248:	af00      	add	r7, sp, #0
   8424a:	4603      	mov	r3, r0
   8424c:	6039      	str	r1, [r7, #0]
   8424e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   84250:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84254:	2b00      	cmp	r3, #0
   84256:	da0b      	bge.n	84270 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84258:	490d      	ldr	r1, [pc, #52]	; (84290 <NVIC_SetPriority+0x4c>)
   8425a:	79fb      	ldrb	r3, [r7, #7]
   8425c:	f003 030f 	and.w	r3, r3, #15
   84260:	3b04      	subs	r3, #4
   84262:	683a      	ldr	r2, [r7, #0]
   84264:	b2d2      	uxtb	r2, r2
   84266:	0112      	lsls	r2, r2, #4
   84268:	b2d2      	uxtb	r2, r2
   8426a:	440b      	add	r3, r1
   8426c:	761a      	strb	r2, [r3, #24]
}
   8426e:	e009      	b.n	84284 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84270:	4908      	ldr	r1, [pc, #32]	; (84294 <NVIC_SetPriority+0x50>)
   84272:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84276:	683a      	ldr	r2, [r7, #0]
   84278:	b2d2      	uxtb	r2, r2
   8427a:	0112      	lsls	r2, r2, #4
   8427c:	b2d2      	uxtb	r2, r2
   8427e:	440b      	add	r3, r1
   84280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84284:	bf00      	nop
   84286:	370c      	adds	r7, #12
   84288:	46bd      	mov	sp, r7
   8428a:	bc80      	pop	{r7}
   8428c:	4770      	bx	lr
   8428e:	bf00      	nop
   84290:	e000ed00 	.word	0xe000ed00
   84294:	e000e100 	.word	0xe000e100

00084298 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   84298:	b580      	push	{r7, lr}
   8429a:	b082      	sub	sp, #8
   8429c:	af00      	add	r7, sp, #0
   8429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   842a0:	687b      	ldr	r3, [r7, #4]
   842a2:	3b01      	subs	r3, #1
   842a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   842a8:	d301      	bcc.n	842ae <SysTick_Config+0x16>
   842aa:	2301      	movs	r3, #1
   842ac:	e00f      	b.n	842ce <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   842ae:	4a0a      	ldr	r2, [pc, #40]	; (842d8 <SysTick_Config+0x40>)
   842b0:	687b      	ldr	r3, [r7, #4]
   842b2:	3b01      	subs	r3, #1
   842b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   842b6:	210f      	movs	r1, #15
   842b8:	f04f 30ff 	mov.w	r0, #4294967295
   842bc:	4b07      	ldr	r3, [pc, #28]	; (842dc <SysTick_Config+0x44>)
   842be:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   842c0:	4b05      	ldr	r3, [pc, #20]	; (842d8 <SysTick_Config+0x40>)
   842c2:	2200      	movs	r2, #0
   842c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   842c6:	4b04      	ldr	r3, [pc, #16]	; (842d8 <SysTick_Config+0x40>)
   842c8:	2207      	movs	r2, #7
   842ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   842cc:	2300      	movs	r3, #0
}
   842ce:	4618      	mov	r0, r3
   842d0:	3708      	adds	r7, #8
   842d2:	46bd      	mov	sp, r7
   842d4:	bd80      	pop	{r7, pc}
   842d6:	bf00      	nop
   842d8:	e000e010 	.word	0xe000e010
   842dc:	00084245 	.word	0x00084245

000842e0 <osc_get_rate>:
{
   842e0:	b480      	push	{r7}
   842e2:	b083      	sub	sp, #12
   842e4:	af00      	add	r7, sp, #0
   842e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   842e8:	687b      	ldr	r3, [r7, #4]
   842ea:	2b07      	cmp	r3, #7
   842ec:	d825      	bhi.n	8433a <osc_get_rate+0x5a>
   842ee:	a201      	add	r2, pc, #4	; (adr r2, 842f4 <osc_get_rate+0x14>)
   842f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   842f4:	00084315 	.word	0x00084315
   842f8:	0008431b 	.word	0x0008431b
   842fc:	00084321 	.word	0x00084321
   84300:	00084327 	.word	0x00084327
   84304:	0008432b 	.word	0x0008432b
   84308:	0008432f 	.word	0x0008432f
   8430c:	00084333 	.word	0x00084333
   84310:	00084337 	.word	0x00084337
		return OSC_SLCK_32K_RC_HZ;
   84314:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84318:	e010      	b.n	8433c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
   8431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8431e:	e00d      	b.n	8433c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
   84320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84324:	e00a      	b.n	8433c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
   84326:	4b08      	ldr	r3, [pc, #32]	; (84348 <osc_get_rate+0x68>)
   84328:	e008      	b.n	8433c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
   8432a:	4b08      	ldr	r3, [pc, #32]	; (8434c <osc_get_rate+0x6c>)
   8432c:	e006      	b.n	8433c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
   8432e:	4b08      	ldr	r3, [pc, #32]	; (84350 <osc_get_rate+0x70>)
   84330:	e004      	b.n	8433c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
   84332:	4b07      	ldr	r3, [pc, #28]	; (84350 <osc_get_rate+0x70>)
   84334:	e002      	b.n	8433c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
   84336:	4b06      	ldr	r3, [pc, #24]	; (84350 <osc_get_rate+0x70>)
   84338:	e000      	b.n	8433c <osc_get_rate+0x5c>
	return 0;
   8433a:	2300      	movs	r3, #0
}
   8433c:	4618      	mov	r0, r3
   8433e:	370c      	adds	r7, #12
   84340:	46bd      	mov	sp, r7
   84342:	bc80      	pop	{r7}
   84344:	4770      	bx	lr
   84346:	bf00      	nop
   84348:	003d0900 	.word	0x003d0900
   8434c:	007a1200 	.word	0x007a1200
   84350:	00b71b00 	.word	0x00b71b00

00084354 <sysclk_get_main_hz>:
{
   84354:	b580      	push	{r7, lr}
   84356:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84358:	2006      	movs	r0, #6
   8435a:	4b04      	ldr	r3, [pc, #16]	; (8436c <sysclk_get_main_hz+0x18>)
   8435c:	4798      	blx	r3
   8435e:	4602      	mov	r2, r0
   84360:	4613      	mov	r3, r2
   84362:	00db      	lsls	r3, r3, #3
   84364:	1a9b      	subs	r3, r3, r2
   84366:	005b      	lsls	r3, r3, #1
}
   84368:	4618      	mov	r0, r3
   8436a:	bd80      	pop	{r7, pc}
   8436c:	000842e1 	.word	0x000842e1

00084370 <sysclk_get_cpu_hz>:
{
   84370:	b580      	push	{r7, lr}
   84372:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   84374:	4b02      	ldr	r3, [pc, #8]	; (84380 <sysclk_get_cpu_hz+0x10>)
   84376:	4798      	blx	r3
   84378:	4603      	mov	r3, r0
   8437a:	085b      	lsrs	r3, r3, #1
}
   8437c:	4618      	mov	r0, r3
   8437e:	bd80      	pop	{r7, pc}
   84380:	00084355 	.word	0x00084355

00084384 <ioport_set_pin_level>:
{
   84384:	b480      	push	{r7}
   84386:	b08b      	sub	sp, #44	; 0x2c
   84388:	af00      	add	r7, sp, #0
   8438a:	6078      	str	r0, [r7, #4]
   8438c:	460b      	mov	r3, r1
   8438e:	70fb      	strb	r3, [r7, #3]
   84390:	687b      	ldr	r3, [r7, #4]
   84392:	627b      	str	r3, [r7, #36]	; 0x24
   84394:	78fb      	ldrb	r3, [r7, #3]
   84396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8439c:	61fb      	str	r3, [r7, #28]
   8439e:	69fb      	ldr	r3, [r7, #28]
   843a0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
   843a2:	69bb      	ldr	r3, [r7, #24]
   843a4:	095b      	lsrs	r3, r3, #5
   843a6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   843a8:	697b      	ldr	r3, [r7, #20]
   843aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   843ae:	f203 7307 	addw	r3, r3, #1799	; 0x707
   843b2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
   843b4:	613b      	str	r3, [r7, #16]
	if (level) {
   843b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   843ba:	2b00      	cmp	r3, #0
   843bc:	d009      	beq.n	843d2 <ioport_set_pin_level+0x4e>
   843be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   843c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   843c2:	68fb      	ldr	r3, [r7, #12]
   843c4:	f003 031f 	and.w	r3, r3, #31
   843c8:	2201      	movs	r2, #1
   843ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   843cc:	693b      	ldr	r3, [r7, #16]
   843ce:	631a      	str	r2, [r3, #48]	; 0x30
}
   843d0:	e008      	b.n	843e4 <ioport_set_pin_level+0x60>
   843d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   843d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
   843d6:	68bb      	ldr	r3, [r7, #8]
   843d8:	f003 031f 	and.w	r3, r3, #31
   843dc:	2201      	movs	r2, #1
   843de:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   843e0:	693b      	ldr	r3, [r7, #16]
   843e2:	635a      	str	r2, [r3, #52]	; 0x34
   843e4:	bf00      	nop
   843e6:	372c      	adds	r7, #44	; 0x2c
   843e8:	46bd      	mov	sp, r7
   843ea:	bc80      	pop	{r7}
   843ec:	4770      	bx	lr

000843ee <ioport_get_pin_level>:
{
   843ee:	b480      	push	{r7}
   843f0:	b089      	sub	sp, #36	; 0x24
   843f2:	af00      	add	r7, sp, #0
   843f4:	6078      	str	r0, [r7, #4]
   843f6:	687b      	ldr	r3, [r7, #4]
   843f8:	61fb      	str	r3, [r7, #28]
   843fa:	69fb      	ldr	r3, [r7, #28]
   843fc:	61bb      	str	r3, [r7, #24]
   843fe:	69bb      	ldr	r3, [r7, #24]
   84400:	617b      	str	r3, [r7, #20]
	return pin >> 5;
   84402:	697b      	ldr	r3, [r7, #20]
   84404:	095b      	lsrs	r3, r3, #5
   84406:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   84408:	693b      	ldr	r3, [r7, #16]
   8440a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8440e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   84412:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84416:	69fb      	ldr	r3, [r7, #28]
   84418:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
   8441a:	68fb      	ldr	r3, [r7, #12]
   8441c:	f003 031f 	and.w	r3, r3, #31
   84420:	2101      	movs	r1, #1
   84422:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   84426:	4013      	ands	r3, r2
   84428:	2b00      	cmp	r3, #0
   8442a:	bf14      	ite	ne
   8442c:	2301      	movne	r3, #1
   8442e:	2300      	moveq	r3, #0
   84430:	b2db      	uxtb	r3, r3
}
   84432:	4618      	mov	r0, r3
   84434:	3724      	adds	r7, #36	; 0x24
   84436:	46bd      	mov	sp, r7
   84438:	bc80      	pop	{r7}
   8443a:	4770      	bx	lr

0008443c <main>:

void noOS_bootup_sequence(void);
void set_led(ioport_pin_t pin, Bool level);

int main(void)
{
   8443c:	b580      	push	{r7, lr}
   8443e:	b082      	sub	sp, #8
   84440:	af00      	add	r7, sp, #0
    event_t act_event;

    sysclk_init();
   84442:	4b1b      	ldr	r3, [pc, #108]	; (844b0 <main+0x74>)
   84444:	4798      	blx	r3
    board_init();
   84446:	4b1b      	ldr	r3, [pc, #108]	; (844b4 <main+0x78>)
   84448:	4798      	blx	r3
    SysTick_Config(sysclk_get_cpu_hz() / 1000);
   8444a:	4b1b      	ldr	r3, [pc, #108]	; (844b8 <main+0x7c>)
   8444c:	4798      	blx	r3
   8444e:	4602      	mov	r2, r0
   84450:	4b1a      	ldr	r3, [pc, #104]	; (844bc <main+0x80>)
   84452:	fba3 2302 	umull	r2, r3, r3, r2
   84456:	099b      	lsrs	r3, r3, #6
   84458:	4618      	mov	r0, r3
   8445a:	4b19      	ldr	r3, [pc, #100]	; (844c0 <main+0x84>)
   8445c:	4798      	blx	r3
    
    motor_init();
   8445e:	4b19      	ldr	r3, [pc, #100]	; (844c4 <main+0x88>)
   84460:	4798      	blx	r3

    spi_init();
   84462:	4b19      	ldr	r3, [pc, #100]	; (844c8 <main+0x8c>)
   84464:	4798      	blx	r3
    
    compass_init();
   84466:	4b19      	ldr	r3, [pc, #100]	; (844cc <main+0x90>)
   84468:	4798      	blx	r3
    lcd_init();
   8446a:	4b19      	ldr	r3, [pc, #100]	; (844d0 <main+0x94>)
   8446c:	4798      	blx	r3
    
    noOS_bootup_sequence();
   8446e:	4b19      	ldr	r3, [pc, #100]	; (844d4 <main+0x98>)
   84470:	4798      	blx	r3

    enable_motor();
   84472:	4b19      	ldr	r3, [pc, #100]	; (844d8 <main+0x9c>)
   84474:	4798      	blx	r3
    pwm_channel_enable(PWM, MOTOR_RIGHT);
    pwm_channel_enable(PWM, MOTOR_REAR);*/

    while (1)
    {
        update_comm();
   84476:	4b19      	ldr	r3, [pc, #100]	; (844dc <main+0xa0>)
   84478:	4798      	blx	r3
        update_heartbeat();
   8447a:	4b19      	ldr	r3, [pc, #100]	; (844e0 <main+0xa4>)
   8447c:	4798      	blx	r3
        //check_battery();
        
        if (stm.ibit.heartbeat)
   8447e:	4b19      	ldr	r3, [pc, #100]	; (844e4 <main+0xa8>)
   84480:	781b      	ldrb	r3, [r3, #0]
   84482:	f003 0301 	and.w	r3, r3, #1
   84486:	b2db      	uxtb	r3, r3
   84488:	2b00      	cmp	r3, #0
   8448a:	d004      	beq.n	84496 <main+0x5a>
        {
            set_led(LED_M2, 1);
   8448c:	2101      	movs	r1, #1
   8448e:	2068      	movs	r0, #104	; 0x68
   84490:	4b15      	ldr	r3, [pc, #84]	; (844e8 <main+0xac>)
   84492:	4798      	blx	r3
   84494:	e003      	b.n	8449e <main+0x62>
        }
        else
        {
            set_led(LED_M2, 0);
   84496:	2100      	movs	r1, #0
   84498:	2068      	movs	r0, #104	; 0x68
   8449a:	4b13      	ldr	r3, [pc, #76]	; (844e8 <main+0xac>)
   8449c:	4798      	blx	r3
        motor_speed(MOTOR_RIGHT, 50);
        motor_speed(MOTOR_REAR, 50);*/

        //update_motor(1, 1, 1);

        act_event = button_events();
   8449e:	4b13      	ldr	r3, [pc, #76]	; (844ec <main+0xb0>)
   844a0:	4798      	blx	r3
   844a2:	4603      	mov	r3, r0
   844a4:	71fb      	strb	r3, [r7, #7]
        
        menu(act_event);
   844a6:	79fb      	ldrb	r3, [r7, #7]
   844a8:	4618      	mov	r0, r3
   844aa:	4b11      	ldr	r3, [pc, #68]	; (844f0 <main+0xb4>)
   844ac:	4798      	blx	r3
        update_comm();
   844ae:	e7e2      	b.n	84476 <main+0x3a>
   844b0:	0008341d 	.word	0x0008341d
   844b4:	00083c85 	.word	0x00083c85
   844b8:	00084371 	.word	0x00084371
   844bc:	10624dd3 	.word	0x10624dd3
   844c0:	00084299 	.word	0x00084299
   844c4:	00082945 	.word	0x00082945
   844c8:	00080a8d 	.word	0x00080a8d
   844cc:	0008136d 	.word	0x0008136d
   844d0:	000815ad 	.word	0x000815ad
   844d4:	000844f5 	.word	0x000844f5
   844d8:	00082b2d 	.word	0x00082b2d
   844dc:	00082f91 	.word	0x00082f91
   844e0:	00083085 	.word	0x00083085
   844e4:	20070e10 	.word	0x20070e10
   844e8:	000846a9 	.word	0x000846a9
   844ec:	00082581 	.word	0x00082581
   844f0:	00081bf1 	.word	0x00081bf1

000844f4 <noOS_bootup_sequence>:
    }
}

void noOS_bootup_sequence(void)
{
   844f4:	b580      	push	{r7, lr}
   844f6:	b082      	sub	sp, #8
   844f8:	af00      	add	r7, sp, #0
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   844fa:	e072      	b.n	845e2 <noOS_bootup_sequence+0xee>
    {
        if (getTicks() >= (ticks_blink_update + 800))
   844fc:	4b5e      	ldr	r3, [pc, #376]	; (84678 <noOS_bootup_sequence+0x184>)
   844fe:	4798      	blx	r3
   84500:	4602      	mov	r2, r0
   84502:	4b5e      	ldr	r3, [pc, #376]	; (8467c <noOS_bootup_sequence+0x188>)
   84504:	681b      	ldr	r3, [r3, #0]
   84506:	f503 7348 	add.w	r3, r3, #800	; 0x320
   8450a:	429a      	cmp	r2, r3
   8450c:	d31a      	bcc.n	84544 <noOS_bootup_sequence+0x50>
        {
            ticks_blink_update = getTicks();
   8450e:	4b5a      	ldr	r3, [pc, #360]	; (84678 <noOS_bootup_sequence+0x184>)
   84510:	4798      	blx	r3
   84512:	4602      	mov	r2, r0
   84514:	4b59      	ldr	r3, [pc, #356]	; (8467c <noOS_bootup_sequence+0x188>)
   84516:	601a      	str	r2, [r3, #0]
            
            if (blink_level)
   84518:	4b59      	ldr	r3, [pc, #356]	; (84680 <noOS_bootup_sequence+0x18c>)
   8451a:	781b      	ldrb	r3, [r3, #0]
   8451c:	2b00      	cmp	r3, #0
   8451e:	d003      	beq.n	84528 <noOS_bootup_sequence+0x34>
            {
                blink_level = 0;
   84520:	4b57      	ldr	r3, [pc, #348]	; (84680 <noOS_bootup_sequence+0x18c>)
   84522:	2200      	movs	r2, #0
   84524:	701a      	strb	r2, [r3, #0]
   84526:	e002      	b.n	8452e <noOS_bootup_sequence+0x3a>
            }
            else
            {
                blink_level = 1;
   84528:	4b55      	ldr	r3, [pc, #340]	; (84680 <noOS_bootup_sequence+0x18c>)
   8452a:	2201      	movs	r2, #1
   8452c:	701a      	strb	r2, [r3, #0]
            }
            
            ioport_set_pin_level(LED_BAT, blink_level);
   8452e:	4b54      	ldr	r3, [pc, #336]	; (84680 <noOS_bootup_sequence+0x18c>)
   84530:	781b      	ldrb	r3, [r3, #0]
   84532:	2b00      	cmp	r3, #0
   84534:	bf14      	ite	ne
   84536:	2301      	movne	r3, #1
   84538:	2300      	moveq	r3, #0
   8453a:	b2db      	uxtb	r3, r3
   8453c:	4619      	mov	r1, r3
   8453e:	2066      	movs	r0, #102	; 0x66
   84540:	4b50      	ldr	r3, [pc, #320]	; (84684 <noOS_bootup_sequence+0x190>)
   84542:	4798      	blx	r3
        }
        
        if (getTicks() >= (ticks_dot_update + 500))
   84544:	4b4c      	ldr	r3, [pc, #304]	; (84678 <noOS_bootup_sequence+0x184>)
   84546:	4798      	blx	r3
   84548:	4602      	mov	r2, r0
   8454a:	4b4f      	ldr	r3, [pc, #316]	; (84688 <noOS_bootup_sequence+0x194>)
   8454c:	681b      	ldr	r3, [r3, #0]
   8454e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   84552:	429a      	cmp	r2, r3
   84554:	d315      	bcc.n	84582 <noOS_bootup_sequence+0x8e>
        {
            ticks_dot_update = getTicks();
   84556:	4b48      	ldr	r3, [pc, #288]	; (84678 <noOS_bootup_sequence+0x184>)
   84558:	4798      	blx	r3
   8455a:	4602      	mov	r2, r0
   8455c:	4b4a      	ldr	r3, [pc, #296]	; (84688 <noOS_bootup_sequence+0x194>)
   8455e:	601a      	str	r2, [r3, #0]
            
            if (dots < 3)
   84560:	4b4a      	ldr	r3, [pc, #296]	; (8468c <noOS_bootup_sequence+0x198>)
   84562:	781b      	ldrb	r3, [r3, #0]
   84564:	2b02      	cmp	r3, #2
   84566:	d806      	bhi.n	84576 <noOS_bootup_sequence+0x82>
            {
                dots++;
   84568:	4b48      	ldr	r3, [pc, #288]	; (8468c <noOS_bootup_sequence+0x198>)
   8456a:	781b      	ldrb	r3, [r3, #0]
   8456c:	3301      	adds	r3, #1
   8456e:	b2da      	uxtb	r2, r3
   84570:	4b46      	ldr	r3, [pc, #280]	; (8468c <noOS_bootup_sequence+0x198>)
   84572:	701a      	strb	r2, [r3, #0]
   84574:	e002      	b.n	8457c <noOS_bootup_sequence+0x88>
            }
            else
            {
                dots = 0;
   84576:	4b45      	ldr	r3, [pc, #276]	; (8468c <noOS_bootup_sequence+0x198>)
   84578:	2200      	movs	r2, #0
   8457a:	701a      	strb	r2, [r3, #0]
            }
            
            update_dots = 1;
   8457c:	4b44      	ldr	r3, [pc, #272]	; (84690 <noOS_bootup_sequence+0x19c>)
   8457e:	2201      	movs	r2, #1
   84580:	701a      	strb	r2, [r3, #0]
        }
        
        if (update_dots)
   84582:	4b43      	ldr	r3, [pc, #268]	; (84690 <noOS_bootup_sequence+0x19c>)
   84584:	781b      	ldrb	r3, [r3, #0]
   84586:	2b00      	cmp	r3, #0
   84588:	d02b      	beq.n	845e2 <noOS_bootup_sequence+0xee>
        {
            update_dots = 0;
   8458a:	4b41      	ldr	r3, [pc, #260]	; (84690 <noOS_bootup_sequence+0x19c>)
   8458c:	2200      	movs	r2, #0
   8458e:	701a      	strb	r2, [r3, #0]
            
            switch (dots)
   84590:	4b3e      	ldr	r3, [pc, #248]	; (8468c <noOS_bootup_sequence+0x198>)
   84592:	781b      	ldrb	r3, [r3, #0]
   84594:	2b03      	cmp	r3, #3
   84596:	d823      	bhi.n	845e0 <noOS_bootup_sequence+0xec>
   84598:	a201      	add	r2, pc, #4	; (adr r2, 845a0 <noOS_bootup_sequence+0xac>)
   8459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8459e:	bf00      	nop
   845a0:	000845b1 	.word	0x000845b1
   845a4:	000845bd 	.word	0x000845bd
   845a8:	000845c9 	.word	0x000845c9
   845ac:	000845d5 	.word	0x000845d5
            {
                case 0:
                lcd_print_s(2, 2, "booting noOS   ");
   845b0:	4a38      	ldr	r2, [pc, #224]	; (84694 <noOS_bootup_sequence+0x1a0>)
   845b2:	2102      	movs	r1, #2
   845b4:	2002      	movs	r0, #2
   845b6:	4b38      	ldr	r3, [pc, #224]	; (84698 <noOS_bootup_sequence+0x1a4>)
   845b8:	4798      	blx	r3
                break;
   845ba:	e012      	b.n	845e2 <noOS_bootup_sequence+0xee>
                case 1:
                lcd_print_s(2, 14, ".");
   845bc:	4a37      	ldr	r2, [pc, #220]	; (8469c <noOS_bootup_sequence+0x1a8>)
   845be:	210e      	movs	r1, #14
   845c0:	2002      	movs	r0, #2
   845c2:	4b35      	ldr	r3, [pc, #212]	; (84698 <noOS_bootup_sequence+0x1a4>)
   845c4:	4798      	blx	r3
                break;
   845c6:	e00c      	b.n	845e2 <noOS_bootup_sequence+0xee>
                case 2:
                lcd_print_s(2, 15, ".");
   845c8:	4a34      	ldr	r2, [pc, #208]	; (8469c <noOS_bootup_sequence+0x1a8>)
   845ca:	210f      	movs	r1, #15
   845cc:	2002      	movs	r0, #2
   845ce:	4b32      	ldr	r3, [pc, #200]	; (84698 <noOS_bootup_sequence+0x1a4>)
   845d0:	4798      	blx	r3
                break;
   845d2:	e006      	b.n	845e2 <noOS_bootup_sequence+0xee>
                case 3:
                lcd_print_s(2, 16, ".");
   845d4:	4a31      	ldr	r2, [pc, #196]	; (8469c <noOS_bootup_sequence+0x1a8>)
   845d6:	2110      	movs	r1, #16
   845d8:	2002      	movs	r0, #2
   845da:	4b2f      	ldr	r3, [pc, #188]	; (84698 <noOS_bootup_sequence+0x1a4>)
   845dc:	4798      	blx	r3
                break;
   845de:	e000      	b.n	845e2 <noOS_bootup_sequence+0xee>
                default:
                break;
   845e0:	bf00      	nop
    while (!ioport_get_pin_level(RPI2) && ioport_get_pin_level(PB_MID))
   845e2:	2008      	movs	r0, #8
   845e4:	4b2e      	ldr	r3, [pc, #184]	; (846a0 <noOS_bootup_sequence+0x1ac>)
   845e6:	4798      	blx	r3
   845e8:	4603      	mov	r3, r0
   845ea:	f083 0301 	eor.w	r3, r3, #1
   845ee:	b2db      	uxtb	r3, r3
   845f0:	2b00      	cmp	r3, #0
   845f2:	d006      	beq.n	84602 <noOS_bootup_sequence+0x10e>
   845f4:	2062      	movs	r0, #98	; 0x62
   845f6:	4b2a      	ldr	r3, [pc, #168]	; (846a0 <noOS_bootup_sequence+0x1ac>)
   845f8:	4798      	blx	r3
   845fa:	4603      	mov	r3, r0
   845fc:	2b00      	cmp	r3, #0
   845fe:	f47f af7d 	bne.w	844fc <noOS_bootup_sequence+0x8>
            }
        }
    }
    
    for(int i = 0; i< 3; i++)
   84602:	2300      	movs	r3, #0
   84604:	607b      	str	r3, [r7, #4]
   84606:	e030      	b.n	8466a <noOS_bootup_sequence+0x176>
    {
        ioport_set_pin_level(LED_ONBOARD, 1);
   84608:	2101      	movs	r1, #1
   8460a:	206a      	movs	r0, #106	; 0x6a
   8460c:	4b1d      	ldr	r3, [pc, #116]	; (84684 <noOS_bootup_sequence+0x190>)
   8460e:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 1);
   84610:	2101      	movs	r1, #1
   84612:	2066      	movs	r0, #102	; 0x66
   84614:	4b1b      	ldr	r3, [pc, #108]	; (84684 <noOS_bootup_sequence+0x190>)
   84616:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 1);
   84618:	2101      	movs	r1, #1
   8461a:	2067      	movs	r0, #103	; 0x67
   8461c:	4b19      	ldr	r3, [pc, #100]	; (84684 <noOS_bootup_sequence+0x190>)
   8461e:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 1);
   84620:	2101      	movs	r1, #1
   84622:	2068      	movs	r0, #104	; 0x68
   84624:	4b17      	ldr	r3, [pc, #92]	; (84684 <noOS_bootup_sequence+0x190>)
   84626:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 1);
   84628:	2101      	movs	r1, #1
   8462a:	2069      	movs	r0, #105	; 0x69
   8462c:	4b15      	ldr	r3, [pc, #84]	; (84684 <noOS_bootup_sequence+0x190>)
   8462e:	4798      	blx	r3
        mdelay(100);
   84630:	2064      	movs	r0, #100	; 0x64
   84632:	4b1c      	ldr	r3, [pc, #112]	; (846a4 <noOS_bootup_sequence+0x1b0>)
   84634:	4798      	blx	r3
        ioport_set_pin_level(LED_ONBOARD, 0);
   84636:	2100      	movs	r1, #0
   84638:	206a      	movs	r0, #106	; 0x6a
   8463a:	4b12      	ldr	r3, [pc, #72]	; (84684 <noOS_bootup_sequence+0x190>)
   8463c:	4798      	blx	r3
        ioport_set_pin_level(LED_BAT, 0);
   8463e:	2100      	movs	r1, #0
   84640:	2066      	movs	r0, #102	; 0x66
   84642:	4b10      	ldr	r3, [pc, #64]	; (84684 <noOS_bootup_sequence+0x190>)
   84644:	4798      	blx	r3
        ioport_set_pin_level(LED_M1, 0);
   84646:	2100      	movs	r1, #0
   84648:	2067      	movs	r0, #103	; 0x67
   8464a:	4b0e      	ldr	r3, [pc, #56]	; (84684 <noOS_bootup_sequence+0x190>)
   8464c:	4798      	blx	r3
        ioport_set_pin_level(LED_M2, 0);
   8464e:	2100      	movs	r1, #0
   84650:	2068      	movs	r0, #104	; 0x68
   84652:	4b0c      	ldr	r3, [pc, #48]	; (84684 <noOS_bootup_sequence+0x190>)
   84654:	4798      	blx	r3
        ioport_set_pin_level(LED_M3, 0);
   84656:	2100      	movs	r1, #0
   84658:	2069      	movs	r0, #105	; 0x69
   8465a:	4b0a      	ldr	r3, [pc, #40]	; (84684 <noOS_bootup_sequence+0x190>)
   8465c:	4798      	blx	r3
        mdelay(100);
   8465e:	2064      	movs	r0, #100	; 0x64
   84660:	4b10      	ldr	r3, [pc, #64]	; (846a4 <noOS_bootup_sequence+0x1b0>)
   84662:	4798      	blx	r3
    for(int i = 0; i< 3; i++)
   84664:	687b      	ldr	r3, [r7, #4]
   84666:	3301      	adds	r3, #1
   84668:	607b      	str	r3, [r7, #4]
   8466a:	687b      	ldr	r3, [r7, #4]
   8466c:	2b02      	cmp	r3, #2
   8466e:	ddcb      	ble.n	84608 <noOS_bootup_sequence+0x114>
    }
}
   84670:	bf00      	nop
   84672:	3708      	adds	r7, #8
   84674:	46bd      	mov	sp, r7
   84676:	bd80      	pop	{r7, pc}
   84678:	00082f51 	.word	0x00082f51
   8467c:	20070fc4 	.word	0x20070fc4
   84680:	20070fc0 	.word	0x20070fc0
   84684:	00084385 	.word	0x00084385
   84688:	20070fc8 	.word	0x20070fc8
   8468c:	20070dd0 	.word	0x20070dd0
   84690:	200701a0 	.word	0x200701a0
   84694:	000896bc 	.word	0x000896bc
   84698:	0008169d 	.word	0x0008169d
   8469c:	000896cc 	.word	0x000896cc
   846a0:	000843ef 	.word	0x000843ef
   846a4:	00082f65 	.word	0x00082f65

000846a8 <set_led>:

void set_led(ioport_pin_t pin, Bool level)
{
   846a8:	b580      	push	{r7, lr}
   846aa:	b082      	sub	sp, #8
   846ac:	af00      	add	r7, sp, #0
   846ae:	6078      	str	r0, [r7, #4]
   846b0:	460b      	mov	r3, r1
   846b2:	70fb      	strb	r3, [r7, #3]
    if (allow_leds)
   846b4:	4b0b      	ldr	r3, [pc, #44]	; (846e4 <set_led+0x3c>)
   846b6:	781b      	ldrb	r3, [r3, #0]
   846b8:	2b00      	cmp	r3, #0
   846ba:	d00a      	beq.n	846d2 <set_led+0x2a>
    {
        ioport_set_pin_level(pin, level);
   846bc:	78fb      	ldrb	r3, [r7, #3]
   846be:	2b00      	cmp	r3, #0
   846c0:	bf14      	ite	ne
   846c2:	2301      	movne	r3, #1
   846c4:	2300      	moveq	r3, #0
   846c6:	b2db      	uxtb	r3, r3
   846c8:	4619      	mov	r1, r3
   846ca:	6878      	ldr	r0, [r7, #4]
   846cc:	4b06      	ldr	r3, [pc, #24]	; (846e8 <set_led+0x40>)
   846ce:	4798      	blx	r3
    }
    else
    {
        ioport_set_pin_level(pin, 0);
    }
}
   846d0:	e003      	b.n	846da <set_led+0x32>
        ioport_set_pin_level(pin, 0);
   846d2:	2100      	movs	r1, #0
   846d4:	6878      	ldr	r0, [r7, #4]
   846d6:	4b04      	ldr	r3, [pc, #16]	; (846e8 <set_led+0x40>)
   846d8:	4798      	blx	r3
}
   846da:	bf00      	nop
   846dc:	3708      	adds	r7, #8
   846de:	46bd      	mov	sp, r7
   846e0:	bd80      	pop	{r7, pc}
   846e2:	bf00      	nop
   846e4:	2007018d 	.word	0x2007018d
   846e8:	00084385 	.word	0x00084385

000846ec <__aeabi_drsub>:
   846ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   846f0:	e002      	b.n	846f8 <__adddf3>
   846f2:	bf00      	nop

000846f4 <__aeabi_dsub>:
   846f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000846f8 <__adddf3>:
   846f8:	b530      	push	{r4, r5, lr}
   846fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   846fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84702:	ea94 0f05 	teq	r4, r5
   84706:	bf08      	it	eq
   84708:	ea90 0f02 	teqeq	r0, r2
   8470c:	bf1f      	itttt	ne
   8470e:	ea54 0c00 	orrsne.w	ip, r4, r0
   84712:	ea55 0c02 	orrsne.w	ip, r5, r2
   84716:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8471a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8471e:	f000 80e2 	beq.w	848e6 <__adddf3+0x1ee>
   84722:	ea4f 5454 	mov.w	r4, r4, lsr #21
   84726:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8472a:	bfb8      	it	lt
   8472c:	426d      	neglt	r5, r5
   8472e:	dd0c      	ble.n	8474a <__adddf3+0x52>
   84730:	442c      	add	r4, r5
   84732:	ea80 0202 	eor.w	r2, r0, r2
   84736:	ea81 0303 	eor.w	r3, r1, r3
   8473a:	ea82 0000 	eor.w	r0, r2, r0
   8473e:	ea83 0101 	eor.w	r1, r3, r1
   84742:	ea80 0202 	eor.w	r2, r0, r2
   84746:	ea81 0303 	eor.w	r3, r1, r3
   8474a:	2d36      	cmp	r5, #54	; 0x36
   8474c:	bf88      	it	hi
   8474e:	bd30      	pophi	{r4, r5, pc}
   84750:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84754:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84758:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8475c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84760:	d002      	beq.n	84768 <__adddf3+0x70>
   84762:	4240      	negs	r0, r0
   84764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84768:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8476c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84770:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   84774:	d002      	beq.n	8477c <__adddf3+0x84>
   84776:	4252      	negs	r2, r2
   84778:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8477c:	ea94 0f05 	teq	r4, r5
   84780:	f000 80a7 	beq.w	848d2 <__adddf3+0x1da>
   84784:	f1a4 0401 	sub.w	r4, r4, #1
   84788:	f1d5 0e20 	rsbs	lr, r5, #32
   8478c:	db0d      	blt.n	847aa <__adddf3+0xb2>
   8478e:	fa02 fc0e 	lsl.w	ip, r2, lr
   84792:	fa22 f205 	lsr.w	r2, r2, r5
   84796:	1880      	adds	r0, r0, r2
   84798:	f141 0100 	adc.w	r1, r1, #0
   8479c:	fa03 f20e 	lsl.w	r2, r3, lr
   847a0:	1880      	adds	r0, r0, r2
   847a2:	fa43 f305 	asr.w	r3, r3, r5
   847a6:	4159      	adcs	r1, r3
   847a8:	e00e      	b.n	847c8 <__adddf3+0xd0>
   847aa:	f1a5 0520 	sub.w	r5, r5, #32
   847ae:	f10e 0e20 	add.w	lr, lr, #32
   847b2:	2a01      	cmp	r2, #1
   847b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   847b8:	bf28      	it	cs
   847ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   847be:	fa43 f305 	asr.w	r3, r3, r5
   847c2:	18c0      	adds	r0, r0, r3
   847c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   847c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   847cc:	d507      	bpl.n	847de <__adddf3+0xe6>
   847ce:	f04f 0e00 	mov.w	lr, #0
   847d2:	f1dc 0c00 	rsbs	ip, ip, #0
   847d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   847da:	eb6e 0101 	sbc.w	r1, lr, r1
   847de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   847e2:	d31b      	bcc.n	8481c <__adddf3+0x124>
   847e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   847e8:	d30c      	bcc.n	84804 <__adddf3+0x10c>
   847ea:	0849      	lsrs	r1, r1, #1
   847ec:	ea5f 0030 	movs.w	r0, r0, rrx
   847f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   847f4:	f104 0401 	add.w	r4, r4, #1
   847f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   847fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84800:	f080 809a 	bcs.w	84938 <__adddf3+0x240>
   84804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84808:	bf08      	it	eq
   8480a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8480e:	f150 0000 	adcs.w	r0, r0, #0
   84812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84816:	ea41 0105 	orr.w	r1, r1, r5
   8481a:	bd30      	pop	{r4, r5, pc}
   8481c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84820:	4140      	adcs	r0, r0
   84822:	eb41 0101 	adc.w	r1, r1, r1
   84826:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8482a:	f1a4 0401 	sub.w	r4, r4, #1
   8482e:	d1e9      	bne.n	84804 <__adddf3+0x10c>
   84830:	f091 0f00 	teq	r1, #0
   84834:	bf04      	itt	eq
   84836:	4601      	moveq	r1, r0
   84838:	2000      	moveq	r0, #0
   8483a:	fab1 f381 	clz	r3, r1
   8483e:	bf08      	it	eq
   84840:	3320      	addeq	r3, #32
   84842:	f1a3 030b 	sub.w	r3, r3, #11
   84846:	f1b3 0220 	subs.w	r2, r3, #32
   8484a:	da0c      	bge.n	84866 <__adddf3+0x16e>
   8484c:	320c      	adds	r2, #12
   8484e:	dd08      	ble.n	84862 <__adddf3+0x16a>
   84850:	f102 0c14 	add.w	ip, r2, #20
   84854:	f1c2 020c 	rsb	r2, r2, #12
   84858:	fa01 f00c 	lsl.w	r0, r1, ip
   8485c:	fa21 f102 	lsr.w	r1, r1, r2
   84860:	e00c      	b.n	8487c <__adddf3+0x184>
   84862:	f102 0214 	add.w	r2, r2, #20
   84866:	bfd8      	it	le
   84868:	f1c2 0c20 	rsble	ip, r2, #32
   8486c:	fa01 f102 	lsl.w	r1, r1, r2
   84870:	fa20 fc0c 	lsr.w	ip, r0, ip
   84874:	bfdc      	itt	le
   84876:	ea41 010c 	orrle.w	r1, r1, ip
   8487a:	4090      	lslle	r0, r2
   8487c:	1ae4      	subs	r4, r4, r3
   8487e:	bfa2      	ittt	ge
   84880:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84884:	4329      	orrge	r1, r5
   84886:	bd30      	popge	{r4, r5, pc}
   84888:	ea6f 0404 	mvn.w	r4, r4
   8488c:	3c1f      	subs	r4, #31
   8488e:	da1c      	bge.n	848ca <__adddf3+0x1d2>
   84890:	340c      	adds	r4, #12
   84892:	dc0e      	bgt.n	848b2 <__adddf3+0x1ba>
   84894:	f104 0414 	add.w	r4, r4, #20
   84898:	f1c4 0220 	rsb	r2, r4, #32
   8489c:	fa20 f004 	lsr.w	r0, r0, r4
   848a0:	fa01 f302 	lsl.w	r3, r1, r2
   848a4:	ea40 0003 	orr.w	r0, r0, r3
   848a8:	fa21 f304 	lsr.w	r3, r1, r4
   848ac:	ea45 0103 	orr.w	r1, r5, r3
   848b0:	bd30      	pop	{r4, r5, pc}
   848b2:	f1c4 040c 	rsb	r4, r4, #12
   848b6:	f1c4 0220 	rsb	r2, r4, #32
   848ba:	fa20 f002 	lsr.w	r0, r0, r2
   848be:	fa01 f304 	lsl.w	r3, r1, r4
   848c2:	ea40 0003 	orr.w	r0, r0, r3
   848c6:	4629      	mov	r1, r5
   848c8:	bd30      	pop	{r4, r5, pc}
   848ca:	fa21 f004 	lsr.w	r0, r1, r4
   848ce:	4629      	mov	r1, r5
   848d0:	bd30      	pop	{r4, r5, pc}
   848d2:	f094 0f00 	teq	r4, #0
   848d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   848da:	bf06      	itte	eq
   848dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   848e0:	3401      	addeq	r4, #1
   848e2:	3d01      	subne	r5, #1
   848e4:	e74e      	b.n	84784 <__adddf3+0x8c>
   848e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   848ea:	bf18      	it	ne
   848ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   848f0:	d029      	beq.n	84946 <__adddf3+0x24e>
   848f2:	ea94 0f05 	teq	r4, r5
   848f6:	bf08      	it	eq
   848f8:	ea90 0f02 	teqeq	r0, r2
   848fc:	d005      	beq.n	8490a <__adddf3+0x212>
   848fe:	ea54 0c00 	orrs.w	ip, r4, r0
   84902:	bf04      	itt	eq
   84904:	4619      	moveq	r1, r3
   84906:	4610      	moveq	r0, r2
   84908:	bd30      	pop	{r4, r5, pc}
   8490a:	ea91 0f03 	teq	r1, r3
   8490e:	bf1e      	ittt	ne
   84910:	2100      	movne	r1, #0
   84912:	2000      	movne	r0, #0
   84914:	bd30      	popne	{r4, r5, pc}
   84916:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8491a:	d105      	bne.n	84928 <__adddf3+0x230>
   8491c:	0040      	lsls	r0, r0, #1
   8491e:	4149      	adcs	r1, r1
   84920:	bf28      	it	cs
   84922:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   84926:	bd30      	pop	{r4, r5, pc}
   84928:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8492c:	bf3c      	itt	cc
   8492e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84932:	bd30      	popcc	{r4, r5, pc}
   84934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84938:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8493c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84940:	f04f 0000 	mov.w	r0, #0
   84944:	bd30      	pop	{r4, r5, pc}
   84946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8494a:	bf1a      	itte	ne
   8494c:	4619      	movne	r1, r3
   8494e:	4610      	movne	r0, r2
   84950:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84954:	bf1c      	itt	ne
   84956:	460b      	movne	r3, r1
   84958:	4602      	movne	r2, r0
   8495a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8495e:	bf06      	itte	eq
   84960:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84964:	ea91 0f03 	teqeq	r1, r3
   84968:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8496c:	bd30      	pop	{r4, r5, pc}
   8496e:	bf00      	nop

00084970 <__aeabi_ui2d>:
   84970:	f090 0f00 	teq	r0, #0
   84974:	bf04      	itt	eq
   84976:	2100      	moveq	r1, #0
   84978:	4770      	bxeq	lr
   8497a:	b530      	push	{r4, r5, lr}
   8497c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84980:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84984:	f04f 0500 	mov.w	r5, #0
   84988:	f04f 0100 	mov.w	r1, #0
   8498c:	e750      	b.n	84830 <__adddf3+0x138>
   8498e:	bf00      	nop

00084990 <__aeabi_i2d>:
   84990:	f090 0f00 	teq	r0, #0
   84994:	bf04      	itt	eq
   84996:	2100      	moveq	r1, #0
   84998:	4770      	bxeq	lr
   8499a:	b530      	push	{r4, r5, lr}
   8499c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   849a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   849a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   849a8:	bf48      	it	mi
   849aa:	4240      	negmi	r0, r0
   849ac:	f04f 0100 	mov.w	r1, #0
   849b0:	e73e      	b.n	84830 <__adddf3+0x138>
   849b2:	bf00      	nop

000849b4 <__aeabi_f2d>:
   849b4:	0042      	lsls	r2, r0, #1
   849b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   849ba:	ea4f 0131 	mov.w	r1, r1, rrx
   849be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   849c2:	bf1f      	itttt	ne
   849c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   849c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   849cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   849d0:	4770      	bxne	lr
   849d2:	f092 0f00 	teq	r2, #0
   849d6:	bf14      	ite	ne
   849d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   849dc:	4770      	bxeq	lr
   849de:	b530      	push	{r4, r5, lr}
   849e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   849e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   849e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   849ec:	e720      	b.n	84830 <__adddf3+0x138>
   849ee:	bf00      	nop

000849f0 <__aeabi_ul2d>:
   849f0:	ea50 0201 	orrs.w	r2, r0, r1
   849f4:	bf08      	it	eq
   849f6:	4770      	bxeq	lr
   849f8:	b530      	push	{r4, r5, lr}
   849fa:	f04f 0500 	mov.w	r5, #0
   849fe:	e00a      	b.n	84a16 <__aeabi_l2d+0x16>

00084a00 <__aeabi_l2d>:
   84a00:	ea50 0201 	orrs.w	r2, r0, r1
   84a04:	bf08      	it	eq
   84a06:	4770      	bxeq	lr
   84a08:	b530      	push	{r4, r5, lr}
   84a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84a0e:	d502      	bpl.n	84a16 <__aeabi_l2d+0x16>
   84a10:	4240      	negs	r0, r0
   84a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84a22:	f43f aedc 	beq.w	847de <__adddf3+0xe6>
   84a26:	f04f 0203 	mov.w	r2, #3
   84a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84a2e:	bf18      	it	ne
   84a30:	3203      	addne	r2, #3
   84a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84a36:	bf18      	it	ne
   84a38:	3203      	addne	r2, #3
   84a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84a3e:	f1c2 0320 	rsb	r3, r2, #32
   84a42:	fa00 fc03 	lsl.w	ip, r0, r3
   84a46:	fa20 f002 	lsr.w	r0, r0, r2
   84a4a:	fa01 fe03 	lsl.w	lr, r1, r3
   84a4e:	ea40 000e 	orr.w	r0, r0, lr
   84a52:	fa21 f102 	lsr.w	r1, r1, r2
   84a56:	4414      	add	r4, r2
   84a58:	e6c1      	b.n	847de <__adddf3+0xe6>
   84a5a:	bf00      	nop

00084a5c <__aeabi_dmul>:
   84a5c:	b570      	push	{r4, r5, r6, lr}
   84a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84a6a:	bf1d      	ittte	ne
   84a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84a70:	ea94 0f0c 	teqne	r4, ip
   84a74:	ea95 0f0c 	teqne	r5, ip
   84a78:	f000 f8de 	bleq	84c38 <__aeabi_dmul+0x1dc>
   84a7c:	442c      	add	r4, r5
   84a7e:	ea81 0603 	eor.w	r6, r1, r3
   84a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   84a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   84a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   84a8e:	bf18      	it	ne
   84a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   84a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84a9c:	d038      	beq.n	84b10 <__aeabi_dmul+0xb4>
   84a9e:	fba0 ce02 	umull	ip, lr, r0, r2
   84aa2:	f04f 0500 	mov.w	r5, #0
   84aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
   84aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84aae:	fbe0 e503 	umlal	lr, r5, r0, r3
   84ab2:	f04f 0600 	mov.w	r6, #0
   84ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
   84aba:	f09c 0f00 	teq	ip, #0
   84abe:	bf18      	it	ne
   84ac0:	f04e 0e01 	orrne.w	lr, lr, #1
   84ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   84ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84ad0:	d204      	bcs.n	84adc <__aeabi_dmul+0x80>
   84ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   84ad6:	416d      	adcs	r5, r5
   84ad8:	eb46 0606 	adc.w	r6, r6, r6
   84adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   84ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84af4:	bf88      	it	hi
   84af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84afa:	d81e      	bhi.n	84b3a <__aeabi_dmul+0xde>
   84afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84b00:	bf08      	it	eq
   84b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   84b06:	f150 0000 	adcs.w	r0, r0, #0
   84b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84b0e:	bd70      	pop	{r4, r5, r6, pc}
   84b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84b14:	ea46 0101 	orr.w	r1, r6, r1
   84b18:	ea40 0002 	orr.w	r0, r0, r2
   84b1c:	ea81 0103 	eor.w	r1, r1, r3
   84b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84b24:	bfc2      	ittt	gt
   84b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   84b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84b2e:	bd70      	popgt	{r4, r5, r6, pc}
   84b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84b34:	f04f 0e00 	mov.w	lr, #0
   84b38:	3c01      	subs	r4, #1
   84b3a:	f300 80ab 	bgt.w	84c94 <__aeabi_dmul+0x238>
   84b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84b42:	bfde      	ittt	le
   84b44:	2000      	movle	r0, #0
   84b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   84b4a:	bd70      	pople	{r4, r5, r6, pc}
   84b4c:	f1c4 0400 	rsb	r4, r4, #0
   84b50:	3c20      	subs	r4, #32
   84b52:	da35      	bge.n	84bc0 <__aeabi_dmul+0x164>
   84b54:	340c      	adds	r4, #12
   84b56:	dc1b      	bgt.n	84b90 <__aeabi_dmul+0x134>
   84b58:	f104 0414 	add.w	r4, r4, #20
   84b5c:	f1c4 0520 	rsb	r5, r4, #32
   84b60:	fa00 f305 	lsl.w	r3, r0, r5
   84b64:	fa20 f004 	lsr.w	r0, r0, r4
   84b68:	fa01 f205 	lsl.w	r2, r1, r5
   84b6c:	ea40 0002 	orr.w	r0, r0, r2
   84b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84b7c:	fa21 f604 	lsr.w	r6, r1, r4
   84b80:	eb42 0106 	adc.w	r1, r2, r6
   84b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84b88:	bf08      	it	eq
   84b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84b8e:	bd70      	pop	{r4, r5, r6, pc}
   84b90:	f1c4 040c 	rsb	r4, r4, #12
   84b94:	f1c4 0520 	rsb	r5, r4, #32
   84b98:	fa00 f304 	lsl.w	r3, r0, r4
   84b9c:	fa20 f005 	lsr.w	r0, r0, r5
   84ba0:	fa01 f204 	lsl.w	r2, r1, r4
   84ba4:	ea40 0002 	orr.w	r0, r0, r2
   84ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84bb0:	f141 0100 	adc.w	r1, r1, #0
   84bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84bb8:	bf08      	it	eq
   84bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84bbe:	bd70      	pop	{r4, r5, r6, pc}
   84bc0:	f1c4 0520 	rsb	r5, r4, #32
   84bc4:	fa00 f205 	lsl.w	r2, r0, r5
   84bc8:	ea4e 0e02 	orr.w	lr, lr, r2
   84bcc:	fa20 f304 	lsr.w	r3, r0, r4
   84bd0:	fa01 f205 	lsl.w	r2, r1, r5
   84bd4:	ea43 0302 	orr.w	r3, r3, r2
   84bd8:	fa21 f004 	lsr.w	r0, r1, r4
   84bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84be0:	fa21 f204 	lsr.w	r2, r1, r4
   84be4:	ea20 0002 	bic.w	r0, r0, r2
   84be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84bf0:	bf08      	it	eq
   84bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84bf6:	bd70      	pop	{r4, r5, r6, pc}
   84bf8:	f094 0f00 	teq	r4, #0
   84bfc:	d10f      	bne.n	84c1e <__aeabi_dmul+0x1c2>
   84bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84c02:	0040      	lsls	r0, r0, #1
   84c04:	eb41 0101 	adc.w	r1, r1, r1
   84c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84c0c:	bf08      	it	eq
   84c0e:	3c01      	subeq	r4, #1
   84c10:	d0f7      	beq.n	84c02 <__aeabi_dmul+0x1a6>
   84c12:	ea41 0106 	orr.w	r1, r1, r6
   84c16:	f095 0f00 	teq	r5, #0
   84c1a:	bf18      	it	ne
   84c1c:	4770      	bxne	lr
   84c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84c22:	0052      	lsls	r2, r2, #1
   84c24:	eb43 0303 	adc.w	r3, r3, r3
   84c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84c2c:	bf08      	it	eq
   84c2e:	3d01      	subeq	r5, #1
   84c30:	d0f7      	beq.n	84c22 <__aeabi_dmul+0x1c6>
   84c32:	ea43 0306 	orr.w	r3, r3, r6
   84c36:	4770      	bx	lr
   84c38:	ea94 0f0c 	teq	r4, ip
   84c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84c40:	bf18      	it	ne
   84c42:	ea95 0f0c 	teqne	r5, ip
   84c46:	d00c      	beq.n	84c62 <__aeabi_dmul+0x206>
   84c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84c4c:	bf18      	it	ne
   84c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84c52:	d1d1      	bne.n	84bf8 <__aeabi_dmul+0x19c>
   84c54:	ea81 0103 	eor.w	r1, r1, r3
   84c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84c5c:	f04f 0000 	mov.w	r0, #0
   84c60:	bd70      	pop	{r4, r5, r6, pc}
   84c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84c66:	bf06      	itte	eq
   84c68:	4610      	moveq	r0, r2
   84c6a:	4619      	moveq	r1, r3
   84c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84c70:	d019      	beq.n	84ca6 <__aeabi_dmul+0x24a>
   84c72:	ea94 0f0c 	teq	r4, ip
   84c76:	d102      	bne.n	84c7e <__aeabi_dmul+0x222>
   84c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84c7c:	d113      	bne.n	84ca6 <__aeabi_dmul+0x24a>
   84c7e:	ea95 0f0c 	teq	r5, ip
   84c82:	d105      	bne.n	84c90 <__aeabi_dmul+0x234>
   84c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   84c88:	bf1c      	itt	ne
   84c8a:	4610      	movne	r0, r2
   84c8c:	4619      	movne	r1, r3
   84c8e:	d10a      	bne.n	84ca6 <__aeabi_dmul+0x24a>
   84c90:	ea81 0103 	eor.w	r1, r1, r3
   84c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84ca0:	f04f 0000 	mov.w	r0, #0
   84ca4:	bd70      	pop	{r4, r5, r6, pc}
   84ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84cae:	bd70      	pop	{r4, r5, r6, pc}

00084cb0 <__aeabi_ddiv>:
   84cb0:	b570      	push	{r4, r5, r6, lr}
   84cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   84cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84cbe:	bf1d      	ittte	ne
   84cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84cc4:	ea94 0f0c 	teqne	r4, ip
   84cc8:	ea95 0f0c 	teqne	r5, ip
   84ccc:	f000 f8a7 	bleq	84e1e <__aeabi_ddiv+0x16e>
   84cd0:	eba4 0405 	sub.w	r4, r4, r5
   84cd4:	ea81 0e03 	eor.w	lr, r1, r3
   84cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84ce0:	f000 8088 	beq.w	84df4 <__aeabi_ddiv+0x144>
   84ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   84cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   84d08:	429d      	cmp	r5, r3
   84d0a:	bf08      	it	eq
   84d0c:	4296      	cmpeq	r6, r2
   84d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   84d16:	d202      	bcs.n	84d1e <__aeabi_ddiv+0x6e>
   84d18:	085b      	lsrs	r3, r3, #1
   84d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   84d1e:	1ab6      	subs	r6, r6, r2
   84d20:	eb65 0503 	sbc.w	r5, r5, r3
   84d24:	085b      	lsrs	r3, r3, #1
   84d26:	ea4f 0232 	mov.w	r2, r2, rrx
   84d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84d32:	ebb6 0e02 	subs.w	lr, r6, r2
   84d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   84d3a:	bf22      	ittt	cs
   84d3c:	1ab6      	subcs	r6, r6, r2
   84d3e:	4675      	movcs	r5, lr
   84d40:	ea40 000c 	orrcs.w	r0, r0, ip
   84d44:	085b      	lsrs	r3, r3, #1
   84d46:	ea4f 0232 	mov.w	r2, r2, rrx
   84d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   84d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   84d52:	bf22      	ittt	cs
   84d54:	1ab6      	subcs	r6, r6, r2
   84d56:	4675      	movcs	r5, lr
   84d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84d5c:	085b      	lsrs	r3, r3, #1
   84d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   84d62:	ebb6 0e02 	subs.w	lr, r6, r2
   84d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   84d6a:	bf22      	ittt	cs
   84d6c:	1ab6      	subcs	r6, r6, r2
   84d6e:	4675      	movcs	r5, lr
   84d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84d74:	085b      	lsrs	r3, r3, #1
   84d76:	ea4f 0232 	mov.w	r2, r2, rrx
   84d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   84d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   84d82:	bf22      	ittt	cs
   84d84:	1ab6      	subcs	r6, r6, r2
   84d86:	4675      	movcs	r5, lr
   84d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84d8c:	ea55 0e06 	orrs.w	lr, r5, r6
   84d90:	d018      	beq.n	84dc4 <__aeabi_ddiv+0x114>
   84d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   84d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   84d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   84da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   84daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84dae:	d1c0      	bne.n	84d32 <__aeabi_ddiv+0x82>
   84db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84db4:	d10b      	bne.n	84dce <__aeabi_ddiv+0x11e>
   84db6:	ea41 0100 	orr.w	r1, r1, r0
   84dba:	f04f 0000 	mov.w	r0, #0
   84dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84dc2:	e7b6      	b.n	84d32 <__aeabi_ddiv+0x82>
   84dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84dc8:	bf04      	itt	eq
   84dca:	4301      	orreq	r1, r0
   84dcc:	2000      	moveq	r0, #0
   84dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84dd2:	bf88      	it	hi
   84dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   84dd8:	f63f aeaf 	bhi.w	84b3a <__aeabi_dmul+0xde>
   84ddc:	ebb5 0c03 	subs.w	ip, r5, r3
   84de0:	bf04      	itt	eq
   84de2:	ebb6 0c02 	subseq.w	ip, r6, r2
   84de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84dea:	f150 0000 	adcs.w	r0, r0, #0
   84dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84df2:	bd70      	pop	{r4, r5, r6, pc}
   84df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   84df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84e00:	bfc2      	ittt	gt
   84e02:	ebd4 050c 	rsbsgt	r5, r4, ip
   84e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84e0a:	bd70      	popgt	{r4, r5, r6, pc}
   84e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84e10:	f04f 0e00 	mov.w	lr, #0
   84e14:	3c01      	subs	r4, #1
   84e16:	e690      	b.n	84b3a <__aeabi_dmul+0xde>
   84e18:	ea45 0e06 	orr.w	lr, r5, r6
   84e1c:	e68d      	b.n	84b3a <__aeabi_dmul+0xde>
   84e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84e22:	ea94 0f0c 	teq	r4, ip
   84e26:	bf08      	it	eq
   84e28:	ea95 0f0c 	teqeq	r5, ip
   84e2c:	f43f af3b 	beq.w	84ca6 <__aeabi_dmul+0x24a>
   84e30:	ea94 0f0c 	teq	r4, ip
   84e34:	d10a      	bne.n	84e4c <__aeabi_ddiv+0x19c>
   84e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84e3a:	f47f af34 	bne.w	84ca6 <__aeabi_dmul+0x24a>
   84e3e:	ea95 0f0c 	teq	r5, ip
   84e42:	f47f af25 	bne.w	84c90 <__aeabi_dmul+0x234>
   84e46:	4610      	mov	r0, r2
   84e48:	4619      	mov	r1, r3
   84e4a:	e72c      	b.n	84ca6 <__aeabi_dmul+0x24a>
   84e4c:	ea95 0f0c 	teq	r5, ip
   84e50:	d106      	bne.n	84e60 <__aeabi_ddiv+0x1b0>
   84e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84e56:	f43f aefd 	beq.w	84c54 <__aeabi_dmul+0x1f8>
   84e5a:	4610      	mov	r0, r2
   84e5c:	4619      	mov	r1, r3
   84e5e:	e722      	b.n	84ca6 <__aeabi_dmul+0x24a>
   84e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84e64:	bf18      	it	ne
   84e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84e6a:	f47f aec5 	bne.w	84bf8 <__aeabi_dmul+0x19c>
   84e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   84e72:	f47f af0d 	bne.w	84c90 <__aeabi_dmul+0x234>
   84e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   84e7a:	f47f aeeb 	bne.w	84c54 <__aeabi_dmul+0x1f8>
   84e7e:	e712      	b.n	84ca6 <__aeabi_dmul+0x24a>

00084e80 <__aeabi_frsub>:
   84e80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84e84:	e002      	b.n	84e8c <__addsf3>
   84e86:	bf00      	nop

00084e88 <__aeabi_fsub>:
   84e88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084e8c <__addsf3>:
   84e8c:	0042      	lsls	r2, r0, #1
   84e8e:	bf1f      	itttt	ne
   84e90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84e94:	ea92 0f03 	teqne	r2, r3
   84e98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84e9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84ea0:	d06a      	beq.n	84f78 <__addsf3+0xec>
   84ea2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   84ea6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84eaa:	bfc1      	itttt	gt
   84eac:	18d2      	addgt	r2, r2, r3
   84eae:	4041      	eorgt	r1, r0
   84eb0:	4048      	eorgt	r0, r1
   84eb2:	4041      	eorgt	r1, r0
   84eb4:	bfb8      	it	lt
   84eb6:	425b      	neglt	r3, r3
   84eb8:	2b19      	cmp	r3, #25
   84eba:	bf88      	it	hi
   84ebc:	4770      	bxhi	lr
   84ebe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   84ec2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84ec6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84eca:	bf18      	it	ne
   84ecc:	4240      	negne	r0, r0
   84ece:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84ed2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   84ed6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84eda:	bf18      	it	ne
   84edc:	4249      	negne	r1, r1
   84ede:	ea92 0f03 	teq	r2, r3
   84ee2:	d03f      	beq.n	84f64 <__addsf3+0xd8>
   84ee4:	f1a2 0201 	sub.w	r2, r2, #1
   84ee8:	fa41 fc03 	asr.w	ip, r1, r3
   84eec:	eb10 000c 	adds.w	r0, r0, ip
   84ef0:	f1c3 0320 	rsb	r3, r3, #32
   84ef4:	fa01 f103 	lsl.w	r1, r1, r3
   84ef8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84efc:	d502      	bpl.n	84f04 <__addsf3+0x78>
   84efe:	4249      	negs	r1, r1
   84f00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84f04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84f08:	d313      	bcc.n	84f32 <__addsf3+0xa6>
   84f0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84f0e:	d306      	bcc.n	84f1e <__addsf3+0x92>
   84f10:	0840      	lsrs	r0, r0, #1
   84f12:	ea4f 0131 	mov.w	r1, r1, rrx
   84f16:	f102 0201 	add.w	r2, r2, #1
   84f1a:	2afe      	cmp	r2, #254	; 0xfe
   84f1c:	d251      	bcs.n	84fc2 <__addsf3+0x136>
   84f1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84f22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84f26:	bf08      	it	eq
   84f28:	f020 0001 	biceq.w	r0, r0, #1
   84f2c:	ea40 0003 	orr.w	r0, r0, r3
   84f30:	4770      	bx	lr
   84f32:	0049      	lsls	r1, r1, #1
   84f34:	eb40 0000 	adc.w	r0, r0, r0
   84f38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84f3c:	f1a2 0201 	sub.w	r2, r2, #1
   84f40:	d1ed      	bne.n	84f1e <__addsf3+0x92>
   84f42:	fab0 fc80 	clz	ip, r0
   84f46:	f1ac 0c08 	sub.w	ip, ip, #8
   84f4a:	ebb2 020c 	subs.w	r2, r2, ip
   84f4e:	fa00 f00c 	lsl.w	r0, r0, ip
   84f52:	bfaa      	itet	ge
   84f54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84f58:	4252      	neglt	r2, r2
   84f5a:	4318      	orrge	r0, r3
   84f5c:	bfbc      	itt	lt
   84f5e:	40d0      	lsrlt	r0, r2
   84f60:	4318      	orrlt	r0, r3
   84f62:	4770      	bx	lr
   84f64:	f092 0f00 	teq	r2, #0
   84f68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84f6c:	bf06      	itte	eq
   84f6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84f72:	3201      	addeq	r2, #1
   84f74:	3b01      	subne	r3, #1
   84f76:	e7b5      	b.n	84ee4 <__addsf3+0x58>
   84f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84f80:	bf18      	it	ne
   84f82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84f86:	d021      	beq.n	84fcc <__addsf3+0x140>
   84f88:	ea92 0f03 	teq	r2, r3
   84f8c:	d004      	beq.n	84f98 <__addsf3+0x10c>
   84f8e:	f092 0f00 	teq	r2, #0
   84f92:	bf08      	it	eq
   84f94:	4608      	moveq	r0, r1
   84f96:	4770      	bx	lr
   84f98:	ea90 0f01 	teq	r0, r1
   84f9c:	bf1c      	itt	ne
   84f9e:	2000      	movne	r0, #0
   84fa0:	4770      	bxne	lr
   84fa2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   84fa6:	d104      	bne.n	84fb2 <__addsf3+0x126>
   84fa8:	0040      	lsls	r0, r0, #1
   84faa:	bf28      	it	cs
   84fac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84fb0:	4770      	bx	lr
   84fb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   84fb6:	bf3c      	itt	cc
   84fb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84fbc:	4770      	bxcc	lr
   84fbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84fc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   84fc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84fca:	4770      	bx	lr
   84fcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84fd0:	bf16      	itet	ne
   84fd2:	4608      	movne	r0, r1
   84fd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84fd8:	4601      	movne	r1, r0
   84fda:	0242      	lsls	r2, r0, #9
   84fdc:	bf06      	itte	eq
   84fde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   84fe2:	ea90 0f01 	teqeq	r0, r1
   84fe6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84fea:	4770      	bx	lr

00084fec <__aeabi_ui2f>:
   84fec:	f04f 0300 	mov.w	r3, #0
   84ff0:	e004      	b.n	84ffc <__aeabi_i2f+0x8>
   84ff2:	bf00      	nop

00084ff4 <__aeabi_i2f>:
   84ff4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84ff8:	bf48      	it	mi
   84ffa:	4240      	negmi	r0, r0
   84ffc:	ea5f 0c00 	movs.w	ip, r0
   85000:	bf08      	it	eq
   85002:	4770      	bxeq	lr
   85004:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   85008:	4601      	mov	r1, r0
   8500a:	f04f 0000 	mov.w	r0, #0
   8500e:	e01c      	b.n	8504a <__aeabi_l2f+0x2a>

00085010 <__aeabi_ul2f>:
   85010:	ea50 0201 	orrs.w	r2, r0, r1
   85014:	bf08      	it	eq
   85016:	4770      	bxeq	lr
   85018:	f04f 0300 	mov.w	r3, #0
   8501c:	e00a      	b.n	85034 <__aeabi_l2f+0x14>
   8501e:	bf00      	nop

00085020 <__aeabi_l2f>:
   85020:	ea50 0201 	orrs.w	r2, r0, r1
   85024:	bf08      	it	eq
   85026:	4770      	bxeq	lr
   85028:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8502c:	d502      	bpl.n	85034 <__aeabi_l2f+0x14>
   8502e:	4240      	negs	r0, r0
   85030:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85034:	ea5f 0c01 	movs.w	ip, r1
   85038:	bf02      	ittt	eq
   8503a:	4684      	moveq	ip, r0
   8503c:	4601      	moveq	r1, r0
   8503e:	2000      	moveq	r0, #0
   85040:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   85044:	bf08      	it	eq
   85046:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8504a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8504e:	fabc f28c 	clz	r2, ip
   85052:	3a08      	subs	r2, #8
   85054:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   85058:	db10      	blt.n	8507c <__aeabi_l2f+0x5c>
   8505a:	fa01 fc02 	lsl.w	ip, r1, r2
   8505e:	4463      	add	r3, ip
   85060:	fa00 fc02 	lsl.w	ip, r0, r2
   85064:	f1c2 0220 	rsb	r2, r2, #32
   85068:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8506c:	fa20 f202 	lsr.w	r2, r0, r2
   85070:	eb43 0002 	adc.w	r0, r3, r2
   85074:	bf08      	it	eq
   85076:	f020 0001 	biceq.w	r0, r0, #1
   8507a:	4770      	bx	lr
   8507c:	f102 0220 	add.w	r2, r2, #32
   85080:	fa01 fc02 	lsl.w	ip, r1, r2
   85084:	f1c2 0220 	rsb	r2, r2, #32
   85088:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   8508c:	fa21 f202 	lsr.w	r2, r1, r2
   85090:	eb43 0002 	adc.w	r0, r3, r2
   85094:	bf08      	it	eq
   85096:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8509a:	4770      	bx	lr

0008509c <__aeabi_fmul>:
   8509c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   850a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   850a4:	bf1e      	ittt	ne
   850a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   850aa:	ea92 0f0c 	teqne	r2, ip
   850ae:	ea93 0f0c 	teqne	r3, ip
   850b2:	d06f      	beq.n	85194 <__aeabi_fmul+0xf8>
   850b4:	441a      	add	r2, r3
   850b6:	ea80 0c01 	eor.w	ip, r0, r1
   850ba:	0240      	lsls	r0, r0, #9
   850bc:	bf18      	it	ne
   850be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   850c2:	d01e      	beq.n	85102 <__aeabi_fmul+0x66>
   850c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   850c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   850cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   850d0:	fba0 3101 	umull	r3, r1, r0, r1
   850d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   850d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   850dc:	bf3e      	ittt	cc
   850de:	0049      	lslcc	r1, r1, #1
   850e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   850e4:	005b      	lslcc	r3, r3, #1
   850e6:	ea40 0001 	orr.w	r0, r0, r1
   850ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   850ee:	2afd      	cmp	r2, #253	; 0xfd
   850f0:	d81d      	bhi.n	8512e <__aeabi_fmul+0x92>
   850f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   850f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   850fa:	bf08      	it	eq
   850fc:	f020 0001 	biceq.w	r0, r0, #1
   85100:	4770      	bx	lr
   85102:	f090 0f00 	teq	r0, #0
   85106:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8510a:	bf08      	it	eq
   8510c:	0249      	lsleq	r1, r1, #9
   8510e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85112:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85116:	3a7f      	subs	r2, #127	; 0x7f
   85118:	bfc2      	ittt	gt
   8511a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8511e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85122:	4770      	bxgt	lr
   85124:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85128:	f04f 0300 	mov.w	r3, #0
   8512c:	3a01      	subs	r2, #1
   8512e:	dc5d      	bgt.n	851ec <__aeabi_fmul+0x150>
   85130:	f112 0f19 	cmn.w	r2, #25
   85134:	bfdc      	itt	le
   85136:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8513a:	4770      	bxle	lr
   8513c:	f1c2 0200 	rsb	r2, r2, #0
   85140:	0041      	lsls	r1, r0, #1
   85142:	fa21 f102 	lsr.w	r1, r1, r2
   85146:	f1c2 0220 	rsb	r2, r2, #32
   8514a:	fa00 fc02 	lsl.w	ip, r0, r2
   8514e:	ea5f 0031 	movs.w	r0, r1, rrx
   85152:	f140 0000 	adc.w	r0, r0, #0
   85156:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8515a:	bf08      	it	eq
   8515c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   85160:	4770      	bx	lr
   85162:	f092 0f00 	teq	r2, #0
   85166:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8516a:	bf02      	ittt	eq
   8516c:	0040      	lsleq	r0, r0, #1
   8516e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   85172:	3a01      	subeq	r2, #1
   85174:	d0f9      	beq.n	8516a <__aeabi_fmul+0xce>
   85176:	ea40 000c 	orr.w	r0, r0, ip
   8517a:	f093 0f00 	teq	r3, #0
   8517e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85182:	bf02      	ittt	eq
   85184:	0049      	lsleq	r1, r1, #1
   85186:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8518a:	3b01      	subeq	r3, #1
   8518c:	d0f9      	beq.n	85182 <__aeabi_fmul+0xe6>
   8518e:	ea41 010c 	orr.w	r1, r1, ip
   85192:	e78f      	b.n	850b4 <__aeabi_fmul+0x18>
   85194:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85198:	ea92 0f0c 	teq	r2, ip
   8519c:	bf18      	it	ne
   8519e:	ea93 0f0c 	teqne	r3, ip
   851a2:	d00a      	beq.n	851ba <__aeabi_fmul+0x11e>
   851a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   851a8:	bf18      	it	ne
   851aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   851ae:	d1d8      	bne.n	85162 <__aeabi_fmul+0xc6>
   851b0:	ea80 0001 	eor.w	r0, r0, r1
   851b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   851b8:	4770      	bx	lr
   851ba:	f090 0f00 	teq	r0, #0
   851be:	bf17      	itett	ne
   851c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   851c4:	4608      	moveq	r0, r1
   851c6:	f091 0f00 	teqne	r1, #0
   851ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   851ce:	d014      	beq.n	851fa <__aeabi_fmul+0x15e>
   851d0:	ea92 0f0c 	teq	r2, ip
   851d4:	d101      	bne.n	851da <__aeabi_fmul+0x13e>
   851d6:	0242      	lsls	r2, r0, #9
   851d8:	d10f      	bne.n	851fa <__aeabi_fmul+0x15e>
   851da:	ea93 0f0c 	teq	r3, ip
   851de:	d103      	bne.n	851e8 <__aeabi_fmul+0x14c>
   851e0:	024b      	lsls	r3, r1, #9
   851e2:	bf18      	it	ne
   851e4:	4608      	movne	r0, r1
   851e6:	d108      	bne.n	851fa <__aeabi_fmul+0x15e>
   851e8:	ea80 0001 	eor.w	r0, r0, r1
   851ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   851f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   851f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   851f8:	4770      	bx	lr
   851fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   851fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   85202:	4770      	bx	lr

00085204 <__aeabi_fdiv>:
   85204:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85208:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8520c:	bf1e      	ittt	ne
   8520e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85212:	ea92 0f0c 	teqne	r2, ip
   85216:	ea93 0f0c 	teqne	r3, ip
   8521a:	d069      	beq.n	852f0 <__aeabi_fdiv+0xec>
   8521c:	eba2 0203 	sub.w	r2, r2, r3
   85220:	ea80 0c01 	eor.w	ip, r0, r1
   85224:	0249      	lsls	r1, r1, #9
   85226:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8522a:	d037      	beq.n	8529c <__aeabi_fdiv+0x98>
   8522c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   85230:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85234:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85238:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8523c:	428b      	cmp	r3, r1
   8523e:	bf38      	it	cc
   85240:	005b      	lslcc	r3, r3, #1
   85242:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   85246:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8524a:	428b      	cmp	r3, r1
   8524c:	bf24      	itt	cs
   8524e:	1a5b      	subcs	r3, r3, r1
   85250:	ea40 000c 	orrcs.w	r0, r0, ip
   85254:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   85258:	bf24      	itt	cs
   8525a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8525e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   85262:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   85266:	bf24      	itt	cs
   85268:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   8526c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   85270:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   85274:	bf24      	itt	cs
   85276:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8527a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8527e:	011b      	lsls	r3, r3, #4
   85280:	bf18      	it	ne
   85282:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   85286:	d1e0      	bne.n	8524a <__aeabi_fdiv+0x46>
   85288:	2afd      	cmp	r2, #253	; 0xfd
   8528a:	f63f af50 	bhi.w	8512e <__aeabi_fmul+0x92>
   8528e:	428b      	cmp	r3, r1
   85290:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85294:	bf08      	it	eq
   85296:	f020 0001 	biceq.w	r0, r0, #1
   8529a:	4770      	bx	lr
   8529c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   852a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   852a4:	327f      	adds	r2, #127	; 0x7f
   852a6:	bfc2      	ittt	gt
   852a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   852ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   852b0:	4770      	bxgt	lr
   852b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   852b6:	f04f 0300 	mov.w	r3, #0
   852ba:	3a01      	subs	r2, #1
   852bc:	e737      	b.n	8512e <__aeabi_fmul+0x92>
   852be:	f092 0f00 	teq	r2, #0
   852c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   852c6:	bf02      	ittt	eq
   852c8:	0040      	lsleq	r0, r0, #1
   852ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   852ce:	3a01      	subeq	r2, #1
   852d0:	d0f9      	beq.n	852c6 <__aeabi_fdiv+0xc2>
   852d2:	ea40 000c 	orr.w	r0, r0, ip
   852d6:	f093 0f00 	teq	r3, #0
   852da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   852de:	bf02      	ittt	eq
   852e0:	0049      	lsleq	r1, r1, #1
   852e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   852e6:	3b01      	subeq	r3, #1
   852e8:	d0f9      	beq.n	852de <__aeabi_fdiv+0xda>
   852ea:	ea41 010c 	orr.w	r1, r1, ip
   852ee:	e795      	b.n	8521c <__aeabi_fdiv+0x18>
   852f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   852f4:	ea92 0f0c 	teq	r2, ip
   852f8:	d108      	bne.n	8530c <__aeabi_fdiv+0x108>
   852fa:	0242      	lsls	r2, r0, #9
   852fc:	f47f af7d 	bne.w	851fa <__aeabi_fmul+0x15e>
   85300:	ea93 0f0c 	teq	r3, ip
   85304:	f47f af70 	bne.w	851e8 <__aeabi_fmul+0x14c>
   85308:	4608      	mov	r0, r1
   8530a:	e776      	b.n	851fa <__aeabi_fmul+0x15e>
   8530c:	ea93 0f0c 	teq	r3, ip
   85310:	d104      	bne.n	8531c <__aeabi_fdiv+0x118>
   85312:	024b      	lsls	r3, r1, #9
   85314:	f43f af4c 	beq.w	851b0 <__aeabi_fmul+0x114>
   85318:	4608      	mov	r0, r1
   8531a:	e76e      	b.n	851fa <__aeabi_fmul+0x15e>
   8531c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85320:	bf18      	it	ne
   85322:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85326:	d1ca      	bne.n	852be <__aeabi_fdiv+0xba>
   85328:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8532c:	f47f af5c 	bne.w	851e8 <__aeabi_fmul+0x14c>
   85330:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85334:	f47f af3c 	bne.w	851b0 <__aeabi_fmul+0x114>
   85338:	e75f      	b.n	851fa <__aeabi_fmul+0x15e>
   8533a:	bf00      	nop

0008533c <__gesf2>:
   8533c:	f04f 3cff 	mov.w	ip, #4294967295
   85340:	e006      	b.n	85350 <__cmpsf2+0x4>
   85342:	bf00      	nop

00085344 <__lesf2>:
   85344:	f04f 0c01 	mov.w	ip, #1
   85348:	e002      	b.n	85350 <__cmpsf2+0x4>
   8534a:	bf00      	nop

0008534c <__cmpsf2>:
   8534c:	f04f 0c01 	mov.w	ip, #1
   85350:	f84d cd04 	str.w	ip, [sp, #-4]!
   85354:	ea4f 0240 	mov.w	r2, r0, lsl #1
   85358:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8535c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85360:	bf18      	it	ne
   85362:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85366:	d011      	beq.n	8538c <__cmpsf2+0x40>
   85368:	b001      	add	sp, #4
   8536a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   8536e:	bf18      	it	ne
   85370:	ea90 0f01 	teqne	r0, r1
   85374:	bf58      	it	pl
   85376:	ebb2 0003 	subspl.w	r0, r2, r3
   8537a:	bf88      	it	hi
   8537c:	17c8      	asrhi	r0, r1, #31
   8537e:	bf38      	it	cc
   85380:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   85384:	bf18      	it	ne
   85386:	f040 0001 	orrne.w	r0, r0, #1
   8538a:	4770      	bx	lr
   8538c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85390:	d102      	bne.n	85398 <__cmpsf2+0x4c>
   85392:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   85396:	d105      	bne.n	853a4 <__cmpsf2+0x58>
   85398:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   8539c:	d1e4      	bne.n	85368 <__cmpsf2+0x1c>
   8539e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   853a2:	d0e1      	beq.n	85368 <__cmpsf2+0x1c>
   853a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   853a8:	4770      	bx	lr
   853aa:	bf00      	nop

000853ac <__aeabi_cfrcmple>:
   853ac:	4684      	mov	ip, r0
   853ae:	4608      	mov	r0, r1
   853b0:	4661      	mov	r1, ip
   853b2:	e7ff      	b.n	853b4 <__aeabi_cfcmpeq>

000853b4 <__aeabi_cfcmpeq>:
   853b4:	b50f      	push	{r0, r1, r2, r3, lr}
   853b6:	f7ff ffc9 	bl	8534c <__cmpsf2>
   853ba:	2800      	cmp	r0, #0
   853bc:	bf48      	it	mi
   853be:	f110 0f00 	cmnmi.w	r0, #0
   853c2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000853c4 <__aeabi_fcmpeq>:
   853c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   853c8:	f7ff fff4 	bl	853b4 <__aeabi_cfcmpeq>
   853cc:	bf0c      	ite	eq
   853ce:	2001      	moveq	r0, #1
   853d0:	2000      	movne	r0, #0
   853d2:	f85d fb08 	ldr.w	pc, [sp], #8
   853d6:	bf00      	nop

000853d8 <__aeabi_fcmplt>:
   853d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   853dc:	f7ff ffea 	bl	853b4 <__aeabi_cfcmpeq>
   853e0:	bf34      	ite	cc
   853e2:	2001      	movcc	r0, #1
   853e4:	2000      	movcs	r0, #0
   853e6:	f85d fb08 	ldr.w	pc, [sp], #8
   853ea:	bf00      	nop

000853ec <__aeabi_fcmple>:
   853ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   853f0:	f7ff ffe0 	bl	853b4 <__aeabi_cfcmpeq>
   853f4:	bf94      	ite	ls
   853f6:	2001      	movls	r0, #1
   853f8:	2000      	movhi	r0, #0
   853fa:	f85d fb08 	ldr.w	pc, [sp], #8
   853fe:	bf00      	nop

00085400 <__aeabi_fcmpge>:
   85400:	f84d ed08 	str.w	lr, [sp, #-8]!
   85404:	f7ff ffd2 	bl	853ac <__aeabi_cfrcmple>
   85408:	bf94      	ite	ls
   8540a:	2001      	movls	r0, #1
   8540c:	2000      	movhi	r0, #0
   8540e:	f85d fb08 	ldr.w	pc, [sp], #8
   85412:	bf00      	nop

00085414 <__aeabi_fcmpgt>:
   85414:	f84d ed08 	str.w	lr, [sp, #-8]!
   85418:	f7ff ffc8 	bl	853ac <__aeabi_cfrcmple>
   8541c:	bf34      	ite	cc
   8541e:	2001      	movcc	r0, #1
   85420:	2000      	movcs	r0, #0
   85422:	f85d fb08 	ldr.w	pc, [sp], #8
   85426:	bf00      	nop

00085428 <__aeabi_f2iz>:
   85428:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8542c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   85430:	d30f      	bcc.n	85452 <__aeabi_f2iz+0x2a>
   85432:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85436:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8543a:	d90d      	bls.n	85458 <__aeabi_f2iz+0x30>
   8543c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   85440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85444:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85448:	fa23 f002 	lsr.w	r0, r3, r2
   8544c:	bf18      	it	ne
   8544e:	4240      	negne	r0, r0
   85450:	4770      	bx	lr
   85452:	f04f 0000 	mov.w	r0, #0
   85456:	4770      	bx	lr
   85458:	f112 0f61 	cmn.w	r2, #97	; 0x61
   8545c:	d101      	bne.n	85462 <__aeabi_f2iz+0x3a>
   8545e:	0242      	lsls	r2, r0, #9
   85460:	d105      	bne.n	8546e <__aeabi_f2iz+0x46>
   85462:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   85466:	bf08      	it	eq
   85468:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8546c:	4770      	bx	lr
   8546e:	f04f 0000 	mov.w	r0, #0
   85472:	4770      	bx	lr

00085474 <__libc_init_array>:
   85474:	b570      	push	{r4, r5, r6, lr}
   85476:	4e0f      	ldr	r6, [pc, #60]	; (854b4 <__libc_init_array+0x40>)
   85478:	4d0f      	ldr	r5, [pc, #60]	; (854b8 <__libc_init_array+0x44>)
   8547a:	1b76      	subs	r6, r6, r5
   8547c:	10b6      	asrs	r6, r6, #2
   8547e:	bf18      	it	ne
   85480:	2400      	movne	r4, #0
   85482:	d005      	beq.n	85490 <__libc_init_array+0x1c>
   85484:	3401      	adds	r4, #1
   85486:	f855 3b04 	ldr.w	r3, [r5], #4
   8548a:	4798      	blx	r3
   8548c:	42a6      	cmp	r6, r4
   8548e:	d1f9      	bne.n	85484 <__libc_init_array+0x10>
   85490:	4e0a      	ldr	r6, [pc, #40]	; (854bc <__libc_init_array+0x48>)
   85492:	4d0b      	ldr	r5, [pc, #44]	; (854c0 <__libc_init_array+0x4c>)
   85494:	f004 fa60 	bl	89958 <_init>
   85498:	1b76      	subs	r6, r6, r5
   8549a:	10b6      	asrs	r6, r6, #2
   8549c:	bf18      	it	ne
   8549e:	2400      	movne	r4, #0
   854a0:	d006      	beq.n	854b0 <__libc_init_array+0x3c>
   854a2:	3401      	adds	r4, #1
   854a4:	f855 3b04 	ldr.w	r3, [r5], #4
   854a8:	4798      	blx	r3
   854aa:	42a6      	cmp	r6, r4
   854ac:	d1f9      	bne.n	854a2 <__libc_init_array+0x2e>
   854ae:	bd70      	pop	{r4, r5, r6, pc}
   854b0:	bd70      	pop	{r4, r5, r6, pc}
   854b2:	bf00      	nop
   854b4:	00089964 	.word	0x00089964
   854b8:	00089964 	.word	0x00089964
   854bc:	0008996c 	.word	0x0008996c
   854c0:	00089964 	.word	0x00089964

000854c4 <memset>:
   854c4:	b470      	push	{r4, r5, r6}
   854c6:	0786      	lsls	r6, r0, #30
   854c8:	d046      	beq.n	85558 <memset+0x94>
   854ca:	1e54      	subs	r4, r2, #1
   854cc:	2a00      	cmp	r2, #0
   854ce:	d041      	beq.n	85554 <memset+0x90>
   854d0:	b2ca      	uxtb	r2, r1
   854d2:	4603      	mov	r3, r0
   854d4:	e002      	b.n	854dc <memset+0x18>
   854d6:	f114 34ff 	adds.w	r4, r4, #4294967295
   854da:	d33b      	bcc.n	85554 <memset+0x90>
   854dc:	f803 2b01 	strb.w	r2, [r3], #1
   854e0:	079d      	lsls	r5, r3, #30
   854e2:	d1f8      	bne.n	854d6 <memset+0x12>
   854e4:	2c03      	cmp	r4, #3
   854e6:	d92e      	bls.n	85546 <memset+0x82>
   854e8:	b2cd      	uxtb	r5, r1
   854ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   854ee:	2c0f      	cmp	r4, #15
   854f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   854f4:	d919      	bls.n	8552a <memset+0x66>
   854f6:	4626      	mov	r6, r4
   854f8:	f103 0210 	add.w	r2, r3, #16
   854fc:	3e10      	subs	r6, #16
   854fe:	2e0f      	cmp	r6, #15
   85500:	f842 5c10 	str.w	r5, [r2, #-16]
   85504:	f842 5c0c 	str.w	r5, [r2, #-12]
   85508:	f842 5c08 	str.w	r5, [r2, #-8]
   8550c:	f842 5c04 	str.w	r5, [r2, #-4]
   85510:	f102 0210 	add.w	r2, r2, #16
   85514:	d8f2      	bhi.n	854fc <memset+0x38>
   85516:	f1a4 0210 	sub.w	r2, r4, #16
   8551a:	f022 020f 	bic.w	r2, r2, #15
   8551e:	f004 040f 	and.w	r4, r4, #15
   85522:	3210      	adds	r2, #16
   85524:	2c03      	cmp	r4, #3
   85526:	4413      	add	r3, r2
   85528:	d90d      	bls.n	85546 <memset+0x82>
   8552a:	461e      	mov	r6, r3
   8552c:	4622      	mov	r2, r4
   8552e:	3a04      	subs	r2, #4
   85530:	2a03      	cmp	r2, #3
   85532:	f846 5b04 	str.w	r5, [r6], #4
   85536:	d8fa      	bhi.n	8552e <memset+0x6a>
   85538:	1f22      	subs	r2, r4, #4
   8553a:	f022 0203 	bic.w	r2, r2, #3
   8553e:	3204      	adds	r2, #4
   85540:	4413      	add	r3, r2
   85542:	f004 0403 	and.w	r4, r4, #3
   85546:	b12c      	cbz	r4, 85554 <memset+0x90>
   85548:	b2c9      	uxtb	r1, r1
   8554a:	441c      	add	r4, r3
   8554c:	f803 1b01 	strb.w	r1, [r3], #1
   85550:	429c      	cmp	r4, r3
   85552:	d1fb      	bne.n	8554c <memset+0x88>
   85554:	bc70      	pop	{r4, r5, r6}
   85556:	4770      	bx	lr
   85558:	4614      	mov	r4, r2
   8555a:	4603      	mov	r3, r0
   8555c:	e7c2      	b.n	854e4 <memset+0x20>
   8555e:	bf00      	nop

00085560 <sprintf>:
   85560:	b40e      	push	{r1, r2, r3}
   85562:	4601      	mov	r1, r0
   85564:	b5f0      	push	{r4, r5, r6, r7, lr}
   85566:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8556a:	f44f 7702 	mov.w	r7, #520	; 0x208
   8556e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   85572:	b09c      	sub	sp, #112	; 0x70
   85574:	ac21      	add	r4, sp, #132	; 0x84
   85576:	f854 2b04 	ldr.w	r2, [r4], #4
   8557a:	4b0b      	ldr	r3, [pc, #44]	; (855a8 <sprintf+0x48>)
   8557c:	9102      	str	r1, [sp, #8]
   8557e:	9106      	str	r1, [sp, #24]
   85580:	6818      	ldr	r0, [r3, #0]
   85582:	a902      	add	r1, sp, #8
   85584:	4623      	mov	r3, r4
   85586:	9401      	str	r4, [sp, #4]
   85588:	f8ad 7014 	strh.w	r7, [sp, #20]
   8558c:	9504      	str	r5, [sp, #16]
   8558e:	9507      	str	r5, [sp, #28]
   85590:	f8ad 6016 	strh.w	r6, [sp, #22]
   85594:	f000 f838 	bl	85608 <_svfprintf_r>
   85598:	2200      	movs	r2, #0
   8559a:	9b02      	ldr	r3, [sp, #8]
   8559c:	701a      	strb	r2, [r3, #0]
   8559e:	b01c      	add	sp, #112	; 0x70
   855a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   855a4:	b003      	add	sp, #12
   855a6:	4770      	bx	lr
   855a8:	200701a4 	.word	0x200701a4

000855ac <strlen>:
   855ac:	f020 0103 	bic.w	r1, r0, #3
   855b0:	f010 0003 	ands.w	r0, r0, #3
   855b4:	f1c0 0000 	rsb	r0, r0, #0
   855b8:	f851 3b04 	ldr.w	r3, [r1], #4
   855bc:	f100 0c04 	add.w	ip, r0, #4
   855c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   855c4:	f06f 0200 	mvn.w	r2, #0
   855c8:	bf1c      	itt	ne
   855ca:	fa22 f20c 	lsrne.w	r2, r2, ip
   855ce:	4313      	orrne	r3, r2
   855d0:	f04f 0c01 	mov.w	ip, #1
   855d4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   855d8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   855dc:	eba3 020c 	sub.w	r2, r3, ip
   855e0:	ea22 0203 	bic.w	r2, r2, r3
   855e4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   855e8:	bf04      	itt	eq
   855ea:	f851 3b04 	ldreq.w	r3, [r1], #4
   855ee:	3004      	addeq	r0, #4
   855f0:	d0f4      	beq.n	855dc <strlen+0x30>
   855f2:	f1c2 0100 	rsb	r1, r2, #0
   855f6:	ea02 0201 	and.w	r2, r2, r1
   855fa:	fab2 f282 	clz	r2, r2
   855fe:	f1c2 021f 	rsb	r2, r2, #31
   85602:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85606:	4770      	bx	lr

00085608 <_svfprintf_r>:
   85608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8560c:	b0c3      	sub	sp, #268	; 0x10c
   8560e:	460c      	mov	r4, r1
   85610:	910b      	str	r1, [sp, #44]	; 0x2c
   85612:	4692      	mov	sl, r2
   85614:	930f      	str	r3, [sp, #60]	; 0x3c
   85616:	900c      	str	r0, [sp, #48]	; 0x30
   85618:	f002 fa56 	bl	87ac8 <_localeconv_r>
   8561c:	6803      	ldr	r3, [r0, #0]
   8561e:	4618      	mov	r0, r3
   85620:	931a      	str	r3, [sp, #104]	; 0x68
   85622:	f7ff ffc3 	bl	855ac <strlen>
   85626:	89a3      	ldrh	r3, [r4, #12]
   85628:	9019      	str	r0, [sp, #100]	; 0x64
   8562a:	0619      	lsls	r1, r3, #24
   8562c:	d503      	bpl.n	85636 <_svfprintf_r+0x2e>
   8562e:	6923      	ldr	r3, [r4, #16]
   85630:	2b00      	cmp	r3, #0
   85632:	f001 8035 	beq.w	866a0 <_svfprintf_r+0x1098>
   85636:	2300      	movs	r3, #0
   85638:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8563c:	46c8      	mov	r8, r9
   8563e:	9315      	str	r3, [sp, #84]	; 0x54
   85640:	9313      	str	r3, [sp, #76]	; 0x4c
   85642:	9314      	str	r3, [sp, #80]	; 0x50
   85644:	9318      	str	r3, [sp, #96]	; 0x60
   85646:	931b      	str	r3, [sp, #108]	; 0x6c
   85648:	9309      	str	r3, [sp, #36]	; 0x24
   8564a:	9316      	str	r3, [sp, #88]	; 0x58
   8564c:	9317      	str	r3, [sp, #92]	; 0x5c
   8564e:	9327      	str	r3, [sp, #156]	; 0x9c
   85650:	9326      	str	r3, [sp, #152]	; 0x98
   85652:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   85656:	f89a 3000 	ldrb.w	r3, [sl]
   8565a:	4654      	mov	r4, sl
   8565c:	b1eb      	cbz	r3, 8569a <_svfprintf_r+0x92>
   8565e:	2b25      	cmp	r3, #37	; 0x25
   85660:	d102      	bne.n	85668 <_svfprintf_r+0x60>
   85662:	e01a      	b.n	8569a <_svfprintf_r+0x92>
   85664:	2b25      	cmp	r3, #37	; 0x25
   85666:	d003      	beq.n	85670 <_svfprintf_r+0x68>
   85668:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8566c:	2b00      	cmp	r3, #0
   8566e:	d1f9      	bne.n	85664 <_svfprintf_r+0x5c>
   85670:	eba4 050a 	sub.w	r5, r4, sl
   85674:	b18d      	cbz	r5, 8569a <_svfprintf_r+0x92>
   85676:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85678:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8567a:	3301      	adds	r3, #1
   8567c:	442a      	add	r2, r5
   8567e:	2b07      	cmp	r3, #7
   85680:	f8c8 a000 	str.w	sl, [r8]
   85684:	f8c8 5004 	str.w	r5, [r8, #4]
   85688:	9227      	str	r2, [sp, #156]	; 0x9c
   8568a:	9326      	str	r3, [sp, #152]	; 0x98
   8568c:	f300 808a 	bgt.w	857a4 <_svfprintf_r+0x19c>
   85690:	f108 0808 	add.w	r8, r8, #8
   85694:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85696:	442b      	add	r3, r5
   85698:	9309      	str	r3, [sp, #36]	; 0x24
   8569a:	7823      	ldrb	r3, [r4, #0]
   8569c:	2b00      	cmp	r3, #0
   8569e:	f000 8089 	beq.w	857b4 <_svfprintf_r+0x1ac>
   856a2:	2300      	movs	r3, #0
   856a4:	f04f 30ff 	mov.w	r0, #4294967295
   856a8:	461a      	mov	r2, r3
   856aa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   856ae:	4619      	mov	r1, r3
   856b0:	930d      	str	r3, [sp, #52]	; 0x34
   856b2:	469b      	mov	fp, r3
   856b4:	7863      	ldrb	r3, [r4, #1]
   856b6:	f104 0a01 	add.w	sl, r4, #1
   856ba:	900a      	str	r0, [sp, #40]	; 0x28
   856bc:	f10a 0a01 	add.w	sl, sl, #1
   856c0:	f1a3 0020 	sub.w	r0, r3, #32
   856c4:	2858      	cmp	r0, #88	; 0x58
   856c6:	f200 83b7 	bhi.w	85e38 <_svfprintf_r+0x830>
   856ca:	e8df f010 	tbh	[pc, r0, lsl #1]
   856ce:	034c      	.short	0x034c
   856d0:	03b503b5 	.word	0x03b503b5
   856d4:	03b50354 	.word	0x03b50354
   856d8:	03b503b5 	.word	0x03b503b5
   856dc:	03b503b5 	.word	0x03b503b5
   856e0:	005903b5 	.word	0x005903b5
   856e4:	03b50359 	.word	0x03b50359
   856e8:	02140066 	.word	0x02140066
   856ec:	022f03b5 	.word	0x022f03b5
   856f0:	03a503a5 	.word	0x03a503a5
   856f4:	03a503a5 	.word	0x03a503a5
   856f8:	03a503a5 	.word	0x03a503a5
   856fc:	03a503a5 	.word	0x03a503a5
   85700:	03b503a5 	.word	0x03b503a5
   85704:	03b503b5 	.word	0x03b503b5
   85708:	03b503b5 	.word	0x03b503b5
   8570c:	03b503b5 	.word	0x03b503b5
   85710:	03b503b5 	.word	0x03b503b5
   85714:	028b03b5 	.word	0x028b03b5
   85718:	03b502d3 	.word	0x03b502d3
   8571c:	03b502d3 	.word	0x03b502d3
   85720:	03b503b5 	.word	0x03b503b5
   85724:	031b03b5 	.word	0x031b03b5
   85728:	03b503b5 	.word	0x03b503b5
   8572c:	03b50320 	.word	0x03b50320
   85730:	03b503b5 	.word	0x03b503b5
   85734:	03b503b5 	.word	0x03b503b5
   85738:	03b50234 	.word	0x03b50234
   8573c:	024b03b5 	.word	0x024b03b5
   85740:	03b503b5 	.word	0x03b503b5
   85744:	03b503b5 	.word	0x03b503b5
   85748:	03b503b5 	.word	0x03b503b5
   8574c:	03b503b5 	.word	0x03b503b5
   85750:	03b503b5 	.word	0x03b503b5
   85754:	039e0276 	.word	0x039e0276
   85758:	02d302d3 	.word	0x02d302d3
   8575c:	036302d3 	.word	0x036302d3
   85760:	03b5039e 	.word	0x03b5039e
   85764:	036803b5 	.word	0x036803b5
   85768:	037503b5 	.word	0x037503b5
   8576c:	038c01dd 	.word	0x038c01dd
   85770:	03b5035e 	.word	0x03b5035e
   85774:	03b501f2 	.word	0x03b501f2
   85778:	03b50087 	.word	0x03b50087
   8577c:	033203b5 	.word	0x033203b5
   85780:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85782:	6823      	ldr	r3, [r4, #0]
   85784:	4618      	mov	r0, r3
   85786:	930d      	str	r3, [sp, #52]	; 0x34
   85788:	4623      	mov	r3, r4
   8578a:	2800      	cmp	r0, #0
   8578c:	f103 0304 	add.w	r3, r3, #4
   85790:	930f      	str	r3, [sp, #60]	; 0x3c
   85792:	da04      	bge.n	8579e <_svfprintf_r+0x196>
   85794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85796:	425b      	negs	r3, r3
   85798:	930d      	str	r3, [sp, #52]	; 0x34
   8579a:	f04b 0b04 	orr.w	fp, fp, #4
   8579e:	f89a 3000 	ldrb.w	r3, [sl]
   857a2:	e78b      	b.n	856bc <_svfprintf_r+0xb4>
   857a4:	aa25      	add	r2, sp, #148	; 0x94
   857a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   857a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   857aa:	f003 f817 	bl	887dc <__ssprint_r>
   857ae:	b940      	cbnz	r0, 857c2 <_svfprintf_r+0x1ba>
   857b0:	46c8      	mov	r8, r9
   857b2:	e76f      	b.n	85694 <_svfprintf_r+0x8c>
   857b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   857b6:	b123      	cbz	r3, 857c2 <_svfprintf_r+0x1ba>
   857b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   857ba:	aa25      	add	r2, sp, #148	; 0x94
   857bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   857be:	f003 f80d 	bl	887dc <__ssprint_r>
   857c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   857c4:	899b      	ldrh	r3, [r3, #12]
   857c6:	f013 0f40 	tst.w	r3, #64	; 0x40
   857ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   857cc:	bf18      	it	ne
   857ce:	f04f 33ff 	movne.w	r3, #4294967295
   857d2:	9309      	str	r3, [sp, #36]	; 0x24
   857d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   857d6:	b043      	add	sp, #268	; 0x10c
   857d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857dc:	f01b 0f20 	tst.w	fp, #32
   857e0:	9311      	str	r3, [sp, #68]	; 0x44
   857e2:	f040 81af 	bne.w	85b44 <_svfprintf_r+0x53c>
   857e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   857e8:	f01b 0f10 	tst.w	fp, #16
   857ec:	4613      	mov	r3, r2
   857ee:	f040 859a 	bne.w	86326 <_svfprintf_r+0xd1e>
   857f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   857f6:	f000 8596 	beq.w	86326 <_svfprintf_r+0xd1e>
   857fa:	2500      	movs	r5, #0
   857fc:	2301      	movs	r3, #1
   857fe:	8814      	ldrh	r4, [r2, #0]
   85800:	3204      	adds	r2, #4
   85802:	920f      	str	r2, [sp, #60]	; 0x3c
   85804:	2200      	movs	r2, #0
   85806:	4617      	mov	r7, r2
   85808:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8580c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8580e:	1c4a      	adds	r2, r1, #1
   85810:	f000 8210 	beq.w	85c34 <_svfprintf_r+0x62c>
   85814:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85818:	9207      	str	r2, [sp, #28]
   8581a:	ea54 0205 	orrs.w	r2, r4, r5
   8581e:	f040 820f 	bne.w	85c40 <_svfprintf_r+0x638>
   85822:	2900      	cmp	r1, #0
   85824:	f040 8431 	bne.w	8608a <_svfprintf_r+0xa82>
   85828:	2b00      	cmp	r3, #0
   8582a:	f040 8539 	bne.w	862a0 <_svfprintf_r+0xc98>
   8582e:	f01b 0301 	ands.w	r3, fp, #1
   85832:	930e      	str	r3, [sp, #56]	; 0x38
   85834:	f000 8662 	beq.w	864fc <_svfprintf_r+0xef4>
   85838:	2330      	movs	r3, #48	; 0x30
   8583a:	ae42      	add	r6, sp, #264	; 0x108
   8583c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   85840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85844:	4293      	cmp	r3, r2
   85846:	bfb8      	it	lt
   85848:	4613      	movlt	r3, r2
   8584a:	9308      	str	r3, [sp, #32]
   8584c:	2300      	movs	r3, #0
   8584e:	9312      	str	r3, [sp, #72]	; 0x48
   85850:	b117      	cbz	r7, 85858 <_svfprintf_r+0x250>
   85852:	9b08      	ldr	r3, [sp, #32]
   85854:	3301      	adds	r3, #1
   85856:	9308      	str	r3, [sp, #32]
   85858:	9b07      	ldr	r3, [sp, #28]
   8585a:	f013 0302 	ands.w	r3, r3, #2
   8585e:	9310      	str	r3, [sp, #64]	; 0x40
   85860:	d002      	beq.n	85868 <_svfprintf_r+0x260>
   85862:	9b08      	ldr	r3, [sp, #32]
   85864:	3302      	adds	r3, #2
   85866:	9308      	str	r3, [sp, #32]
   85868:	9b07      	ldr	r3, [sp, #28]
   8586a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8586e:	f040 8310 	bne.w	85e92 <_svfprintf_r+0x88a>
   85872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85874:	9a08      	ldr	r2, [sp, #32]
   85876:	eba3 0b02 	sub.w	fp, r3, r2
   8587a:	f1bb 0f00 	cmp.w	fp, #0
   8587e:	f340 8308 	ble.w	85e92 <_svfprintf_r+0x88a>
   85882:	f1bb 0f10 	cmp.w	fp, #16
   85886:	f340 87b2 	ble.w	867ee <_svfprintf_r+0x11e6>
   8588a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8588c:	4643      	mov	r3, r8
   8588e:	4621      	mov	r1, r4
   85890:	46a8      	mov	r8, r5
   85892:	2710      	movs	r7, #16
   85894:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85896:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85898:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8589a:	e006      	b.n	858aa <_svfprintf_r+0x2a2>
   8589c:	f1ab 0b10 	sub.w	fp, fp, #16
   858a0:	f1bb 0f10 	cmp.w	fp, #16
   858a4:	f103 0308 	add.w	r3, r3, #8
   858a8:	dd18      	ble.n	858dc <_svfprintf_r+0x2d4>
   858aa:	3201      	adds	r2, #1
   858ac:	48ab      	ldr	r0, [pc, #684]	; (85b5c <_svfprintf_r+0x554>)
   858ae:	3110      	adds	r1, #16
   858b0:	2a07      	cmp	r2, #7
   858b2:	9127      	str	r1, [sp, #156]	; 0x9c
   858b4:	9226      	str	r2, [sp, #152]	; 0x98
   858b6:	e883 0081 	stmia.w	r3, {r0, r7}
   858ba:	ddef      	ble.n	8589c <_svfprintf_r+0x294>
   858bc:	aa25      	add	r2, sp, #148	; 0x94
   858be:	4629      	mov	r1, r5
   858c0:	4620      	mov	r0, r4
   858c2:	f002 ff8b 	bl	887dc <__ssprint_r>
   858c6:	2800      	cmp	r0, #0
   858c8:	f47f af7b 	bne.w	857c2 <_svfprintf_r+0x1ba>
   858cc:	f1ab 0b10 	sub.w	fp, fp, #16
   858d0:	f1bb 0f10 	cmp.w	fp, #16
   858d4:	464b      	mov	r3, r9
   858d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   858d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   858da:	dce6      	bgt.n	858aa <_svfprintf_r+0x2a2>
   858dc:	4645      	mov	r5, r8
   858de:	460c      	mov	r4, r1
   858e0:	4698      	mov	r8, r3
   858e2:	3201      	adds	r2, #1
   858e4:	4b9d      	ldr	r3, [pc, #628]	; (85b5c <_svfprintf_r+0x554>)
   858e6:	445c      	add	r4, fp
   858e8:	2a07      	cmp	r2, #7
   858ea:	9427      	str	r4, [sp, #156]	; 0x9c
   858ec:	9226      	str	r2, [sp, #152]	; 0x98
   858ee:	e888 0808 	stmia.w	r8, {r3, fp}
   858f2:	f300 82c3 	bgt.w	85e7c <_svfprintf_r+0x874>
   858f6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   858fa:	f108 0808 	add.w	r8, r8, #8
   858fe:	b187      	cbz	r7, 85922 <_svfprintf_r+0x31a>
   85900:	2101      	movs	r1, #1
   85902:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85904:	440c      	add	r4, r1
   85906:	440b      	add	r3, r1
   85908:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8590c:	2b07      	cmp	r3, #7
   8590e:	9427      	str	r4, [sp, #156]	; 0x9c
   85910:	9326      	str	r3, [sp, #152]	; 0x98
   85912:	f8c8 1004 	str.w	r1, [r8, #4]
   85916:	f8c8 2000 	str.w	r2, [r8]
   8591a:	f300 83cd 	bgt.w	860b8 <_svfprintf_r+0xab0>
   8591e:	f108 0808 	add.w	r8, r8, #8
   85922:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85924:	b17b      	cbz	r3, 85946 <_svfprintf_r+0x33e>
   85926:	2102      	movs	r1, #2
   85928:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8592a:	440c      	add	r4, r1
   8592c:	3301      	adds	r3, #1
   8592e:	aa1e      	add	r2, sp, #120	; 0x78
   85930:	2b07      	cmp	r3, #7
   85932:	9427      	str	r4, [sp, #156]	; 0x9c
   85934:	9326      	str	r3, [sp, #152]	; 0x98
   85936:	f8c8 1004 	str.w	r1, [r8, #4]
   8593a:	f8c8 2000 	str.w	r2, [r8]
   8593e:	f300 8411 	bgt.w	86164 <_svfprintf_r+0xb5c>
   85942:	f108 0808 	add.w	r8, r8, #8
   85946:	2d80      	cmp	r5, #128	; 0x80
   85948:	f000 8304 	beq.w	85f54 <_svfprintf_r+0x94c>
   8594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8594e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85950:	1a9f      	subs	r7, r3, r2
   85952:	2f00      	cmp	r7, #0
   85954:	dd37      	ble.n	859c6 <_svfprintf_r+0x3be>
   85956:	2f10      	cmp	r7, #16
   85958:	f340 8679 	ble.w	8664e <_svfprintf_r+0x1046>
   8595c:	4d80      	ldr	r5, [pc, #512]	; (85b60 <_svfprintf_r+0x558>)
   8595e:	4642      	mov	r2, r8
   85960:	4621      	mov	r1, r4
   85962:	46b0      	mov	r8, r6
   85964:	f04f 0b10 	mov.w	fp, #16
   85968:	462e      	mov	r6, r5
   8596a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8596c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8596e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85970:	e004      	b.n	8597c <_svfprintf_r+0x374>
   85972:	3f10      	subs	r7, #16
   85974:	2f10      	cmp	r7, #16
   85976:	f102 0208 	add.w	r2, r2, #8
   8597a:	dd15      	ble.n	859a8 <_svfprintf_r+0x3a0>
   8597c:	3301      	adds	r3, #1
   8597e:	3110      	adds	r1, #16
   85980:	2b07      	cmp	r3, #7
   85982:	9127      	str	r1, [sp, #156]	; 0x9c
   85984:	9326      	str	r3, [sp, #152]	; 0x98
   85986:	e882 0840 	stmia.w	r2, {r6, fp}
   8598a:	ddf2      	ble.n	85972 <_svfprintf_r+0x36a>
   8598c:	aa25      	add	r2, sp, #148	; 0x94
   8598e:	4629      	mov	r1, r5
   85990:	4620      	mov	r0, r4
   85992:	f002 ff23 	bl	887dc <__ssprint_r>
   85996:	2800      	cmp	r0, #0
   85998:	f47f af13 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8599c:	3f10      	subs	r7, #16
   8599e:	2f10      	cmp	r7, #16
   859a0:	464a      	mov	r2, r9
   859a2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   859a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   859a6:	dce9      	bgt.n	8597c <_svfprintf_r+0x374>
   859a8:	4635      	mov	r5, r6
   859aa:	460c      	mov	r4, r1
   859ac:	4646      	mov	r6, r8
   859ae:	4690      	mov	r8, r2
   859b0:	3301      	adds	r3, #1
   859b2:	443c      	add	r4, r7
   859b4:	2b07      	cmp	r3, #7
   859b6:	9427      	str	r4, [sp, #156]	; 0x9c
   859b8:	9326      	str	r3, [sp, #152]	; 0x98
   859ba:	e888 00a0 	stmia.w	r8, {r5, r7}
   859be:	f300 8370 	bgt.w	860a2 <_svfprintf_r+0xa9a>
   859c2:	f108 0808 	add.w	r8, r8, #8
   859c6:	9b07      	ldr	r3, [sp, #28]
   859c8:	05df      	lsls	r7, r3, #23
   859ca:	f100 8264 	bmi.w	85e96 <_svfprintf_r+0x88e>
   859ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   859d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   859d2:	3301      	adds	r3, #1
   859d4:	440c      	add	r4, r1
   859d6:	2b07      	cmp	r3, #7
   859d8:	9427      	str	r4, [sp, #156]	; 0x9c
   859da:	f8c8 6000 	str.w	r6, [r8]
   859de:	f8c8 1004 	str.w	r1, [r8, #4]
   859e2:	9326      	str	r3, [sp, #152]	; 0x98
   859e4:	f300 83b3 	bgt.w	8614e <_svfprintf_r+0xb46>
   859e8:	f108 0808 	add.w	r8, r8, #8
   859ec:	9b07      	ldr	r3, [sp, #28]
   859ee:	075b      	lsls	r3, r3, #29
   859f0:	d53b      	bpl.n	85a6a <_svfprintf_r+0x462>
   859f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   859f4:	9a08      	ldr	r2, [sp, #32]
   859f6:	1a9d      	subs	r5, r3, r2
   859f8:	2d00      	cmp	r5, #0
   859fa:	dd36      	ble.n	85a6a <_svfprintf_r+0x462>
   859fc:	2d10      	cmp	r5, #16
   859fe:	f340 8721 	ble.w	86844 <_svfprintf_r+0x123c>
   85a02:	2610      	movs	r6, #16
   85a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85a06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85a08:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85a0c:	e004      	b.n	85a18 <_svfprintf_r+0x410>
   85a0e:	3d10      	subs	r5, #16
   85a10:	2d10      	cmp	r5, #16
   85a12:	f108 0808 	add.w	r8, r8, #8
   85a16:	dd16      	ble.n	85a46 <_svfprintf_r+0x43e>
   85a18:	3301      	adds	r3, #1
   85a1a:	4a50      	ldr	r2, [pc, #320]	; (85b5c <_svfprintf_r+0x554>)
   85a1c:	3410      	adds	r4, #16
   85a1e:	2b07      	cmp	r3, #7
   85a20:	9427      	str	r4, [sp, #156]	; 0x9c
   85a22:	9326      	str	r3, [sp, #152]	; 0x98
   85a24:	e888 0044 	stmia.w	r8, {r2, r6}
   85a28:	ddf1      	ble.n	85a0e <_svfprintf_r+0x406>
   85a2a:	aa25      	add	r2, sp, #148	; 0x94
   85a2c:	4659      	mov	r1, fp
   85a2e:	4638      	mov	r0, r7
   85a30:	f002 fed4 	bl	887dc <__ssprint_r>
   85a34:	2800      	cmp	r0, #0
   85a36:	f47f aec4 	bne.w	857c2 <_svfprintf_r+0x1ba>
   85a3a:	3d10      	subs	r5, #16
   85a3c:	2d10      	cmp	r5, #16
   85a3e:	46c8      	mov	r8, r9
   85a40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85a44:	dce8      	bgt.n	85a18 <_svfprintf_r+0x410>
   85a46:	3301      	adds	r3, #1
   85a48:	4a44      	ldr	r2, [pc, #272]	; (85b5c <_svfprintf_r+0x554>)
   85a4a:	442c      	add	r4, r5
   85a4c:	2b07      	cmp	r3, #7
   85a4e:	9427      	str	r4, [sp, #156]	; 0x9c
   85a50:	9326      	str	r3, [sp, #152]	; 0x98
   85a52:	e888 0024 	stmia.w	r8, {r2, r5}
   85a56:	dd08      	ble.n	85a6a <_svfprintf_r+0x462>
   85a58:	aa25      	add	r2, sp, #148	; 0x94
   85a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
   85a5e:	f002 febd 	bl	887dc <__ssprint_r>
   85a62:	2800      	cmp	r0, #0
   85a64:	f47f aead 	bne.w	857c2 <_svfprintf_r+0x1ba>
   85a68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85a6e:	9908      	ldr	r1, [sp, #32]
   85a70:	428a      	cmp	r2, r1
   85a72:	bfac      	ite	ge
   85a74:	189b      	addge	r3, r3, r2
   85a76:	185b      	addlt	r3, r3, r1
   85a78:	9309      	str	r3, [sp, #36]	; 0x24
   85a7a:	2c00      	cmp	r4, #0
   85a7c:	f040 82fb 	bne.w	86076 <_svfprintf_r+0xa6e>
   85a80:	2300      	movs	r3, #0
   85a82:	46c8      	mov	r8, r9
   85a84:	9326      	str	r3, [sp, #152]	; 0x98
   85a86:	e5e6      	b.n	85656 <_svfprintf_r+0x4e>
   85a88:	9311      	str	r3, [sp, #68]	; 0x44
   85a8a:	f01b 0320 	ands.w	r3, fp, #32
   85a8e:	f040 8145 	bne.w	85d1c <_svfprintf_r+0x714>
   85a92:	f01b 0210 	ands.w	r2, fp, #16
   85a96:	f040 8466 	bne.w	86366 <_svfprintf_r+0xd5e>
   85a9a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   85a9e:	f000 8462 	beq.w	86366 <_svfprintf_r+0xd5e>
   85aa2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85aa4:	4613      	mov	r3, r2
   85aa6:	460a      	mov	r2, r1
   85aa8:	3204      	adds	r2, #4
   85aaa:	880c      	ldrh	r4, [r1, #0]
   85aac:	2500      	movs	r5, #0
   85aae:	920f      	str	r2, [sp, #60]	; 0x3c
   85ab0:	e6a8      	b.n	85804 <_svfprintf_r+0x1fc>
   85ab2:	2500      	movs	r5, #0
   85ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85ab6:	9311      	str	r3, [sp, #68]	; 0x44
   85ab8:	6816      	ldr	r6, [r2, #0]
   85aba:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   85abe:	1d14      	adds	r4, r2, #4
   85ac0:	2e00      	cmp	r6, #0
   85ac2:	f000 86cd 	beq.w	86860 <_svfprintf_r+0x1258>
   85ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85ac8:	1c53      	adds	r3, r2, #1
   85aca:	f000 861b 	beq.w	86704 <_svfprintf_r+0x10fc>
   85ace:	4629      	mov	r1, r5
   85ad0:	4630      	mov	r0, r6
   85ad2:	f002 faad 	bl	88030 <memchr>
   85ad6:	2800      	cmp	r0, #0
   85ad8:	f000 870d 	beq.w	868f6 <_svfprintf_r+0x12ee>
   85adc:	1b83      	subs	r3, r0, r6
   85ade:	950a      	str	r5, [sp, #40]	; 0x28
   85ae0:	930e      	str	r3, [sp, #56]	; 0x38
   85ae2:	940f      	str	r4, [sp, #60]	; 0x3c
   85ae4:	f8cd b01c 	str.w	fp, [sp, #28]
   85ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85aec:	9308      	str	r3, [sp, #32]
   85aee:	9512      	str	r5, [sp, #72]	; 0x48
   85af0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85af4:	e6ac      	b.n	85850 <_svfprintf_r+0x248>
   85af6:	f89a 3000 	ldrb.w	r3, [sl]
   85afa:	f10a 0401 	add.w	r4, sl, #1
   85afe:	2b2a      	cmp	r3, #42	; 0x2a
   85b00:	f000 87c2 	beq.w	86a88 <_svfprintf_r+0x1480>
   85b04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85b08:	2809      	cmp	r0, #9
   85b0a:	46a2      	mov	sl, r4
   85b0c:	f200 8718 	bhi.w	86940 <_svfprintf_r+0x1338>
   85b10:	2300      	movs	r3, #0
   85b12:	461c      	mov	r4, r3
   85b14:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85b18:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85b1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85b20:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85b24:	2809      	cmp	r0, #9
   85b26:	d9f5      	bls.n	85b14 <_svfprintf_r+0x50c>
   85b28:	940a      	str	r4, [sp, #40]	; 0x28
   85b2a:	e5c9      	b.n	856c0 <_svfprintf_r+0xb8>
   85b2c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   85b30:	f89a 3000 	ldrb.w	r3, [sl]
   85b34:	e5c2      	b.n	856bc <_svfprintf_r+0xb4>
   85b36:	f04b 0b10 	orr.w	fp, fp, #16
   85b3a:	f01b 0f20 	tst.w	fp, #32
   85b3e:	9311      	str	r3, [sp, #68]	; 0x44
   85b40:	f43f ae51 	beq.w	857e6 <_svfprintf_r+0x1de>
   85b44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85b46:	3407      	adds	r4, #7
   85b48:	f024 0307 	bic.w	r3, r4, #7
   85b4c:	f103 0208 	add.w	r2, r3, #8
   85b50:	e9d3 4500 	ldrd	r4, r5, [r3]
   85b54:	920f      	str	r2, [sp, #60]	; 0x3c
   85b56:	2301      	movs	r3, #1
   85b58:	e654      	b.n	85804 <_svfprintf_r+0x1fc>
   85b5a:	bf00      	nop
   85b5c:	00089718 	.word	0x00089718
   85b60:	00089728 	.word	0x00089728
   85b64:	9311      	str	r3, [sp, #68]	; 0x44
   85b66:	2a00      	cmp	r2, #0
   85b68:	f040 87ad 	bne.w	86ac6 <_svfprintf_r+0x14be>
   85b6c:	4bbe      	ldr	r3, [pc, #760]	; (85e68 <_svfprintf_r+0x860>)
   85b6e:	f01b 0f20 	tst.w	fp, #32
   85b72:	9318      	str	r3, [sp, #96]	; 0x60
   85b74:	f040 80e7 	bne.w	85d46 <_svfprintf_r+0x73e>
   85b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85b7a:	f01b 0f10 	tst.w	fp, #16
   85b7e:	4613      	mov	r3, r2
   85b80:	f040 83d8 	bne.w	86334 <_svfprintf_r+0xd2c>
   85b84:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85b88:	f000 83d4 	beq.w	86334 <_svfprintf_r+0xd2c>
   85b8c:	2500      	movs	r5, #0
   85b8e:	3304      	adds	r3, #4
   85b90:	8814      	ldrh	r4, [r2, #0]
   85b92:	930f      	str	r3, [sp, #60]	; 0x3c
   85b94:	f01b 0f01 	tst.w	fp, #1
   85b98:	f000 80e3 	beq.w	85d62 <_svfprintf_r+0x75a>
   85b9c:	ea54 0305 	orrs.w	r3, r4, r5
   85ba0:	f000 80df 	beq.w	85d62 <_svfprintf_r+0x75a>
   85ba4:	2330      	movs	r3, #48	; 0x30
   85ba6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85baa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85bae:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85bb2:	f04b 0b02 	orr.w	fp, fp, #2
   85bb6:	2302      	movs	r3, #2
   85bb8:	e624      	b.n	85804 <_svfprintf_r+0x1fc>
   85bba:	2201      	movs	r2, #1
   85bbc:	9311      	str	r3, [sp, #68]	; 0x44
   85bbe:	2300      	movs	r3, #0
   85bc0:	4611      	mov	r1, r2
   85bc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85bc4:	9208      	str	r2, [sp, #32]
   85bc6:	6802      	ldr	r2, [r0, #0]
   85bc8:	461f      	mov	r7, r3
   85bca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85bce:	930a      	str	r3, [sp, #40]	; 0x28
   85bd0:	9312      	str	r3, [sp, #72]	; 0x48
   85bd2:	1d03      	adds	r3, r0, #4
   85bd4:	f8cd b01c 	str.w	fp, [sp, #28]
   85bd8:	910e      	str	r1, [sp, #56]	; 0x38
   85bda:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85bde:	930f      	str	r3, [sp, #60]	; 0x3c
   85be0:	ae28      	add	r6, sp, #160	; 0xa0
   85be2:	e639      	b.n	85858 <_svfprintf_r+0x250>
   85be4:	9311      	str	r3, [sp, #68]	; 0x44
   85be6:	2a00      	cmp	r2, #0
   85be8:	f040 8784 	bne.w	86af4 <_svfprintf_r+0x14ec>
   85bec:	f04b 0b10 	orr.w	fp, fp, #16
   85bf0:	f01b 0f20 	tst.w	fp, #32
   85bf4:	f040 8475 	bne.w	864e2 <_svfprintf_r+0xeda>
   85bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85bfa:	f01b 0f10 	tst.w	fp, #16
   85bfe:	4613      	mov	r3, r2
   85c00:	f040 839d 	bne.w	8633e <_svfprintf_r+0xd36>
   85c04:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85c08:	f000 8399 	beq.w	8633e <_svfprintf_r+0xd36>
   85c0c:	f9b2 4000 	ldrsh.w	r4, [r2]
   85c10:	3304      	adds	r3, #4
   85c12:	17e5      	asrs	r5, r4, #31
   85c14:	930f      	str	r3, [sp, #60]	; 0x3c
   85c16:	4622      	mov	r2, r4
   85c18:	462b      	mov	r3, r5
   85c1a:	2a00      	cmp	r2, #0
   85c1c:	f173 0300 	sbcs.w	r3, r3, #0
   85c20:	f2c0 8398 	blt.w	86354 <_svfprintf_r+0xd4c>
   85c24:	990a      	ldr	r1, [sp, #40]	; 0x28
   85c26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85c2a:	1c4a      	adds	r2, r1, #1
   85c2c:	f04f 0301 	mov.w	r3, #1
   85c30:	f47f adf0 	bne.w	85814 <_svfprintf_r+0x20c>
   85c34:	ea54 0205 	orrs.w	r2, r4, r5
   85c38:	f000 8229 	beq.w	8608e <_svfprintf_r+0xa86>
   85c3c:	f8cd b01c 	str.w	fp, [sp, #28]
   85c40:	2b01      	cmp	r3, #1
   85c42:	f000 830e 	beq.w	86262 <_svfprintf_r+0xc5a>
   85c46:	2b02      	cmp	r3, #2
   85c48:	f040 829c 	bne.w	86184 <_svfprintf_r+0xb7c>
   85c4c:	464e      	mov	r6, r9
   85c4e:	9818      	ldr	r0, [sp, #96]	; 0x60
   85c50:	0923      	lsrs	r3, r4, #4
   85c52:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85c56:	0929      	lsrs	r1, r5, #4
   85c58:	f004 020f 	and.w	r2, r4, #15
   85c5c:	460d      	mov	r5, r1
   85c5e:	461c      	mov	r4, r3
   85c60:	5c83      	ldrb	r3, [r0, r2]
   85c62:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85c66:	ea54 0305 	orrs.w	r3, r4, r5
   85c6a:	d1f1      	bne.n	85c50 <_svfprintf_r+0x648>
   85c6c:	eba9 0306 	sub.w	r3, r9, r6
   85c70:	930e      	str	r3, [sp, #56]	; 0x38
   85c72:	e5e5      	b.n	85840 <_svfprintf_r+0x238>
   85c74:	9311      	str	r3, [sp, #68]	; 0x44
   85c76:	2a00      	cmp	r2, #0
   85c78:	f040 8738 	bne.w	86aec <_svfprintf_r+0x14e4>
   85c7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85c7e:	f01b 0f08 	tst.w	fp, #8
   85c82:	f104 0407 	add.w	r4, r4, #7
   85c86:	f000 84cf 	beq.w	86628 <_svfprintf_r+0x1020>
   85c8a:	f024 0307 	bic.w	r3, r4, #7
   85c8e:	f103 0208 	add.w	r2, r3, #8
   85c92:	920f      	str	r2, [sp, #60]	; 0x3c
   85c94:	681a      	ldr	r2, [r3, #0]
   85c96:	685b      	ldr	r3, [r3, #4]
   85c98:	9215      	str	r2, [sp, #84]	; 0x54
   85c9a:	9314      	str	r3, [sp, #80]	; 0x50
   85c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85c9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85ca0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85ca4:	4628      	mov	r0, r5
   85ca6:	4621      	mov	r1, r4
   85ca8:	f04f 32ff 	mov.w	r2, #4294967295
   85cac:	4b6f      	ldr	r3, [pc, #444]	; (85e6c <_svfprintf_r+0x864>)
   85cae:	f003 fa9f 	bl	891f0 <__aeabi_dcmpun>
   85cb2:	2800      	cmp	r0, #0
   85cb4:	f040 8434 	bne.w	86520 <_svfprintf_r+0xf18>
   85cb8:	4628      	mov	r0, r5
   85cba:	4621      	mov	r1, r4
   85cbc:	f04f 32ff 	mov.w	r2, #4294967295
   85cc0:	4b6a      	ldr	r3, [pc, #424]	; (85e6c <_svfprintf_r+0x864>)
   85cc2:	f003 fa77 	bl	891b4 <__aeabi_dcmple>
   85cc6:	2800      	cmp	r0, #0
   85cc8:	f040 842a 	bne.w	86520 <_svfprintf_r+0xf18>
   85ccc:	a815      	add	r0, sp, #84	; 0x54
   85cce:	c80d      	ldmia	r0, {r0, r2, r3}
   85cd0:	9914      	ldr	r1, [sp, #80]	; 0x50
   85cd2:	f003 fa65 	bl	891a0 <__aeabi_dcmplt>
   85cd6:	2800      	cmp	r0, #0
   85cd8:	f040 85d4 	bne.w	86884 <_svfprintf_r+0x127c>
   85cdc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85ce0:	2303      	movs	r3, #3
   85ce2:	461a      	mov	r2, r3
   85ce4:	9308      	str	r3, [sp, #32]
   85ce6:	2300      	movs	r3, #0
   85ce8:	4e61      	ldr	r6, [pc, #388]	; (85e70 <_svfprintf_r+0x868>)
   85cea:	4619      	mov	r1, r3
   85cec:	930a      	str	r3, [sp, #40]	; 0x28
   85cee:	4b61      	ldr	r3, [pc, #388]	; (85e74 <_svfprintf_r+0x86c>)
   85cf0:	920e      	str	r2, [sp, #56]	; 0x38
   85cf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85cf4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85cf8:	9007      	str	r0, [sp, #28]
   85cfa:	9112      	str	r1, [sp, #72]	; 0x48
   85cfc:	2a47      	cmp	r2, #71	; 0x47
   85cfe:	bfd8      	it	le
   85d00:	461e      	movle	r6, r3
   85d02:	e5a5      	b.n	85850 <_svfprintf_r+0x248>
   85d04:	f04b 0b08 	orr.w	fp, fp, #8
   85d08:	f89a 3000 	ldrb.w	r3, [sl]
   85d0c:	e4d6      	b.n	856bc <_svfprintf_r+0xb4>
   85d0e:	f04b 0b10 	orr.w	fp, fp, #16
   85d12:	9311      	str	r3, [sp, #68]	; 0x44
   85d14:	f01b 0320 	ands.w	r3, fp, #32
   85d18:	f43f aebb 	beq.w	85a92 <_svfprintf_r+0x48a>
   85d1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85d1e:	3407      	adds	r4, #7
   85d20:	f024 0307 	bic.w	r3, r4, #7
   85d24:	f103 0208 	add.w	r2, r3, #8
   85d28:	e9d3 4500 	ldrd	r4, r5, [r3]
   85d2c:	920f      	str	r2, [sp, #60]	; 0x3c
   85d2e:	2300      	movs	r3, #0
   85d30:	e568      	b.n	85804 <_svfprintf_r+0x1fc>
   85d32:	9311      	str	r3, [sp, #68]	; 0x44
   85d34:	2a00      	cmp	r2, #0
   85d36:	f040 86c2 	bne.w	86abe <_svfprintf_r+0x14b6>
   85d3a:	4b4f      	ldr	r3, [pc, #316]	; (85e78 <_svfprintf_r+0x870>)
   85d3c:	f01b 0f20 	tst.w	fp, #32
   85d40:	9318      	str	r3, [sp, #96]	; 0x60
   85d42:	f43f af19 	beq.w	85b78 <_svfprintf_r+0x570>
   85d46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85d48:	f01b 0f01 	tst.w	fp, #1
   85d4c:	f104 0407 	add.w	r4, r4, #7
   85d50:	f024 0307 	bic.w	r3, r4, #7
   85d54:	f103 0208 	add.w	r2, r3, #8
   85d58:	920f      	str	r2, [sp, #60]	; 0x3c
   85d5a:	e9d3 4500 	ldrd	r4, r5, [r3]
   85d5e:	f47f af1d 	bne.w	85b9c <_svfprintf_r+0x594>
   85d62:	2302      	movs	r3, #2
   85d64:	e54e      	b.n	85804 <_svfprintf_r+0x1fc>
   85d66:	f89a 3000 	ldrb.w	r3, [sl]
   85d6a:	2900      	cmp	r1, #0
   85d6c:	f47f aca6 	bne.w	856bc <_svfprintf_r+0xb4>
   85d70:	2201      	movs	r2, #1
   85d72:	2120      	movs	r1, #32
   85d74:	e4a2      	b.n	856bc <_svfprintf_r+0xb4>
   85d76:	f04b 0b01 	orr.w	fp, fp, #1
   85d7a:	f89a 3000 	ldrb.w	r3, [sl]
   85d7e:	e49d      	b.n	856bc <_svfprintf_r+0xb4>
   85d80:	f89a 3000 	ldrb.w	r3, [sl]
   85d84:	2201      	movs	r2, #1
   85d86:	212b      	movs	r1, #43	; 0x2b
   85d88:	e498      	b.n	856bc <_svfprintf_r+0xb4>
   85d8a:	f04b 0b20 	orr.w	fp, fp, #32
   85d8e:	f89a 3000 	ldrb.w	r3, [sl]
   85d92:	e493      	b.n	856bc <_svfprintf_r+0xb4>
   85d94:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85d98:	f89a 3000 	ldrb.w	r3, [sl]
   85d9c:	e48e      	b.n	856bc <_svfprintf_r+0xb4>
   85d9e:	f89a 3000 	ldrb.w	r3, [sl]
   85da2:	2b6c      	cmp	r3, #108	; 0x6c
   85da4:	bf03      	ittte	eq
   85da6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85daa:	f04b 0b20 	orreq.w	fp, fp, #32
   85dae:	f10a 0a01 	addeq.w	sl, sl, #1
   85db2:	f04b 0b10 	orrne.w	fp, fp, #16
   85db6:	e481      	b.n	856bc <_svfprintf_r+0xb4>
   85db8:	2a00      	cmp	r2, #0
   85dba:	f040 867c 	bne.w	86ab6 <_svfprintf_r+0x14ae>
   85dbe:	f01b 0f20 	tst.w	fp, #32
   85dc2:	f040 8452 	bne.w	8666a <_svfprintf_r+0x1062>
   85dc6:	f01b 0f10 	tst.w	fp, #16
   85dca:	f040 8438 	bne.w	8663e <_svfprintf_r+0x1036>
   85dce:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85dd2:	f000 8434 	beq.w	8663e <_svfprintf_r+0x1036>
   85dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85dd8:	6813      	ldr	r3, [r2, #0]
   85dda:	3204      	adds	r2, #4
   85ddc:	920f      	str	r2, [sp, #60]	; 0x3c
   85dde:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85de2:	801a      	strh	r2, [r3, #0]
   85de4:	e437      	b.n	85656 <_svfprintf_r+0x4e>
   85de6:	2378      	movs	r3, #120	; 0x78
   85de8:	2230      	movs	r2, #48	; 0x30
   85dea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85dec:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   85df0:	9311      	str	r3, [sp, #68]	; 0x44
   85df2:	1d03      	adds	r3, r0, #4
   85df4:	930f      	str	r3, [sp, #60]	; 0x3c
   85df6:	4b20      	ldr	r3, [pc, #128]	; (85e78 <_svfprintf_r+0x870>)
   85df8:	6804      	ldr	r4, [r0, #0]
   85dfa:	9318      	str	r3, [sp, #96]	; 0x60
   85dfc:	f04b 0b02 	orr.w	fp, fp, #2
   85e00:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   85e04:	2500      	movs	r5, #0
   85e06:	2302      	movs	r3, #2
   85e08:	e4fc      	b.n	85804 <_svfprintf_r+0x1fc>
   85e0a:	9311      	str	r3, [sp, #68]	; 0x44
   85e0c:	2a00      	cmp	r2, #0
   85e0e:	f43f aeef 	beq.w	85bf0 <_svfprintf_r+0x5e8>
   85e12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85e16:	e6eb      	b.n	85bf0 <_svfprintf_r+0x5e8>
   85e18:	2000      	movs	r0, #0
   85e1a:	4604      	mov	r4, r0
   85e1c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85e20:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85e24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85e28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85e2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85e30:	2809      	cmp	r0, #9
   85e32:	d9f5      	bls.n	85e20 <_svfprintf_r+0x818>
   85e34:	940d      	str	r4, [sp, #52]	; 0x34
   85e36:	e443      	b.n	856c0 <_svfprintf_r+0xb8>
   85e38:	9311      	str	r3, [sp, #68]	; 0x44
   85e3a:	2a00      	cmp	r2, #0
   85e3c:	f040 864a 	bne.w	86ad4 <_svfprintf_r+0x14cc>
   85e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85e42:	2a00      	cmp	r2, #0
   85e44:	f43f acb6 	beq.w	857b4 <_svfprintf_r+0x1ac>
   85e48:	2300      	movs	r3, #0
   85e4a:	2101      	movs	r1, #1
   85e4c:	461f      	mov	r7, r3
   85e4e:	9108      	str	r1, [sp, #32]
   85e50:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85e54:	f8cd b01c 	str.w	fp, [sp, #28]
   85e58:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85e5c:	930a      	str	r3, [sp, #40]	; 0x28
   85e5e:	9312      	str	r3, [sp, #72]	; 0x48
   85e60:	910e      	str	r1, [sp, #56]	; 0x38
   85e62:	ae28      	add	r6, sp, #160	; 0xa0
   85e64:	e4f8      	b.n	85858 <_svfprintf_r+0x250>
   85e66:	bf00      	nop
   85e68:	000896e4 	.word	0x000896e4
   85e6c:	7fefffff 	.word	0x7fefffff
   85e70:	000896d8 	.word	0x000896d8
   85e74:	000896d4 	.word	0x000896d4
   85e78:	000896f8 	.word	0x000896f8
   85e7c:	aa25      	add	r2, sp, #148	; 0x94
   85e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e80:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e82:	f002 fcab 	bl	887dc <__ssprint_r>
   85e86:	2800      	cmp	r0, #0
   85e88:	f47f ac9b 	bne.w	857c2 <_svfprintf_r+0x1ba>
   85e8c:	46c8      	mov	r8, r9
   85e8e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85e92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e94:	e533      	b.n	858fe <_svfprintf_r+0x2f6>
   85e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85e98:	2b65      	cmp	r3, #101	; 0x65
   85e9a:	f340 809a 	ble.w	85fd2 <_svfprintf_r+0x9ca>
   85e9e:	a815      	add	r0, sp, #84	; 0x54
   85ea0:	c80d      	ldmia	r0, {r0, r2, r3}
   85ea2:	9914      	ldr	r1, [sp, #80]	; 0x50
   85ea4:	f003 f972 	bl	8918c <__aeabi_dcmpeq>
   85ea8:	2800      	cmp	r0, #0
   85eaa:	f000 8193 	beq.w	861d4 <_svfprintf_r+0xbcc>
   85eae:	2101      	movs	r1, #1
   85eb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85eb2:	4ab5      	ldr	r2, [pc, #724]	; (86188 <_svfprintf_r+0xb80>)
   85eb4:	440b      	add	r3, r1
   85eb6:	440c      	add	r4, r1
   85eb8:	2b07      	cmp	r3, #7
   85eba:	9427      	str	r4, [sp, #156]	; 0x9c
   85ebc:	9326      	str	r3, [sp, #152]	; 0x98
   85ebe:	f8c8 1004 	str.w	r1, [r8, #4]
   85ec2:	f8c8 2000 	str.w	r2, [r8]
   85ec6:	f300 83c6 	bgt.w	86656 <_svfprintf_r+0x104e>
   85eca:	f108 0808 	add.w	r8, r8, #8
   85ece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85ed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85ed2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ed4:	4293      	cmp	r3, r2
   85ed6:	db03      	blt.n	85ee0 <_svfprintf_r+0x8d8>
   85ed8:	9b07      	ldr	r3, [sp, #28]
   85eda:	07dd      	lsls	r5, r3, #31
   85edc:	f57f ad86 	bpl.w	859ec <_svfprintf_r+0x3e4>
   85ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ee2:	9919      	ldr	r1, [sp, #100]	; 0x64
   85ee4:	3301      	adds	r3, #1
   85ee6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85ee8:	440c      	add	r4, r1
   85eea:	2b07      	cmp	r3, #7
   85eec:	f8c8 2000 	str.w	r2, [r8]
   85ef0:	f8c8 1004 	str.w	r1, [r8, #4]
   85ef4:	9427      	str	r4, [sp, #156]	; 0x9c
   85ef6:	9326      	str	r3, [sp, #152]	; 0x98
   85ef8:	f300 83c4 	bgt.w	86684 <_svfprintf_r+0x107c>
   85efc:	f108 0808 	add.w	r8, r8, #8
   85f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85f02:	1e5e      	subs	r6, r3, #1
   85f04:	2e00      	cmp	r6, #0
   85f06:	f77f ad71 	ble.w	859ec <_svfprintf_r+0x3e4>
   85f0a:	2e10      	cmp	r6, #16
   85f0c:	f340 8575 	ble.w	869fa <_svfprintf_r+0x13f2>
   85f10:	4622      	mov	r2, r4
   85f12:	2710      	movs	r7, #16
   85f14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f16:	4d9d      	ldr	r5, [pc, #628]	; (8618c <_svfprintf_r+0xb84>)
   85f18:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85f1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85f1e:	e005      	b.n	85f2c <_svfprintf_r+0x924>
   85f20:	f108 0808 	add.w	r8, r8, #8
   85f24:	3e10      	subs	r6, #16
   85f26:	2e10      	cmp	r6, #16
   85f28:	f340 8225 	ble.w	86376 <_svfprintf_r+0xd6e>
   85f2c:	3301      	adds	r3, #1
   85f2e:	3210      	adds	r2, #16
   85f30:	2b07      	cmp	r3, #7
   85f32:	9227      	str	r2, [sp, #156]	; 0x9c
   85f34:	9326      	str	r3, [sp, #152]	; 0x98
   85f36:	e888 00a0 	stmia.w	r8, {r5, r7}
   85f3a:	ddf1      	ble.n	85f20 <_svfprintf_r+0x918>
   85f3c:	aa25      	add	r2, sp, #148	; 0x94
   85f3e:	4621      	mov	r1, r4
   85f40:	4658      	mov	r0, fp
   85f42:	f002 fc4b 	bl	887dc <__ssprint_r>
   85f46:	2800      	cmp	r0, #0
   85f48:	f47f ac3b 	bne.w	857c2 <_svfprintf_r+0x1ba>
   85f4c:	46c8      	mov	r8, r9
   85f4e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f52:	e7e7      	b.n	85f24 <_svfprintf_r+0x91c>
   85f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85f56:	9a08      	ldr	r2, [sp, #32]
   85f58:	1a9f      	subs	r7, r3, r2
   85f5a:	2f00      	cmp	r7, #0
   85f5c:	f77f acf6 	ble.w	8594c <_svfprintf_r+0x344>
   85f60:	2f10      	cmp	r7, #16
   85f62:	f340 84a8 	ble.w	868b6 <_svfprintf_r+0x12ae>
   85f66:	4d89      	ldr	r5, [pc, #548]	; (8618c <_svfprintf_r+0xb84>)
   85f68:	4642      	mov	r2, r8
   85f6a:	4621      	mov	r1, r4
   85f6c:	46b0      	mov	r8, r6
   85f6e:	f04f 0b10 	mov.w	fp, #16
   85f72:	462e      	mov	r6, r5
   85f74:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85f78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85f7a:	e004      	b.n	85f86 <_svfprintf_r+0x97e>
   85f7c:	3f10      	subs	r7, #16
   85f7e:	2f10      	cmp	r7, #16
   85f80:	f102 0208 	add.w	r2, r2, #8
   85f84:	dd15      	ble.n	85fb2 <_svfprintf_r+0x9aa>
   85f86:	3301      	adds	r3, #1
   85f88:	3110      	adds	r1, #16
   85f8a:	2b07      	cmp	r3, #7
   85f8c:	9127      	str	r1, [sp, #156]	; 0x9c
   85f8e:	9326      	str	r3, [sp, #152]	; 0x98
   85f90:	e882 0840 	stmia.w	r2, {r6, fp}
   85f94:	ddf2      	ble.n	85f7c <_svfprintf_r+0x974>
   85f96:	aa25      	add	r2, sp, #148	; 0x94
   85f98:	4629      	mov	r1, r5
   85f9a:	4620      	mov	r0, r4
   85f9c:	f002 fc1e 	bl	887dc <__ssprint_r>
   85fa0:	2800      	cmp	r0, #0
   85fa2:	f47f ac0e 	bne.w	857c2 <_svfprintf_r+0x1ba>
   85fa6:	3f10      	subs	r7, #16
   85fa8:	2f10      	cmp	r7, #16
   85faa:	464a      	mov	r2, r9
   85fac:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85fae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85fb0:	dce9      	bgt.n	85f86 <_svfprintf_r+0x97e>
   85fb2:	4635      	mov	r5, r6
   85fb4:	460c      	mov	r4, r1
   85fb6:	4646      	mov	r6, r8
   85fb8:	4690      	mov	r8, r2
   85fba:	3301      	adds	r3, #1
   85fbc:	443c      	add	r4, r7
   85fbe:	2b07      	cmp	r3, #7
   85fc0:	9427      	str	r4, [sp, #156]	; 0x9c
   85fc2:	9326      	str	r3, [sp, #152]	; 0x98
   85fc4:	e888 00a0 	stmia.w	r8, {r5, r7}
   85fc8:	f300 829e 	bgt.w	86508 <_svfprintf_r+0xf00>
   85fcc:	f108 0808 	add.w	r8, r8, #8
   85fd0:	e4bc      	b.n	8594c <_svfprintf_r+0x344>
   85fd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85fd4:	2b01      	cmp	r3, #1
   85fd6:	f340 824f 	ble.w	86478 <_svfprintf_r+0xe70>
   85fda:	2301      	movs	r3, #1
   85fdc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85fde:	441c      	add	r4, r3
   85fe0:	441f      	add	r7, r3
   85fe2:	2f07      	cmp	r7, #7
   85fe4:	9427      	str	r4, [sp, #156]	; 0x9c
   85fe6:	f8c8 6000 	str.w	r6, [r8]
   85fea:	9726      	str	r7, [sp, #152]	; 0x98
   85fec:	f8c8 3004 	str.w	r3, [r8, #4]
   85ff0:	f300 825f 	bgt.w	864b2 <_svfprintf_r+0xeaa>
   85ff4:	f108 0808 	add.w	r8, r8, #8
   85ff8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85ffa:	3701      	adds	r7, #1
   85ffc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85ffe:	4414      	add	r4, r2
   86000:	2f07      	cmp	r7, #7
   86002:	9427      	str	r4, [sp, #156]	; 0x9c
   86004:	9726      	str	r7, [sp, #152]	; 0x98
   86006:	f8c8 3000 	str.w	r3, [r8]
   8600a:	f8c8 2004 	str.w	r2, [r8, #4]
   8600e:	f300 825c 	bgt.w	864ca <_svfprintf_r+0xec2>
   86012:	f108 0808 	add.w	r8, r8, #8
   86016:	a815      	add	r0, sp, #84	; 0x54
   86018:	c80d      	ldmia	r0, {r0, r2, r3}
   8601a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8601c:	f003 f8b6 	bl	8918c <__aeabi_dcmpeq>
   86020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86022:	2800      	cmp	r0, #0
   86024:	f040 8141 	bne.w	862aa <_svfprintf_r+0xca2>
   86028:	3b01      	subs	r3, #1
   8602a:	3701      	adds	r7, #1
   8602c:	3601      	adds	r6, #1
   8602e:	441c      	add	r4, r3
   86030:	2f07      	cmp	r7, #7
   86032:	f8c8 6000 	str.w	r6, [r8]
   86036:	9726      	str	r7, [sp, #152]	; 0x98
   86038:	9427      	str	r4, [sp, #156]	; 0x9c
   8603a:	f8c8 3004 	str.w	r3, [r8, #4]
   8603e:	f300 8166 	bgt.w	8630e <_svfprintf_r+0xd06>
   86042:	f108 0808 	add.w	r8, r8, #8
   86046:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86048:	3701      	adds	r7, #1
   8604a:	4414      	add	r4, r2
   8604c:	ab21      	add	r3, sp, #132	; 0x84
   8604e:	2f07      	cmp	r7, #7
   86050:	9427      	str	r4, [sp, #156]	; 0x9c
   86052:	9726      	str	r7, [sp, #152]	; 0x98
   86054:	f8c8 2004 	str.w	r2, [r8, #4]
   86058:	f8c8 3000 	str.w	r3, [r8]
   8605c:	f77f acc4 	ble.w	859e8 <_svfprintf_r+0x3e0>
   86060:	aa25      	add	r2, sp, #148	; 0x94
   86062:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86064:	980c      	ldr	r0, [sp, #48]	; 0x30
   86066:	f002 fbb9 	bl	887dc <__ssprint_r>
   8606a:	2800      	cmp	r0, #0
   8606c:	f47f aba9 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86070:	46c8      	mov	r8, r9
   86072:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86074:	e4ba      	b.n	859ec <_svfprintf_r+0x3e4>
   86076:	aa25      	add	r2, sp, #148	; 0x94
   86078:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8607a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8607c:	f002 fbae 	bl	887dc <__ssprint_r>
   86080:	2800      	cmp	r0, #0
   86082:	f43f acfd 	beq.w	85a80 <_svfprintf_r+0x478>
   86086:	f7ff bb9c 	b.w	857c2 <_svfprintf_r+0x1ba>
   8608a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8608e:	2b01      	cmp	r3, #1
   86090:	f000 817e 	beq.w	86390 <_svfprintf_r+0xd88>
   86094:	2b02      	cmp	r3, #2
   86096:	d171      	bne.n	8617c <_svfprintf_r+0xb74>
   86098:	f8cd b01c 	str.w	fp, [sp, #28]
   8609c:	2400      	movs	r4, #0
   8609e:	2500      	movs	r5, #0
   860a0:	e5d4      	b.n	85c4c <_svfprintf_r+0x644>
   860a2:	aa25      	add	r2, sp, #148	; 0x94
   860a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   860a8:	f002 fb98 	bl	887dc <__ssprint_r>
   860ac:	2800      	cmp	r0, #0
   860ae:	f47f ab88 	bne.w	857c2 <_svfprintf_r+0x1ba>
   860b2:	46c8      	mov	r8, r9
   860b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860b6:	e486      	b.n	859c6 <_svfprintf_r+0x3be>
   860b8:	aa25      	add	r2, sp, #148	; 0x94
   860ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   860be:	f002 fb8d 	bl	887dc <__ssprint_r>
   860c2:	2800      	cmp	r0, #0
   860c4:	f47f ab7d 	bne.w	857c2 <_svfprintf_r+0x1ba>
   860c8:	46c8      	mov	r8, r9
   860ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   860cc:	e429      	b.n	85922 <_svfprintf_r+0x31a>
   860ce:	2001      	movs	r0, #1
   860d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   860d2:	4a2d      	ldr	r2, [pc, #180]	; (86188 <_svfprintf_r+0xb80>)
   860d4:	4403      	add	r3, r0
   860d6:	4404      	add	r4, r0
   860d8:	2b07      	cmp	r3, #7
   860da:	9427      	str	r4, [sp, #156]	; 0x9c
   860dc:	9326      	str	r3, [sp, #152]	; 0x98
   860de:	f8c8 0004 	str.w	r0, [r8, #4]
   860e2:	f8c8 2000 	str.w	r2, [r8]
   860e6:	f340 82d8 	ble.w	8669a <_svfprintf_r+0x1092>
   860ea:	aa25      	add	r2, sp, #148	; 0x94
   860ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   860f0:	f002 fb74 	bl	887dc <__ssprint_r>
   860f4:	2800      	cmp	r0, #0
   860f6:	f47f ab64 	bne.w	857c2 <_svfprintf_r+0x1ba>
   860fa:	46c8      	mov	r8, r9
   860fc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   860fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86100:	b929      	cbnz	r1, 8610e <_svfprintf_r+0xb06>
   86102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86104:	b91b      	cbnz	r3, 8610e <_svfprintf_r+0xb06>
   86106:	9b07      	ldr	r3, [sp, #28]
   86108:	07d8      	lsls	r0, r3, #31
   8610a:	f57f ac6f 	bpl.w	859ec <_svfprintf_r+0x3e4>
   8610e:	9819      	ldr	r0, [sp, #100]	; 0x64
   86110:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86112:	4602      	mov	r2, r0
   86114:	3301      	adds	r3, #1
   86116:	4422      	add	r2, r4
   86118:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8611a:	2b07      	cmp	r3, #7
   8611c:	9227      	str	r2, [sp, #156]	; 0x9c
   8611e:	f8c8 4000 	str.w	r4, [r8]
   86122:	f8c8 0004 	str.w	r0, [r8, #4]
   86126:	9326      	str	r3, [sp, #152]	; 0x98
   86128:	f300 8431 	bgt.w	8698e <_svfprintf_r+0x1386>
   8612c:	f108 0808 	add.w	r8, r8, #8
   86130:	2900      	cmp	r1, #0
   86132:	f2c0 8409 	blt.w	86948 <_svfprintf_r+0x1340>
   86136:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86138:	3301      	adds	r3, #1
   8613a:	188c      	adds	r4, r1, r2
   8613c:	2b07      	cmp	r3, #7
   8613e:	9427      	str	r4, [sp, #156]	; 0x9c
   86140:	9326      	str	r3, [sp, #152]	; 0x98
   86142:	f8c8 6000 	str.w	r6, [r8]
   86146:	f8c8 1004 	str.w	r1, [r8, #4]
   8614a:	f77f ac4d 	ble.w	859e8 <_svfprintf_r+0x3e0>
   8614e:	aa25      	add	r2, sp, #148	; 0x94
   86150:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86152:	980c      	ldr	r0, [sp, #48]	; 0x30
   86154:	f002 fb42 	bl	887dc <__ssprint_r>
   86158:	2800      	cmp	r0, #0
   8615a:	f47f ab32 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8615e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86160:	46c8      	mov	r8, r9
   86162:	e443      	b.n	859ec <_svfprintf_r+0x3e4>
   86164:	aa25      	add	r2, sp, #148	; 0x94
   86166:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86168:	980c      	ldr	r0, [sp, #48]	; 0x30
   8616a:	f002 fb37 	bl	887dc <__ssprint_r>
   8616e:	2800      	cmp	r0, #0
   86170:	f47f ab27 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86174:	46c8      	mov	r8, r9
   86176:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86178:	f7ff bbe5 	b.w	85946 <_svfprintf_r+0x33e>
   8617c:	2400      	movs	r4, #0
   8617e:	2500      	movs	r5, #0
   86180:	f8cd b01c 	str.w	fp, [sp, #28]
   86184:	4649      	mov	r1, r9
   86186:	e004      	b.n	86192 <_svfprintf_r+0xb8a>
   86188:	00089714 	.word	0x00089714
   8618c:	00089728 	.word	0x00089728
   86190:	4631      	mov	r1, r6
   86192:	08e2      	lsrs	r2, r4, #3
   86194:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86198:	08e8      	lsrs	r0, r5, #3
   8619a:	f004 0307 	and.w	r3, r4, #7
   8619e:	4605      	mov	r5, r0
   861a0:	4614      	mov	r4, r2
   861a2:	3330      	adds	r3, #48	; 0x30
   861a4:	ea54 0205 	orrs.w	r2, r4, r5
   861a8:	f801 3c01 	strb.w	r3, [r1, #-1]
   861ac:	f101 36ff 	add.w	r6, r1, #4294967295
   861b0:	d1ee      	bne.n	86190 <_svfprintf_r+0xb88>
   861b2:	9a07      	ldr	r2, [sp, #28]
   861b4:	07d2      	lsls	r2, r2, #31
   861b6:	f57f ad59 	bpl.w	85c6c <_svfprintf_r+0x664>
   861ba:	2b30      	cmp	r3, #48	; 0x30
   861bc:	f43f ad56 	beq.w	85c6c <_svfprintf_r+0x664>
   861c0:	2330      	movs	r3, #48	; 0x30
   861c2:	3902      	subs	r1, #2
   861c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   861c8:	eba9 0301 	sub.w	r3, r9, r1
   861cc:	930e      	str	r3, [sp, #56]	; 0x38
   861ce:	460e      	mov	r6, r1
   861d0:	f7ff bb36 	b.w	85840 <_svfprintf_r+0x238>
   861d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   861d6:	2900      	cmp	r1, #0
   861d8:	f77f af79 	ble.w	860ce <_svfprintf_r+0xac6>
   861dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   861de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   861e0:	4293      	cmp	r3, r2
   861e2:	bfa8      	it	ge
   861e4:	4613      	movge	r3, r2
   861e6:	2b00      	cmp	r3, #0
   861e8:	461f      	mov	r7, r3
   861ea:	dd0b      	ble.n	86204 <_svfprintf_r+0xbfc>
   861ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861ee:	443c      	add	r4, r7
   861f0:	3301      	adds	r3, #1
   861f2:	2b07      	cmp	r3, #7
   861f4:	9427      	str	r4, [sp, #156]	; 0x9c
   861f6:	e888 00c0 	stmia.w	r8, {r6, r7}
   861fa:	9326      	str	r3, [sp, #152]	; 0x98
   861fc:	f300 82fb 	bgt.w	867f6 <_svfprintf_r+0x11ee>
   86200:	f108 0808 	add.w	r8, r8, #8
   86204:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86206:	2f00      	cmp	r7, #0
   86208:	bfa8      	it	ge
   8620a:	1bdb      	subge	r3, r3, r7
   8620c:	2b00      	cmp	r3, #0
   8620e:	461f      	mov	r7, r3
   86210:	f340 80d7 	ble.w	863c2 <_svfprintf_r+0xdba>
   86214:	2b10      	cmp	r3, #16
   86216:	f340 8434 	ble.w	86a82 <_svfprintf_r+0x147a>
   8621a:	4dba      	ldr	r5, [pc, #744]	; (86504 <_svfprintf_r+0xefc>)
   8621c:	4642      	mov	r2, r8
   8621e:	4621      	mov	r1, r4
   86220:	46b0      	mov	r8, r6
   86222:	f04f 0b10 	mov.w	fp, #16
   86226:	462e      	mov	r6, r5
   86228:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8622a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8622c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8622e:	e004      	b.n	8623a <_svfprintf_r+0xc32>
   86230:	3208      	adds	r2, #8
   86232:	3f10      	subs	r7, #16
   86234:	2f10      	cmp	r7, #16
   86236:	f340 80b5 	ble.w	863a4 <_svfprintf_r+0xd9c>
   8623a:	3301      	adds	r3, #1
   8623c:	3110      	adds	r1, #16
   8623e:	2b07      	cmp	r3, #7
   86240:	9127      	str	r1, [sp, #156]	; 0x9c
   86242:	9326      	str	r3, [sp, #152]	; 0x98
   86244:	e882 0840 	stmia.w	r2, {r6, fp}
   86248:	ddf2      	ble.n	86230 <_svfprintf_r+0xc28>
   8624a:	aa25      	add	r2, sp, #148	; 0x94
   8624c:	4629      	mov	r1, r5
   8624e:	4620      	mov	r0, r4
   86250:	f002 fac4 	bl	887dc <__ssprint_r>
   86254:	2800      	cmp	r0, #0
   86256:	f47f aab4 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8625a:	464a      	mov	r2, r9
   8625c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8625e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86260:	e7e7      	b.n	86232 <_svfprintf_r+0xc2a>
   86262:	2d00      	cmp	r5, #0
   86264:	bf08      	it	eq
   86266:	2c0a      	cmpeq	r4, #10
   86268:	f0c0 8090 	bcc.w	8638c <_svfprintf_r+0xd84>
   8626c:	464e      	mov	r6, r9
   8626e:	4620      	mov	r0, r4
   86270:	4629      	mov	r1, r5
   86272:	220a      	movs	r2, #10
   86274:	2300      	movs	r3, #0
   86276:	f002 fff9 	bl	8926c <__aeabi_uldivmod>
   8627a:	3230      	adds	r2, #48	; 0x30
   8627c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   86280:	4620      	mov	r0, r4
   86282:	4629      	mov	r1, r5
   86284:	2300      	movs	r3, #0
   86286:	220a      	movs	r2, #10
   86288:	f002 fff0 	bl	8926c <__aeabi_uldivmod>
   8628c:	4604      	mov	r4, r0
   8628e:	460d      	mov	r5, r1
   86290:	ea54 0305 	orrs.w	r3, r4, r5
   86294:	d1eb      	bne.n	8626e <_svfprintf_r+0xc66>
   86296:	eba9 0306 	sub.w	r3, r9, r6
   8629a:	930e      	str	r3, [sp, #56]	; 0x38
   8629c:	f7ff bad0 	b.w	85840 <_svfprintf_r+0x238>
   862a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   862a2:	464e      	mov	r6, r9
   862a4:	930e      	str	r3, [sp, #56]	; 0x38
   862a6:	f7ff bacb 	b.w	85840 <_svfprintf_r+0x238>
   862aa:	1e5e      	subs	r6, r3, #1
   862ac:	2e00      	cmp	r6, #0
   862ae:	f77f aeca 	ble.w	86046 <_svfprintf_r+0xa3e>
   862b2:	2e10      	cmp	r6, #16
   862b4:	f340 83e3 	ble.w	86a7e <_svfprintf_r+0x1476>
   862b8:	4622      	mov	r2, r4
   862ba:	f04f 0b10 	mov.w	fp, #16
   862be:	4d91      	ldr	r5, [pc, #580]	; (86504 <_svfprintf_r+0xefc>)
   862c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   862c2:	e004      	b.n	862ce <_svfprintf_r+0xcc6>
   862c4:	3e10      	subs	r6, #16
   862c6:	2e10      	cmp	r6, #16
   862c8:	f108 0808 	add.w	r8, r8, #8
   862cc:	dd15      	ble.n	862fa <_svfprintf_r+0xcf2>
   862ce:	3701      	adds	r7, #1
   862d0:	3210      	adds	r2, #16
   862d2:	2f07      	cmp	r7, #7
   862d4:	9227      	str	r2, [sp, #156]	; 0x9c
   862d6:	9726      	str	r7, [sp, #152]	; 0x98
   862d8:	e888 0820 	stmia.w	r8, {r5, fp}
   862dc:	ddf2      	ble.n	862c4 <_svfprintf_r+0xcbc>
   862de:	aa25      	add	r2, sp, #148	; 0x94
   862e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862e2:	4620      	mov	r0, r4
   862e4:	f002 fa7a 	bl	887dc <__ssprint_r>
   862e8:	2800      	cmp	r0, #0
   862ea:	f47f aa6a 	bne.w	857c2 <_svfprintf_r+0x1ba>
   862ee:	3e10      	subs	r6, #16
   862f0:	2e10      	cmp	r6, #16
   862f2:	46c8      	mov	r8, r9
   862f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   862f6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862f8:	dce9      	bgt.n	862ce <_svfprintf_r+0xcc6>
   862fa:	4614      	mov	r4, r2
   862fc:	3701      	adds	r7, #1
   862fe:	4434      	add	r4, r6
   86300:	2f07      	cmp	r7, #7
   86302:	9427      	str	r4, [sp, #156]	; 0x9c
   86304:	9726      	str	r7, [sp, #152]	; 0x98
   86306:	e888 0060 	stmia.w	r8, {r5, r6}
   8630a:	f77f ae9a 	ble.w	86042 <_svfprintf_r+0xa3a>
   8630e:	aa25      	add	r2, sp, #148	; 0x94
   86310:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86312:	980c      	ldr	r0, [sp, #48]	; 0x30
   86314:	f002 fa62 	bl	887dc <__ssprint_r>
   86318:	2800      	cmp	r0, #0
   8631a:	f47f aa52 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8631e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86320:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86322:	46c8      	mov	r8, r9
   86324:	e68f      	b.n	86046 <_svfprintf_r+0xa3e>
   86326:	3204      	adds	r2, #4
   86328:	681c      	ldr	r4, [r3, #0]
   8632a:	2500      	movs	r5, #0
   8632c:	2301      	movs	r3, #1
   8632e:	920f      	str	r2, [sp, #60]	; 0x3c
   86330:	f7ff ba68 	b.w	85804 <_svfprintf_r+0x1fc>
   86334:	681c      	ldr	r4, [r3, #0]
   86336:	3304      	adds	r3, #4
   86338:	930f      	str	r3, [sp, #60]	; 0x3c
   8633a:	2500      	movs	r5, #0
   8633c:	e42a      	b.n	85b94 <_svfprintf_r+0x58c>
   8633e:	681c      	ldr	r4, [r3, #0]
   86340:	3304      	adds	r3, #4
   86342:	17e5      	asrs	r5, r4, #31
   86344:	4622      	mov	r2, r4
   86346:	930f      	str	r3, [sp, #60]	; 0x3c
   86348:	462b      	mov	r3, r5
   8634a:	2a00      	cmp	r2, #0
   8634c:	f173 0300 	sbcs.w	r3, r3, #0
   86350:	f6bf ac68 	bge.w	85c24 <_svfprintf_r+0x61c>
   86354:	272d      	movs	r7, #45	; 0x2d
   86356:	4264      	negs	r4, r4
   86358:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8635c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86360:	2301      	movs	r3, #1
   86362:	f7ff ba53 	b.w	8580c <_svfprintf_r+0x204>
   86366:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86368:	2500      	movs	r5, #0
   8636a:	460a      	mov	r2, r1
   8636c:	3204      	adds	r2, #4
   8636e:	680c      	ldr	r4, [r1, #0]
   86370:	920f      	str	r2, [sp, #60]	; 0x3c
   86372:	f7ff ba47 	b.w	85804 <_svfprintf_r+0x1fc>
   86376:	4614      	mov	r4, r2
   86378:	3301      	adds	r3, #1
   8637a:	4434      	add	r4, r6
   8637c:	2b07      	cmp	r3, #7
   8637e:	9427      	str	r4, [sp, #156]	; 0x9c
   86380:	9326      	str	r3, [sp, #152]	; 0x98
   86382:	e888 0060 	stmia.w	r8, {r5, r6}
   86386:	f77f ab2f 	ble.w	859e8 <_svfprintf_r+0x3e0>
   8638a:	e6e0      	b.n	8614e <_svfprintf_r+0xb46>
   8638c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86390:	2301      	movs	r3, #1
   86392:	ae42      	add	r6, sp, #264	; 0x108
   86394:	3430      	adds	r4, #48	; 0x30
   86396:	f8cd b01c 	str.w	fp, [sp, #28]
   8639a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8639e:	930e      	str	r3, [sp, #56]	; 0x38
   863a0:	f7ff ba4e 	b.w	85840 <_svfprintf_r+0x238>
   863a4:	4635      	mov	r5, r6
   863a6:	460c      	mov	r4, r1
   863a8:	4646      	mov	r6, r8
   863aa:	4690      	mov	r8, r2
   863ac:	3301      	adds	r3, #1
   863ae:	443c      	add	r4, r7
   863b0:	2b07      	cmp	r3, #7
   863b2:	9427      	str	r4, [sp, #156]	; 0x9c
   863b4:	9326      	str	r3, [sp, #152]	; 0x98
   863b6:	e888 00a0 	stmia.w	r8, {r5, r7}
   863ba:	f300 8246 	bgt.w	8684a <_svfprintf_r+0x1242>
   863be:	f108 0808 	add.w	r8, r8, #8
   863c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   863c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   863c6:	429a      	cmp	r2, r3
   863c8:	db45      	blt.n	86456 <_svfprintf_r+0xe4e>
   863ca:	9b07      	ldr	r3, [sp, #28]
   863cc:	07d9      	lsls	r1, r3, #31
   863ce:	d442      	bmi.n	86456 <_svfprintf_r+0xe4e>
   863d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   863d2:	9812      	ldr	r0, [sp, #72]	; 0x48
   863d4:	1a9a      	subs	r2, r3, r2
   863d6:	1a1d      	subs	r5, r3, r0
   863d8:	4295      	cmp	r5, r2
   863da:	bfa8      	it	ge
   863dc:	4615      	movge	r5, r2
   863de:	2d00      	cmp	r5, #0
   863e0:	dd0e      	ble.n	86400 <_svfprintf_r+0xdf8>
   863e2:	9926      	ldr	r1, [sp, #152]	; 0x98
   863e4:	4406      	add	r6, r0
   863e6:	3101      	adds	r1, #1
   863e8:	442c      	add	r4, r5
   863ea:	2907      	cmp	r1, #7
   863ec:	f8c8 6000 	str.w	r6, [r8]
   863f0:	9427      	str	r4, [sp, #156]	; 0x9c
   863f2:	f8c8 5004 	str.w	r5, [r8, #4]
   863f6:	9126      	str	r1, [sp, #152]	; 0x98
   863f8:	f300 8216 	bgt.w	86828 <_svfprintf_r+0x1220>
   863fc:	f108 0808 	add.w	r8, r8, #8
   86400:	2d00      	cmp	r5, #0
   86402:	bfb4      	ite	lt
   86404:	4616      	movlt	r6, r2
   86406:	1b56      	subge	r6, r2, r5
   86408:	2e00      	cmp	r6, #0
   8640a:	f77f aaef 	ble.w	859ec <_svfprintf_r+0x3e4>
   8640e:	2e10      	cmp	r6, #16
   86410:	f340 82f3 	ble.w	869fa <_svfprintf_r+0x13f2>
   86414:	4622      	mov	r2, r4
   86416:	2710      	movs	r7, #16
   86418:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8641a:	4d3a      	ldr	r5, [pc, #232]	; (86504 <_svfprintf_r+0xefc>)
   8641c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86420:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86422:	e004      	b.n	8642e <_svfprintf_r+0xe26>
   86424:	f108 0808 	add.w	r8, r8, #8
   86428:	3e10      	subs	r6, #16
   8642a:	2e10      	cmp	r6, #16
   8642c:	dda3      	ble.n	86376 <_svfprintf_r+0xd6e>
   8642e:	3301      	adds	r3, #1
   86430:	3210      	adds	r2, #16
   86432:	2b07      	cmp	r3, #7
   86434:	9227      	str	r2, [sp, #156]	; 0x9c
   86436:	9326      	str	r3, [sp, #152]	; 0x98
   86438:	e888 00a0 	stmia.w	r8, {r5, r7}
   8643c:	ddf2      	ble.n	86424 <_svfprintf_r+0xe1c>
   8643e:	aa25      	add	r2, sp, #148	; 0x94
   86440:	4621      	mov	r1, r4
   86442:	4658      	mov	r0, fp
   86444:	f002 f9ca 	bl	887dc <__ssprint_r>
   86448:	2800      	cmp	r0, #0
   8644a:	f47f a9ba 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8644e:	46c8      	mov	r8, r9
   86450:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86452:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86454:	e7e8      	b.n	86428 <_svfprintf_r+0xe20>
   86456:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86458:	9819      	ldr	r0, [sp, #100]	; 0x64
   8645a:	3301      	adds	r3, #1
   8645c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8645e:	4404      	add	r4, r0
   86460:	2b07      	cmp	r3, #7
   86462:	9427      	str	r4, [sp, #156]	; 0x9c
   86464:	f8c8 1000 	str.w	r1, [r8]
   86468:	f8c8 0004 	str.w	r0, [r8, #4]
   8646c:	9326      	str	r3, [sp, #152]	; 0x98
   8646e:	f300 81cf 	bgt.w	86810 <_svfprintf_r+0x1208>
   86472:	f108 0808 	add.w	r8, r8, #8
   86476:	e7ab      	b.n	863d0 <_svfprintf_r+0xdc8>
   86478:	9b07      	ldr	r3, [sp, #28]
   8647a:	07da      	lsls	r2, r3, #31
   8647c:	f53f adad 	bmi.w	85fda <_svfprintf_r+0x9d2>
   86480:	2301      	movs	r3, #1
   86482:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86484:	441c      	add	r4, r3
   86486:	441f      	add	r7, r3
   86488:	2f07      	cmp	r7, #7
   8648a:	9427      	str	r4, [sp, #156]	; 0x9c
   8648c:	f8c8 6000 	str.w	r6, [r8]
   86490:	9726      	str	r7, [sp, #152]	; 0x98
   86492:	f8c8 3004 	str.w	r3, [r8, #4]
   86496:	f77f add4 	ble.w	86042 <_svfprintf_r+0xa3a>
   8649a:	aa25      	add	r2, sp, #148	; 0x94
   8649c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8649e:	980c      	ldr	r0, [sp, #48]	; 0x30
   864a0:	f002 f99c 	bl	887dc <__ssprint_r>
   864a4:	2800      	cmp	r0, #0
   864a6:	f47f a98c 	bne.w	857c2 <_svfprintf_r+0x1ba>
   864aa:	46c8      	mov	r8, r9
   864ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   864b0:	e5c9      	b.n	86046 <_svfprintf_r+0xa3e>
   864b2:	aa25      	add	r2, sp, #148	; 0x94
   864b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   864b8:	f002 f990 	bl	887dc <__ssprint_r>
   864bc:	2800      	cmp	r0, #0
   864be:	f47f a980 	bne.w	857c2 <_svfprintf_r+0x1ba>
   864c2:	46c8      	mov	r8, r9
   864c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   864c8:	e596      	b.n	85ff8 <_svfprintf_r+0x9f0>
   864ca:	aa25      	add	r2, sp, #148	; 0x94
   864cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   864d0:	f002 f984 	bl	887dc <__ssprint_r>
   864d4:	2800      	cmp	r0, #0
   864d6:	f47f a974 	bne.w	857c2 <_svfprintf_r+0x1ba>
   864da:	46c8      	mov	r8, r9
   864dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864de:	9f26      	ldr	r7, [sp, #152]	; 0x98
   864e0:	e599      	b.n	86016 <_svfprintf_r+0xa0e>
   864e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   864e4:	3407      	adds	r4, #7
   864e6:	f024 0407 	bic.w	r4, r4, #7
   864ea:	f104 0108 	add.w	r1, r4, #8
   864ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   864f2:	910f      	str	r1, [sp, #60]	; 0x3c
   864f4:	4614      	mov	r4, r2
   864f6:	461d      	mov	r5, r3
   864f8:	f7ff bb8f 	b.w	85c1a <_svfprintf_r+0x612>
   864fc:	464e      	mov	r6, r9
   864fe:	f7ff b99f 	b.w	85840 <_svfprintf_r+0x238>
   86502:	bf00      	nop
   86504:	00089728 	.word	0x00089728
   86508:	aa25      	add	r2, sp, #148	; 0x94
   8650a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8650c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8650e:	f002 f965 	bl	887dc <__ssprint_r>
   86512:	2800      	cmp	r0, #0
   86514:	f47f a955 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86518:	46c8      	mov	r8, r9
   8651a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8651c:	f7ff ba16 	b.w	8594c <_svfprintf_r+0x344>
   86520:	9c15      	ldr	r4, [sp, #84]	; 0x54
   86522:	4622      	mov	r2, r4
   86524:	4620      	mov	r0, r4
   86526:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86528:	4623      	mov	r3, r4
   8652a:	4621      	mov	r1, r4
   8652c:	f002 fe60 	bl	891f0 <__aeabi_dcmpun>
   86530:	2800      	cmp	r0, #0
   86532:	f040 8273 	bne.w	86a1c <_svfprintf_r+0x1414>
   86536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86538:	3301      	adds	r3, #1
   8653a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8653c:	f023 0320 	bic.w	r3, r3, #32
   86540:	930e      	str	r3, [sp, #56]	; 0x38
   86542:	f000 819c 	beq.w	8687e <_svfprintf_r+0x1276>
   86546:	2b47      	cmp	r3, #71	; 0x47
   86548:	f000 80d6 	beq.w	866f8 <_svfprintf_r+0x10f0>
   8654c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   86550:	9307      	str	r3, [sp, #28]
   86552:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86554:	1e1f      	subs	r7, r3, #0
   86556:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86558:	9308      	str	r3, [sp, #32]
   8655a:	bfb7      	itett	lt
   8655c:	463b      	movlt	r3, r7
   8655e:	2300      	movge	r3, #0
   86560:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   86564:	232d      	movlt	r3, #45	; 0x2d
   86566:	9310      	str	r3, [sp, #64]	; 0x40
   86568:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8656a:	2b66      	cmp	r3, #102	; 0x66
   8656c:	f000 8190 	beq.w	86890 <_svfprintf_r+0x1288>
   86570:	2b46      	cmp	r3, #70	; 0x46
   86572:	f000 80a4 	beq.w	866be <_svfprintf_r+0x10b6>
   86576:	2002      	movs	r0, #2
   86578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8657a:	a923      	add	r1, sp, #140	; 0x8c
   8657c:	2b45      	cmp	r3, #69	; 0x45
   8657e:	bf0a      	itet	eq
   86580:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   86582:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   86584:	1c5d      	addeq	r5, r3, #1
   86586:	e88d 0021 	stmia.w	sp, {r0, r5}
   8658a:	9104      	str	r1, [sp, #16]
   8658c:	a820      	add	r0, sp, #128	; 0x80
   8658e:	a91f      	add	r1, sp, #124	; 0x7c
   86590:	463b      	mov	r3, r7
   86592:	9003      	str	r0, [sp, #12]
   86594:	9a08      	ldr	r2, [sp, #32]
   86596:	9102      	str	r1, [sp, #8]
   86598:	980c      	ldr	r0, [sp, #48]	; 0x30
   8659a:	f000 fb59 	bl	86c50 <_dtoa_r>
   8659e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   865a0:	4606      	mov	r6, r0
   865a2:	2b67      	cmp	r3, #103	; 0x67
   865a4:	f040 81ba 	bne.w	8691c <_svfprintf_r+0x1314>
   865a8:	f01b 0f01 	tst.w	fp, #1
   865ac:	f000 8223 	beq.w	869f6 <_svfprintf_r+0x13ee>
   865b0:	1974      	adds	r4, r6, r5
   865b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   865b4:	9808      	ldr	r0, [sp, #32]
   865b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   865b8:	4639      	mov	r1, r7
   865ba:	f002 fde7 	bl	8918c <__aeabi_dcmpeq>
   865be:	2800      	cmp	r0, #0
   865c0:	f040 8124 	bne.w	8680c <_svfprintf_r+0x1204>
   865c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   865c6:	42a3      	cmp	r3, r4
   865c8:	d206      	bcs.n	865d8 <_svfprintf_r+0xfd0>
   865ca:	2130      	movs	r1, #48	; 0x30
   865cc:	1c5a      	adds	r2, r3, #1
   865ce:	9223      	str	r2, [sp, #140]	; 0x8c
   865d0:	7019      	strb	r1, [r3, #0]
   865d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   865d4:	429c      	cmp	r4, r3
   865d6:	d8f9      	bhi.n	865cc <_svfprintf_r+0xfc4>
   865d8:	1b9b      	subs	r3, r3, r6
   865da:	9313      	str	r3, [sp, #76]	; 0x4c
   865dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   865de:	2b47      	cmp	r3, #71	; 0x47
   865e0:	f000 80a2 	beq.w	86728 <_svfprintf_r+0x1120>
   865e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   865e6:	2b65      	cmp	r3, #101	; 0x65
   865e8:	f340 81a7 	ble.w	8693a <_svfprintf_r+0x1332>
   865ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   865ee:	2b66      	cmp	r3, #102	; 0x66
   865f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   865f2:	9312      	str	r3, [sp, #72]	; 0x48
   865f4:	f000 8171 	beq.w	868da <_svfprintf_r+0x12d2>
   865f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   865fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   865fc:	4619      	mov	r1, r3
   865fe:	4291      	cmp	r1, r2
   86600:	f300 815d 	bgt.w	868be <_svfprintf_r+0x12b6>
   86604:	f01b 0f01 	tst.w	fp, #1
   86608:	f040 81f0 	bne.w	869ec <_svfprintf_r+0x13e4>
   8660c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86610:	9308      	str	r3, [sp, #32]
   86612:	2367      	movs	r3, #103	; 0x67
   86614:	920e      	str	r2, [sp, #56]	; 0x38
   86616:	9311      	str	r3, [sp, #68]	; 0x44
   86618:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8661a:	2b00      	cmp	r3, #0
   8661c:	d17d      	bne.n	8671a <_svfprintf_r+0x1112>
   8661e:	930a      	str	r3, [sp, #40]	; 0x28
   86620:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86624:	f7ff b914 	b.w	85850 <_svfprintf_r+0x248>
   86628:	f024 0407 	bic.w	r4, r4, #7
   8662c:	6823      	ldr	r3, [r4, #0]
   8662e:	9315      	str	r3, [sp, #84]	; 0x54
   86630:	6863      	ldr	r3, [r4, #4]
   86632:	9314      	str	r3, [sp, #80]	; 0x50
   86634:	f104 0308 	add.w	r3, r4, #8
   86638:	930f      	str	r3, [sp, #60]	; 0x3c
   8663a:	f7ff bb2f 	b.w	85c9c <_svfprintf_r+0x694>
   8663e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86640:	6813      	ldr	r3, [r2, #0]
   86642:	3204      	adds	r2, #4
   86644:	920f      	str	r2, [sp, #60]	; 0x3c
   86646:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86648:	601a      	str	r2, [r3, #0]
   8664a:	f7ff b804 	b.w	85656 <_svfprintf_r+0x4e>
   8664e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86650:	4daf      	ldr	r5, [pc, #700]	; (86910 <_svfprintf_r+0x1308>)
   86652:	f7ff b9ad 	b.w	859b0 <_svfprintf_r+0x3a8>
   86656:	aa25      	add	r2, sp, #148	; 0x94
   86658:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8665a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8665c:	f002 f8be 	bl	887dc <__ssprint_r>
   86660:	2800      	cmp	r0, #0
   86662:	f47f a8ae 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86666:	46c8      	mov	r8, r9
   86668:	e431      	b.n	85ece <_svfprintf_r+0x8c6>
   8666a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8666c:	4613      	mov	r3, r2
   8666e:	3304      	adds	r3, #4
   86670:	930f      	str	r3, [sp, #60]	; 0x3c
   86672:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86674:	6811      	ldr	r1, [r2, #0]
   86676:	17dd      	asrs	r5, r3, #31
   86678:	461a      	mov	r2, r3
   8667a:	462b      	mov	r3, r5
   8667c:	e9c1 2300 	strd	r2, r3, [r1]
   86680:	f7fe bfe9 	b.w	85656 <_svfprintf_r+0x4e>
   86684:	aa25      	add	r2, sp, #148	; 0x94
   86686:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86688:	980c      	ldr	r0, [sp, #48]	; 0x30
   8668a:	f002 f8a7 	bl	887dc <__ssprint_r>
   8668e:	2800      	cmp	r0, #0
   86690:	f47f a897 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86694:	46c8      	mov	r8, r9
   86696:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86698:	e432      	b.n	85f00 <_svfprintf_r+0x8f8>
   8669a:	f108 0808 	add.w	r8, r8, #8
   8669e:	e52f      	b.n	86100 <_svfprintf_r+0xaf8>
   866a0:	2140      	movs	r1, #64	; 0x40
   866a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   866a4:	f001 fa22 	bl	87aec <_malloc_r>
   866a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   866aa:	6010      	str	r0, [r2, #0]
   866ac:	6110      	str	r0, [r2, #16]
   866ae:	2800      	cmp	r0, #0
   866b0:	f000 8214 	beq.w	86adc <_svfprintf_r+0x14d4>
   866b4:	2340      	movs	r3, #64	; 0x40
   866b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   866b8:	6153      	str	r3, [r2, #20]
   866ba:	f7fe bfbc 	b.w	85636 <_svfprintf_r+0x2e>
   866be:	2003      	movs	r0, #3
   866c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   866c2:	a923      	add	r1, sp, #140	; 0x8c
   866c4:	e88d 0011 	stmia.w	sp, {r0, r4}
   866c8:	9104      	str	r1, [sp, #16]
   866ca:	a820      	add	r0, sp, #128	; 0x80
   866cc:	a91f      	add	r1, sp, #124	; 0x7c
   866ce:	9003      	str	r0, [sp, #12]
   866d0:	9a08      	ldr	r2, [sp, #32]
   866d2:	463b      	mov	r3, r7
   866d4:	9102      	str	r1, [sp, #8]
   866d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   866d8:	f000 faba 	bl	86c50 <_dtoa_r>
   866dc:	4625      	mov	r5, r4
   866de:	4606      	mov	r6, r0
   866e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   866e2:	1974      	adds	r4, r6, r5
   866e4:	2b46      	cmp	r3, #70	; 0x46
   866e6:	f47f af64 	bne.w	865b2 <_svfprintf_r+0xfaa>
   866ea:	7833      	ldrb	r3, [r6, #0]
   866ec:	2b30      	cmp	r3, #48	; 0x30
   866ee:	f000 8187 	beq.w	86a00 <_svfprintf_r+0x13f8>
   866f2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   866f4:	442c      	add	r4, r5
   866f6:	e75c      	b.n	865b2 <_svfprintf_r+0xfaa>
   866f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   866fa:	2b00      	cmp	r3, #0
   866fc:	bf08      	it	eq
   866fe:	2301      	moveq	r3, #1
   86700:	930a      	str	r3, [sp, #40]	; 0x28
   86702:	e723      	b.n	8654c <_svfprintf_r+0xf44>
   86704:	4630      	mov	r0, r6
   86706:	950a      	str	r5, [sp, #40]	; 0x28
   86708:	f7fe ff50 	bl	855ac <strlen>
   8670c:	940f      	str	r4, [sp, #60]	; 0x3c
   8670e:	900e      	str	r0, [sp, #56]	; 0x38
   86710:	f8cd b01c 	str.w	fp, [sp, #28]
   86714:	4603      	mov	r3, r0
   86716:	f7ff b9e7 	b.w	85ae8 <_svfprintf_r+0x4e0>
   8671a:	272d      	movs	r7, #45	; 0x2d
   8671c:	2300      	movs	r3, #0
   8671e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86722:	930a      	str	r3, [sp, #40]	; 0x28
   86724:	f7ff b895 	b.w	85852 <_svfprintf_r+0x24a>
   86728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8672a:	461a      	mov	r2, r3
   8672c:	9312      	str	r3, [sp, #72]	; 0x48
   8672e:	3303      	adds	r3, #3
   86730:	db04      	blt.n	8673c <_svfprintf_r+0x1134>
   86732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86734:	4619      	mov	r1, r3
   86736:	4291      	cmp	r1, r2
   86738:	f6bf af5e 	bge.w	865f8 <_svfprintf_r+0xff0>
   8673c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8673e:	3b02      	subs	r3, #2
   86740:	9311      	str	r3, [sp, #68]	; 0x44
   86742:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86744:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86748:	3b01      	subs	r3, #1
   8674a:	2b00      	cmp	r3, #0
   8674c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86750:	bfb4      	ite	lt
   86752:	222d      	movlt	r2, #45	; 0x2d
   86754:	222b      	movge	r2, #43	; 0x2b
   86756:	931f      	str	r3, [sp, #124]	; 0x7c
   86758:	bfb8      	it	lt
   8675a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8675c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   86760:	bfb8      	it	lt
   86762:	f1c3 0301 	rsblt	r3, r3, #1
   86766:	2b09      	cmp	r3, #9
   86768:	f340 811f 	ble.w	869aa <_svfprintf_r+0x13a2>
   8676c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   86770:	4601      	mov	r1, r0
   86772:	4c68      	ldr	r4, [pc, #416]	; (86914 <_svfprintf_r+0x130c>)
   86774:	e000      	b.n	86778 <_svfprintf_r+0x1170>
   86776:	4611      	mov	r1, r2
   86778:	fb84 5203 	smull	r5, r2, r4, r3
   8677c:	17dd      	asrs	r5, r3, #31
   8677e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   86782:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   86786:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8678a:	3230      	adds	r2, #48	; 0x30
   8678c:	2d09      	cmp	r5, #9
   8678e:	f801 2c01 	strb.w	r2, [r1, #-1]
   86792:	462b      	mov	r3, r5
   86794:	f101 32ff 	add.w	r2, r1, #4294967295
   86798:	dced      	bgt.n	86776 <_svfprintf_r+0x116e>
   8679a:	3330      	adds	r3, #48	; 0x30
   8679c:	3902      	subs	r1, #2
   8679e:	b2dc      	uxtb	r4, r3
   867a0:	4288      	cmp	r0, r1
   867a2:	f802 4c01 	strb.w	r4, [r2, #-1]
   867a6:	f240 8192 	bls.w	86ace <_svfprintf_r+0x14c6>
   867aa:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   867ae:	4613      	mov	r3, r2
   867b0:	e001      	b.n	867b6 <_svfprintf_r+0x11ae>
   867b2:	f813 4b01 	ldrb.w	r4, [r3], #1
   867b6:	4283      	cmp	r3, r0
   867b8:	f801 4b01 	strb.w	r4, [r1], #1
   867bc:	d1f9      	bne.n	867b2 <_svfprintf_r+0x11aa>
   867be:	3301      	adds	r3, #1
   867c0:	1a9b      	subs	r3, r3, r2
   867c2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   867c6:	4413      	add	r3, r2
   867c8:	aa21      	add	r2, sp, #132	; 0x84
   867ca:	1a9b      	subs	r3, r3, r2
   867cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   867ce:	931b      	str	r3, [sp, #108]	; 0x6c
   867d0:	2a01      	cmp	r2, #1
   867d2:	4413      	add	r3, r2
   867d4:	930e      	str	r3, [sp, #56]	; 0x38
   867d6:	f340 8148 	ble.w	86a6a <_svfprintf_r+0x1462>
   867da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   867de:	4413      	add	r3, r2
   867e0:	930e      	str	r3, [sp, #56]	; 0x38
   867e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   867e6:	9308      	str	r3, [sp, #32]
   867e8:	2300      	movs	r3, #0
   867ea:	9312      	str	r3, [sp, #72]	; 0x48
   867ec:	e714      	b.n	86618 <_svfprintf_r+0x1010>
   867ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   867f2:	f7ff b876 	b.w	858e2 <_svfprintf_r+0x2da>
   867f6:	aa25      	add	r2, sp, #148	; 0x94
   867f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   867fc:	f001 ffee 	bl	887dc <__ssprint_r>
   86800:	2800      	cmp	r0, #0
   86802:	f47e afde 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86806:	46c8      	mov	r8, r9
   86808:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8680a:	e4fb      	b.n	86204 <_svfprintf_r+0xbfc>
   8680c:	4623      	mov	r3, r4
   8680e:	e6e3      	b.n	865d8 <_svfprintf_r+0xfd0>
   86810:	aa25      	add	r2, sp, #148	; 0x94
   86812:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86814:	980c      	ldr	r0, [sp, #48]	; 0x30
   86816:	f001 ffe1 	bl	887dc <__ssprint_r>
   8681a:	2800      	cmp	r0, #0
   8681c:	f47e afd1 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86820:	46c8      	mov	r8, r9
   86822:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86824:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86826:	e5d3      	b.n	863d0 <_svfprintf_r+0xdc8>
   86828:	aa25      	add	r2, sp, #148	; 0x94
   8682a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8682c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8682e:	f001 ffd5 	bl	887dc <__ssprint_r>
   86832:	2800      	cmp	r0, #0
   86834:	f47e afc5 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86838:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8683a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8683c:	46c8      	mov	r8, r9
   8683e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86840:	1a9a      	subs	r2, r3, r2
   86842:	e5dd      	b.n	86400 <_svfprintf_r+0xdf8>
   86844:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86846:	f7ff b8fe 	b.w	85a46 <_svfprintf_r+0x43e>
   8684a:	aa25      	add	r2, sp, #148	; 0x94
   8684c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8684e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86850:	f001 ffc4 	bl	887dc <__ssprint_r>
   86854:	2800      	cmp	r0, #0
   86856:	f47e afb4 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8685a:	46c8      	mov	r8, r9
   8685c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8685e:	e5b0      	b.n	863c2 <_svfprintf_r+0xdba>
   86860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86862:	4637      	mov	r7, r6
   86864:	2b06      	cmp	r3, #6
   86866:	bf28      	it	cs
   86868:	2306      	movcs	r3, #6
   8686a:	960a      	str	r6, [sp, #40]	; 0x28
   8686c:	9612      	str	r6, [sp, #72]	; 0x48
   8686e:	9308      	str	r3, [sp, #32]
   86870:	940f      	str	r4, [sp, #60]	; 0x3c
   86872:	f8cd b01c 	str.w	fp, [sp, #28]
   86876:	930e      	str	r3, [sp, #56]	; 0x38
   86878:	4e27      	ldr	r6, [pc, #156]	; (86918 <_svfprintf_r+0x1310>)
   8687a:	f7fe bfe9 	b.w	85850 <_svfprintf_r+0x248>
   8687e:	2306      	movs	r3, #6
   86880:	930a      	str	r3, [sp, #40]	; 0x28
   86882:	e663      	b.n	8654c <_svfprintf_r+0xf44>
   86884:	232d      	movs	r3, #45	; 0x2d
   86886:	461f      	mov	r7, r3
   86888:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8688c:	f7ff ba28 	b.w	85ce0 <_svfprintf_r+0x6d8>
   86890:	2003      	movs	r0, #3
   86892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86894:	a923      	add	r1, sp, #140	; 0x8c
   86896:	e88d 0011 	stmia.w	sp, {r0, r4}
   8689a:	9104      	str	r1, [sp, #16]
   8689c:	a820      	add	r0, sp, #128	; 0x80
   8689e:	a91f      	add	r1, sp, #124	; 0x7c
   868a0:	9003      	str	r0, [sp, #12]
   868a2:	9a08      	ldr	r2, [sp, #32]
   868a4:	463b      	mov	r3, r7
   868a6:	9102      	str	r1, [sp, #8]
   868a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   868aa:	f000 f9d1 	bl	86c50 <_dtoa_r>
   868ae:	4625      	mov	r5, r4
   868b0:	4606      	mov	r6, r0
   868b2:	1904      	adds	r4, r0, r4
   868b4:	e719      	b.n	866ea <_svfprintf_r+0x10e2>
   868b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868b8:	4d15      	ldr	r5, [pc, #84]	; (86910 <_svfprintf_r+0x1308>)
   868ba:	f7ff bb7e 	b.w	85fba <_svfprintf_r+0x9b2>
   868be:	9a19      	ldr	r2, [sp, #100]	; 0x64
   868c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   868c2:	4413      	add	r3, r2
   868c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   868c6:	930e      	str	r3, [sp, #56]	; 0x38
   868c8:	2a00      	cmp	r2, #0
   868ca:	f340 80c7 	ble.w	86a5c <_svfprintf_r+0x1454>
   868ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   868d2:	9308      	str	r3, [sp, #32]
   868d4:	2367      	movs	r3, #103	; 0x67
   868d6:	9311      	str	r3, [sp, #68]	; 0x44
   868d8:	e69e      	b.n	86618 <_svfprintf_r+0x1010>
   868da:	2b00      	cmp	r3, #0
   868dc:	f340 80e1 	ble.w	86aa2 <_svfprintf_r+0x149a>
   868e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   868e2:	2a00      	cmp	r2, #0
   868e4:	f040 80b0 	bne.w	86a48 <_svfprintf_r+0x1440>
   868e8:	f01b 0f01 	tst.w	fp, #1
   868ec:	f040 80ac 	bne.w	86a48 <_svfprintf_r+0x1440>
   868f0:	9308      	str	r3, [sp, #32]
   868f2:	930e      	str	r3, [sp, #56]	; 0x38
   868f4:	e690      	b.n	86618 <_svfprintf_r+0x1010>
   868f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   868f8:	940f      	str	r4, [sp, #60]	; 0x3c
   868fa:	9308      	str	r3, [sp, #32]
   868fc:	930e      	str	r3, [sp, #56]	; 0x38
   868fe:	900a      	str	r0, [sp, #40]	; 0x28
   86900:	f8cd b01c 	str.w	fp, [sp, #28]
   86904:	9012      	str	r0, [sp, #72]	; 0x48
   86906:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8690a:	f7fe bfa1 	b.w	85850 <_svfprintf_r+0x248>
   8690e:	bf00      	nop
   86910:	00089728 	.word	0x00089728
   86914:	66666667 	.word	0x66666667
   86918:	0008970c 	.word	0x0008970c
   8691c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8691e:	2b47      	cmp	r3, #71	; 0x47
   86920:	f47f ae46 	bne.w	865b0 <_svfprintf_r+0xfa8>
   86924:	f01b 0f01 	tst.w	fp, #1
   86928:	f47f aeda 	bne.w	866e0 <_svfprintf_r+0x10d8>
   8692c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8692e:	1b9b      	subs	r3, r3, r6
   86930:	9313      	str	r3, [sp, #76]	; 0x4c
   86932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86934:	2b47      	cmp	r3, #71	; 0x47
   86936:	f43f aef7 	beq.w	86728 <_svfprintf_r+0x1120>
   8693a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8693c:	9312      	str	r3, [sp, #72]	; 0x48
   8693e:	e700      	b.n	86742 <_svfprintf_r+0x113a>
   86940:	2000      	movs	r0, #0
   86942:	900a      	str	r0, [sp, #40]	; 0x28
   86944:	f7fe bebc 	b.w	856c0 <_svfprintf_r+0xb8>
   86948:	424f      	negs	r7, r1
   8694a:	3110      	adds	r1, #16
   8694c:	da35      	bge.n	869ba <_svfprintf_r+0x13b2>
   8694e:	2410      	movs	r4, #16
   86950:	4d6a      	ldr	r5, [pc, #424]	; (86afc <_svfprintf_r+0x14f4>)
   86952:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86956:	e004      	b.n	86962 <_svfprintf_r+0x135a>
   86958:	f108 0808 	add.w	r8, r8, #8
   8695c:	3f10      	subs	r7, #16
   8695e:	2f10      	cmp	r7, #16
   86960:	dd2c      	ble.n	869bc <_svfprintf_r+0x13b4>
   86962:	3301      	adds	r3, #1
   86964:	3210      	adds	r2, #16
   86966:	2b07      	cmp	r3, #7
   86968:	9227      	str	r2, [sp, #156]	; 0x9c
   8696a:	9326      	str	r3, [sp, #152]	; 0x98
   8696c:	f8c8 5000 	str.w	r5, [r8]
   86970:	f8c8 4004 	str.w	r4, [r8, #4]
   86974:	ddf0      	ble.n	86958 <_svfprintf_r+0x1350>
   86976:	aa25      	add	r2, sp, #148	; 0x94
   86978:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8697a:	4658      	mov	r0, fp
   8697c:	f001 ff2e 	bl	887dc <__ssprint_r>
   86980:	2800      	cmp	r0, #0
   86982:	f47e af1e 	bne.w	857c2 <_svfprintf_r+0x1ba>
   86986:	46c8      	mov	r8, r9
   86988:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8698a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8698c:	e7e6      	b.n	8695c <_svfprintf_r+0x1354>
   8698e:	aa25      	add	r2, sp, #148	; 0x94
   86990:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86992:	980c      	ldr	r0, [sp, #48]	; 0x30
   86994:	f001 ff22 	bl	887dc <__ssprint_r>
   86998:	2800      	cmp	r0, #0
   8699a:	f47e af12 	bne.w	857c2 <_svfprintf_r+0x1ba>
   8699e:	46c8      	mov	r8, r9
   869a0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   869a2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   869a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   869a6:	f7ff bbc3 	b.w	86130 <_svfprintf_r+0xb28>
   869aa:	2230      	movs	r2, #48	; 0x30
   869ac:	4413      	add	r3, r2
   869ae:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   869b2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   869b6:	ab22      	add	r3, sp, #136	; 0x88
   869b8:	e706      	b.n	867c8 <_svfprintf_r+0x11c0>
   869ba:	4d50      	ldr	r5, [pc, #320]	; (86afc <_svfprintf_r+0x14f4>)
   869bc:	3301      	adds	r3, #1
   869be:	443a      	add	r2, r7
   869c0:	2b07      	cmp	r3, #7
   869c2:	e888 00a0 	stmia.w	r8, {r5, r7}
   869c6:	9227      	str	r2, [sp, #156]	; 0x9c
   869c8:	9326      	str	r3, [sp, #152]	; 0x98
   869ca:	f108 0808 	add.w	r8, r8, #8
   869ce:	f77f abb2 	ble.w	86136 <_svfprintf_r+0xb2e>
   869d2:	aa25      	add	r2, sp, #148	; 0x94
   869d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   869d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   869d8:	f001 ff00 	bl	887dc <__ssprint_r>
   869dc:	2800      	cmp	r0, #0
   869de:	f47e aef0 	bne.w	857c2 <_svfprintf_r+0x1ba>
   869e2:	46c8      	mov	r8, r9
   869e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   869e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   869e8:	f7ff bba5 	b.w	86136 <_svfprintf_r+0xb2e>
   869ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
   869f0:	4413      	add	r3, r2
   869f2:	930e      	str	r3, [sp, #56]	; 0x38
   869f4:	e76b      	b.n	868ce <_svfprintf_r+0x12c6>
   869f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   869f8:	e5ee      	b.n	865d8 <_svfprintf_r+0xfd0>
   869fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   869fc:	4d3f      	ldr	r5, [pc, #252]	; (86afc <_svfprintf_r+0x14f4>)
   869fe:	e4bb      	b.n	86378 <_svfprintf_r+0xd70>
   86a00:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86a02:	9808      	ldr	r0, [sp, #32]
   86a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86a06:	4639      	mov	r1, r7
   86a08:	f002 fbc0 	bl	8918c <__aeabi_dcmpeq>
   86a0c:	2800      	cmp	r0, #0
   86a0e:	f47f ae70 	bne.w	866f2 <_svfprintf_r+0x10ea>
   86a12:	f1c5 0501 	rsb	r5, r5, #1
   86a16:	951f      	str	r5, [sp, #124]	; 0x7c
   86a18:	442c      	add	r4, r5
   86a1a:	e5ca      	b.n	865b2 <_svfprintf_r+0xfaa>
   86a1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a1e:	4e38      	ldr	r6, [pc, #224]	; (86b00 <_svfprintf_r+0x14f8>)
   86a20:	2b00      	cmp	r3, #0
   86a22:	bfbe      	ittt	lt
   86a24:	232d      	movlt	r3, #45	; 0x2d
   86a26:	461f      	movlt	r7, r3
   86a28:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86a2c:	f04f 0303 	mov.w	r3, #3
   86a30:	461a      	mov	r2, r3
   86a32:	9308      	str	r3, [sp, #32]
   86a34:	f04f 0300 	mov.w	r3, #0
   86a38:	bfa8      	it	ge
   86a3a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   86a3e:	4619      	mov	r1, r3
   86a40:	930a      	str	r3, [sp, #40]	; 0x28
   86a42:	4b30      	ldr	r3, [pc, #192]	; (86b04 <_svfprintf_r+0x14fc>)
   86a44:	f7ff b954 	b.w	85cf0 <_svfprintf_r+0x6e8>
   86a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86a4c:	4413      	add	r3, r2
   86a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86a50:	441a      	add	r2, r3
   86a52:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86a56:	920e      	str	r2, [sp, #56]	; 0x38
   86a58:	9308      	str	r3, [sp, #32]
   86a5a:	e5dd      	b.n	86618 <_svfprintf_r+0x1010>
   86a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86a60:	f1c3 0301 	rsb	r3, r3, #1
   86a64:	441a      	add	r2, r3
   86a66:	4613      	mov	r3, r2
   86a68:	e7c3      	b.n	869f2 <_svfprintf_r+0x13ea>
   86a6a:	f01b 0301 	ands.w	r3, fp, #1
   86a6e:	9312      	str	r3, [sp, #72]	; 0x48
   86a70:	f47f aeb3 	bne.w	867da <_svfprintf_r+0x11d2>
   86a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86a7a:	9308      	str	r3, [sp, #32]
   86a7c:	e5cc      	b.n	86618 <_svfprintf_r+0x1010>
   86a7e:	4d1f      	ldr	r5, [pc, #124]	; (86afc <_svfprintf_r+0x14f4>)
   86a80:	e43c      	b.n	862fc <_svfprintf_r+0xcf4>
   86a82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86a84:	4d1d      	ldr	r5, [pc, #116]	; (86afc <_svfprintf_r+0x14f4>)
   86a86:	e491      	b.n	863ac <_svfprintf_r+0xda4>
   86a88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   86a8a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   86a8e:	6828      	ldr	r0, [r5, #0]
   86a90:	46a2      	mov	sl, r4
   86a92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86a96:	900a      	str	r0, [sp, #40]	; 0x28
   86a98:	4628      	mov	r0, r5
   86a9a:	3004      	adds	r0, #4
   86a9c:	900f      	str	r0, [sp, #60]	; 0x3c
   86a9e:	f7fe be0d 	b.w	856bc <_svfprintf_r+0xb4>
   86aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86aa4:	b913      	cbnz	r3, 86aac <_svfprintf_r+0x14a4>
   86aa6:	f01b 0f01 	tst.w	fp, #1
   86aaa:	d002      	beq.n	86ab2 <_svfprintf_r+0x14aa>
   86aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86aae:	3301      	adds	r3, #1
   86ab0:	e7cd      	b.n	86a4e <_svfprintf_r+0x1446>
   86ab2:	2301      	movs	r3, #1
   86ab4:	e71c      	b.n	868f0 <_svfprintf_r+0x12e8>
   86ab6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86aba:	f7ff b980 	b.w	85dbe <_svfprintf_r+0x7b6>
   86abe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86ac2:	f7ff b93a 	b.w	85d3a <_svfprintf_r+0x732>
   86ac6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86aca:	f7ff b84f 	b.w	85b6c <_svfprintf_r+0x564>
   86ace:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86ad2:	e679      	b.n	867c8 <_svfprintf_r+0x11c0>
   86ad4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86ad8:	f7ff b9b2 	b.w	85e40 <_svfprintf_r+0x838>
   86adc:	f04f 32ff 	mov.w	r2, #4294967295
   86ae0:	230c      	movs	r3, #12
   86ae2:	9209      	str	r2, [sp, #36]	; 0x24
   86ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86ae6:	6013      	str	r3, [r2, #0]
   86ae8:	f7fe be74 	b.w	857d4 <_svfprintf_r+0x1cc>
   86aec:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86af0:	f7ff b8c4 	b.w	85c7c <_svfprintf_r+0x674>
   86af4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86af8:	f7ff b878 	b.w	85bec <_svfprintf_r+0x5e4>
   86afc:	00089728 	.word	0x00089728
   86b00:	000896e0 	.word	0x000896e0
   86b04:	000896dc 	.word	0x000896dc

00086b08 <register_fini>:
   86b08:	4b02      	ldr	r3, [pc, #8]	; (86b14 <register_fini+0xc>)
   86b0a:	b113      	cbz	r3, 86b12 <register_fini+0xa>
   86b0c:	4802      	ldr	r0, [pc, #8]	; (86b18 <register_fini+0x10>)
   86b0e:	f000 b805 	b.w	86b1c <atexit>
   86b12:	4770      	bx	lr
   86b14:	00000000 	.word	0x00000000
   86b18:	00087a95 	.word	0x00087a95

00086b1c <atexit>:
   86b1c:	2300      	movs	r3, #0
   86b1e:	4601      	mov	r1, r0
   86b20:	461a      	mov	r2, r3
   86b22:	4618      	mov	r0, r3
   86b24:	f001 bed8 	b.w	888d8 <__register_exitproc>

00086b28 <quorem>:
   86b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86b2c:	6903      	ldr	r3, [r0, #16]
   86b2e:	690f      	ldr	r7, [r1, #16]
   86b30:	b083      	sub	sp, #12
   86b32:	429f      	cmp	r7, r3
   86b34:	f300 8088 	bgt.w	86c48 <quorem+0x120>
   86b38:	3f01      	subs	r7, #1
   86b3a:	f101 0614 	add.w	r6, r1, #20
   86b3e:	f100 0a14 	add.w	sl, r0, #20
   86b42:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   86b46:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86b4a:	3301      	adds	r3, #1
   86b4c:	fbb2 f8f3 	udiv	r8, r2, r3
   86b50:	00bb      	lsls	r3, r7, #2
   86b52:	9300      	str	r3, [sp, #0]
   86b54:	eb06 0903 	add.w	r9, r6, r3
   86b58:	4453      	add	r3, sl
   86b5a:	9301      	str	r3, [sp, #4]
   86b5c:	f1b8 0f00 	cmp.w	r8, #0
   86b60:	d03b      	beq.n	86bda <quorem+0xb2>
   86b62:	2300      	movs	r3, #0
   86b64:	46b4      	mov	ip, r6
   86b66:	461c      	mov	r4, r3
   86b68:	46d6      	mov	lr, sl
   86b6a:	f85c 2b04 	ldr.w	r2, [ip], #4
   86b6e:	f8de 5000 	ldr.w	r5, [lr]
   86b72:	fa1f fb82 	uxth.w	fp, r2
   86b76:	fb08 330b 	mla	r3, r8, fp, r3
   86b7a:	0c12      	lsrs	r2, r2, #16
   86b7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86b80:	fb08 bb02 	mla	fp, r8, r2, fp
   86b84:	b29a      	uxth	r2, r3
   86b86:	1aa2      	subs	r2, r4, r2
   86b88:	b2ab      	uxth	r3, r5
   86b8a:	fa1f f48b 	uxth.w	r4, fp
   86b8e:	441a      	add	r2, r3
   86b90:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86b94:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86b98:	b292      	uxth	r2, r2
   86b9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   86b9e:	45e1      	cmp	r9, ip
   86ba0:	f84e 2b04 	str.w	r2, [lr], #4
   86ba4:	ea4f 4424 	mov.w	r4, r4, asr #16
   86ba8:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86bac:	d2dd      	bcs.n	86b6a <quorem+0x42>
   86bae:	9b00      	ldr	r3, [sp, #0]
   86bb0:	f85a 3003 	ldr.w	r3, [sl, r3]
   86bb4:	b98b      	cbnz	r3, 86bda <quorem+0xb2>
   86bb6:	9c01      	ldr	r4, [sp, #4]
   86bb8:	1f23      	subs	r3, r4, #4
   86bba:	459a      	cmp	sl, r3
   86bbc:	d20c      	bcs.n	86bd8 <quorem+0xb0>
   86bbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86bc2:	b94b      	cbnz	r3, 86bd8 <quorem+0xb0>
   86bc4:	f1a4 0308 	sub.w	r3, r4, #8
   86bc8:	e002      	b.n	86bd0 <quorem+0xa8>
   86bca:	681a      	ldr	r2, [r3, #0]
   86bcc:	3b04      	subs	r3, #4
   86bce:	b91a      	cbnz	r2, 86bd8 <quorem+0xb0>
   86bd0:	459a      	cmp	sl, r3
   86bd2:	f107 37ff 	add.w	r7, r7, #4294967295
   86bd6:	d3f8      	bcc.n	86bca <quorem+0xa2>
   86bd8:	6107      	str	r7, [r0, #16]
   86bda:	4604      	mov	r4, r0
   86bdc:	f001 fcee 	bl	885bc <__mcmp>
   86be0:	2800      	cmp	r0, #0
   86be2:	db2d      	blt.n	86c40 <quorem+0x118>
   86be4:	4655      	mov	r5, sl
   86be6:	2300      	movs	r3, #0
   86be8:	f108 0801 	add.w	r8, r8, #1
   86bec:	f856 1b04 	ldr.w	r1, [r6], #4
   86bf0:	6828      	ldr	r0, [r5, #0]
   86bf2:	b28a      	uxth	r2, r1
   86bf4:	1a9a      	subs	r2, r3, r2
   86bf6:	0c0b      	lsrs	r3, r1, #16
   86bf8:	b281      	uxth	r1, r0
   86bfa:	440a      	add	r2, r1
   86bfc:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86c00:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86c04:	b292      	uxth	r2, r2
   86c06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86c0a:	45b1      	cmp	r9, r6
   86c0c:	f845 2b04 	str.w	r2, [r5], #4
   86c10:	ea4f 4323 	mov.w	r3, r3, asr #16
   86c14:	d2ea      	bcs.n	86bec <quorem+0xc4>
   86c16:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86c1a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86c1e:	b97a      	cbnz	r2, 86c40 <quorem+0x118>
   86c20:	1f1a      	subs	r2, r3, #4
   86c22:	4592      	cmp	sl, r2
   86c24:	d20b      	bcs.n	86c3e <quorem+0x116>
   86c26:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86c2a:	b942      	cbnz	r2, 86c3e <quorem+0x116>
   86c2c:	3b08      	subs	r3, #8
   86c2e:	e002      	b.n	86c36 <quorem+0x10e>
   86c30:	681a      	ldr	r2, [r3, #0]
   86c32:	3b04      	subs	r3, #4
   86c34:	b91a      	cbnz	r2, 86c3e <quorem+0x116>
   86c36:	459a      	cmp	sl, r3
   86c38:	f107 37ff 	add.w	r7, r7, #4294967295
   86c3c:	d3f8      	bcc.n	86c30 <quorem+0x108>
   86c3e:	6127      	str	r7, [r4, #16]
   86c40:	4640      	mov	r0, r8
   86c42:	b003      	add	sp, #12
   86c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c48:	2000      	movs	r0, #0
   86c4a:	b003      	add	sp, #12
   86c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086c50 <_dtoa_r>:
   86c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c54:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86c56:	b09b      	sub	sp, #108	; 0x6c
   86c58:	4604      	mov	r4, r0
   86c5a:	4692      	mov	sl, r2
   86c5c:	469b      	mov	fp, r3
   86c5e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86c60:	b14d      	cbz	r5, 86c76 <_dtoa_r+0x26>
   86c62:	2301      	movs	r3, #1
   86c64:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86c66:	4629      	mov	r1, r5
   86c68:	4093      	lsls	r3, r2
   86c6a:	60ab      	str	r3, [r5, #8]
   86c6c:	606a      	str	r2, [r5, #4]
   86c6e:	f001 facd 	bl	8820c <_Bfree>
   86c72:	2300      	movs	r3, #0
   86c74:	6423      	str	r3, [r4, #64]	; 0x40
   86c76:	f1bb 0f00 	cmp.w	fp, #0
   86c7a:	465d      	mov	r5, fp
   86c7c:	db35      	blt.n	86cea <_dtoa_r+0x9a>
   86c7e:	2300      	movs	r3, #0
   86c80:	6033      	str	r3, [r6, #0]
   86c82:	4b9d      	ldr	r3, [pc, #628]	; (86ef8 <_dtoa_r+0x2a8>)
   86c84:	43ab      	bics	r3, r5
   86c86:	d015      	beq.n	86cb4 <_dtoa_r+0x64>
   86c88:	2200      	movs	r2, #0
   86c8a:	2300      	movs	r3, #0
   86c8c:	4650      	mov	r0, sl
   86c8e:	4659      	mov	r1, fp
   86c90:	f002 fa7c 	bl	8918c <__aeabi_dcmpeq>
   86c94:	4680      	mov	r8, r0
   86c96:	2800      	cmp	r0, #0
   86c98:	d02d      	beq.n	86cf6 <_dtoa_r+0xa6>
   86c9a:	2301      	movs	r3, #1
   86c9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86c9e:	6013      	str	r3, [r2, #0]
   86ca0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86ca2:	2b00      	cmp	r3, #0
   86ca4:	f000 80bd 	beq.w	86e22 <_dtoa_r+0x1d2>
   86ca8:	4894      	ldr	r0, [pc, #592]	; (86efc <_dtoa_r+0x2ac>)
   86caa:	6018      	str	r0, [r3, #0]
   86cac:	3801      	subs	r0, #1
   86cae:	b01b      	add	sp, #108	; 0x6c
   86cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86cb4:	f242 730f 	movw	r3, #9999	; 0x270f
   86cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86cba:	6013      	str	r3, [r2, #0]
   86cbc:	f1ba 0f00 	cmp.w	sl, #0
   86cc0:	d10d      	bne.n	86cde <_dtoa_r+0x8e>
   86cc2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86cc6:	b955      	cbnz	r5, 86cde <_dtoa_r+0x8e>
   86cc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86cca:	488d      	ldr	r0, [pc, #564]	; (86f00 <_dtoa_r+0x2b0>)
   86ccc:	2b00      	cmp	r3, #0
   86cce:	d0ee      	beq.n	86cae <_dtoa_r+0x5e>
   86cd0:	f100 0308 	add.w	r3, r0, #8
   86cd4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86cd6:	6013      	str	r3, [r2, #0]
   86cd8:	b01b      	add	sp, #108	; 0x6c
   86cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86cde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86ce0:	4888      	ldr	r0, [pc, #544]	; (86f04 <_dtoa_r+0x2b4>)
   86ce2:	2b00      	cmp	r3, #0
   86ce4:	d0e3      	beq.n	86cae <_dtoa_r+0x5e>
   86ce6:	1cc3      	adds	r3, r0, #3
   86ce8:	e7f4      	b.n	86cd4 <_dtoa_r+0x84>
   86cea:	2301      	movs	r3, #1
   86cec:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86cf0:	6033      	str	r3, [r6, #0]
   86cf2:	46ab      	mov	fp, r5
   86cf4:	e7c5      	b.n	86c82 <_dtoa_r+0x32>
   86cf6:	aa18      	add	r2, sp, #96	; 0x60
   86cf8:	ab19      	add	r3, sp, #100	; 0x64
   86cfa:	9201      	str	r2, [sp, #4]
   86cfc:	9300      	str	r3, [sp, #0]
   86cfe:	4652      	mov	r2, sl
   86d00:	465b      	mov	r3, fp
   86d02:	4620      	mov	r0, r4
   86d04:	f001 fd04 	bl	88710 <__d2b>
   86d08:	0d2b      	lsrs	r3, r5, #20
   86d0a:	4681      	mov	r9, r0
   86d0c:	d071      	beq.n	86df2 <_dtoa_r+0x1a2>
   86d0e:	4650      	mov	r0, sl
   86d10:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86d14:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86d18:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86d1a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86d1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86d22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86d26:	2200      	movs	r2, #0
   86d28:	4b77      	ldr	r3, [pc, #476]	; (86f08 <_dtoa_r+0x2b8>)
   86d2a:	f7fd fce3 	bl	846f4 <__aeabi_dsub>
   86d2e:	a36c      	add	r3, pc, #432	; (adr r3, 86ee0 <_dtoa_r+0x290>)
   86d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   86d34:	f7fd fe92 	bl	84a5c <__aeabi_dmul>
   86d38:	a36b      	add	r3, pc, #428	; (adr r3, 86ee8 <_dtoa_r+0x298>)
   86d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86d3e:	f7fd fcdb 	bl	846f8 <__adddf3>
   86d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86d46:	4630      	mov	r0, r6
   86d48:	f7fd fe22 	bl	84990 <__aeabi_i2d>
   86d4c:	a368      	add	r3, pc, #416	; (adr r3, 86ef0 <_dtoa_r+0x2a0>)
   86d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   86d52:	f7fd fe83 	bl	84a5c <__aeabi_dmul>
   86d56:	4602      	mov	r2, r0
   86d58:	460b      	mov	r3, r1
   86d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86d5e:	f7fd fccb 	bl	846f8 <__adddf3>
   86d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86d66:	f002 fa59 	bl	8921c <__aeabi_d2iz>
   86d6a:	2200      	movs	r2, #0
   86d6c:	9002      	str	r0, [sp, #8]
   86d6e:	2300      	movs	r3, #0
   86d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86d74:	f002 fa14 	bl	891a0 <__aeabi_dcmplt>
   86d78:	2800      	cmp	r0, #0
   86d7a:	f040 816d 	bne.w	87058 <_dtoa_r+0x408>
   86d7e:	9d02      	ldr	r5, [sp, #8]
   86d80:	2d16      	cmp	r5, #22
   86d82:	f200 8157 	bhi.w	87034 <_dtoa_r+0x3e4>
   86d86:	4961      	ldr	r1, [pc, #388]	; (86f0c <_dtoa_r+0x2bc>)
   86d88:	4652      	mov	r2, sl
   86d8a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86d8e:	465b      	mov	r3, fp
   86d90:	e9d1 0100 	ldrd	r0, r1, [r1]
   86d94:	f002 fa22 	bl	891dc <__aeabi_dcmpgt>
   86d98:	2800      	cmp	r0, #0
   86d9a:	f000 81be 	beq.w	8711a <_dtoa_r+0x4ca>
   86d9e:	1e6b      	subs	r3, r5, #1
   86da0:	9302      	str	r3, [sp, #8]
   86da2:	2300      	movs	r3, #0
   86da4:	930e      	str	r3, [sp, #56]	; 0x38
   86da6:	1bbf      	subs	r7, r7, r6
   86da8:	1e7b      	subs	r3, r7, #1
   86daa:	9308      	str	r3, [sp, #32]
   86dac:	f100 814e 	bmi.w	8704c <_dtoa_r+0x3fc>
   86db0:	2300      	movs	r3, #0
   86db2:	930a      	str	r3, [sp, #40]	; 0x28
   86db4:	9b02      	ldr	r3, [sp, #8]
   86db6:	2b00      	cmp	r3, #0
   86db8:	f2c0 813f 	blt.w	8703a <_dtoa_r+0x3ea>
   86dbc:	9a08      	ldr	r2, [sp, #32]
   86dbe:	930d      	str	r3, [sp, #52]	; 0x34
   86dc0:	4611      	mov	r1, r2
   86dc2:	4419      	add	r1, r3
   86dc4:	2300      	movs	r3, #0
   86dc6:	9108      	str	r1, [sp, #32]
   86dc8:	930c      	str	r3, [sp, #48]	; 0x30
   86dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86dcc:	2b09      	cmp	r3, #9
   86dce:	d82a      	bhi.n	86e26 <_dtoa_r+0x1d6>
   86dd0:	2b05      	cmp	r3, #5
   86dd2:	f340 8658 	ble.w	87a86 <_dtoa_r+0xe36>
   86dd6:	2500      	movs	r5, #0
   86dd8:	3b04      	subs	r3, #4
   86dda:	9324      	str	r3, [sp, #144]	; 0x90
   86ddc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86dde:	3b02      	subs	r3, #2
   86de0:	2b03      	cmp	r3, #3
   86de2:	f200 863f 	bhi.w	87a64 <_dtoa_r+0xe14>
   86de6:	e8df f013 	tbh	[pc, r3, lsl #1]
   86dea:	03ce      	.short	0x03ce
   86dec:	03d902c3 	.word	0x03d902c3
   86df0:	045b      	.short	0x045b
   86df2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86df4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   86df6:	443e      	add	r6, r7
   86df8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   86dfc:	2b20      	cmp	r3, #32
   86dfe:	f340 8187 	ble.w	87110 <_dtoa_r+0x4c0>
   86e02:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   86e06:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86e0a:	409d      	lsls	r5, r3
   86e0c:	fa2a f000 	lsr.w	r0, sl, r0
   86e10:	4328      	orrs	r0, r5
   86e12:	f7fd fdad 	bl	84970 <__aeabi_ui2d>
   86e16:	2301      	movs	r3, #1
   86e18:	3e01      	subs	r6, #1
   86e1a:	9314      	str	r3, [sp, #80]	; 0x50
   86e1c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86e20:	e781      	b.n	86d26 <_dtoa_r+0xd6>
   86e22:	483b      	ldr	r0, [pc, #236]	; (86f10 <_dtoa_r+0x2c0>)
   86e24:	e743      	b.n	86cae <_dtoa_r+0x5e>
   86e26:	2100      	movs	r1, #0
   86e28:	4620      	mov	r0, r4
   86e2a:	6461      	str	r1, [r4, #68]	; 0x44
   86e2c:	9125      	str	r1, [sp, #148]	; 0x94
   86e2e:	f001 f9c7 	bl	881c0 <_Balloc>
   86e32:	f04f 33ff 	mov.w	r3, #4294967295
   86e36:	9307      	str	r3, [sp, #28]
   86e38:	930f      	str	r3, [sp, #60]	; 0x3c
   86e3a:	2301      	movs	r3, #1
   86e3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86e3e:	9004      	str	r0, [sp, #16]
   86e40:	6420      	str	r0, [r4, #64]	; 0x40
   86e42:	9224      	str	r2, [sp, #144]	; 0x90
   86e44:	930b      	str	r3, [sp, #44]	; 0x2c
   86e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86e48:	2b00      	cmp	r3, #0
   86e4a:	f2c0 80d3 	blt.w	86ff4 <_dtoa_r+0x3a4>
   86e4e:	9a02      	ldr	r2, [sp, #8]
   86e50:	2a0e      	cmp	r2, #14
   86e52:	f300 80cf 	bgt.w	86ff4 <_dtoa_r+0x3a4>
   86e56:	4b2d      	ldr	r3, [pc, #180]	; (86f0c <_dtoa_r+0x2bc>)
   86e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   86e60:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86e64:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86e66:	2b00      	cmp	r3, #0
   86e68:	f2c0 83b4 	blt.w	875d4 <_dtoa_r+0x984>
   86e6c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86e70:	4650      	mov	r0, sl
   86e72:	462a      	mov	r2, r5
   86e74:	4633      	mov	r3, r6
   86e76:	4659      	mov	r1, fp
   86e78:	f7fd ff1a 	bl	84cb0 <__aeabi_ddiv>
   86e7c:	f002 f9ce 	bl	8921c <__aeabi_d2iz>
   86e80:	4680      	mov	r8, r0
   86e82:	f7fd fd85 	bl	84990 <__aeabi_i2d>
   86e86:	462a      	mov	r2, r5
   86e88:	4633      	mov	r3, r6
   86e8a:	f7fd fde7 	bl	84a5c <__aeabi_dmul>
   86e8e:	4602      	mov	r2, r0
   86e90:	460b      	mov	r3, r1
   86e92:	4650      	mov	r0, sl
   86e94:	4659      	mov	r1, fp
   86e96:	f7fd fc2d 	bl	846f4 <__aeabi_dsub>
   86e9a:	9e07      	ldr	r6, [sp, #28]
   86e9c:	9f04      	ldr	r7, [sp, #16]
   86e9e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86ea2:	2e01      	cmp	r6, #1
   86ea4:	703d      	strb	r5, [r7, #0]
   86ea6:	4602      	mov	r2, r0
   86ea8:	460b      	mov	r3, r1
   86eaa:	f107 0501 	add.w	r5, r7, #1
   86eae:	d064      	beq.n	86f7a <_dtoa_r+0x32a>
   86eb0:	2200      	movs	r2, #0
   86eb2:	4b18      	ldr	r3, [pc, #96]	; (86f14 <_dtoa_r+0x2c4>)
   86eb4:	f7fd fdd2 	bl	84a5c <__aeabi_dmul>
   86eb8:	2200      	movs	r2, #0
   86eba:	2300      	movs	r3, #0
   86ebc:	4606      	mov	r6, r0
   86ebe:	460f      	mov	r7, r1
   86ec0:	f002 f964 	bl	8918c <__aeabi_dcmpeq>
   86ec4:	2800      	cmp	r0, #0
   86ec6:	f040 8082 	bne.w	86fce <_dtoa_r+0x37e>
   86eca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86ece:	f04f 0a00 	mov.w	sl, #0
   86ed2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86ed6:	f04f 0b00 	mov.w	fp, #0
   86eda:	940b      	str	r4, [sp, #44]	; 0x2c
   86edc:	e029      	b.n	86f32 <_dtoa_r+0x2e2>
   86ede:	bf00      	nop
   86ee0:	636f4361 	.word	0x636f4361
   86ee4:	3fd287a7 	.word	0x3fd287a7
   86ee8:	8b60c8b3 	.word	0x8b60c8b3
   86eec:	3fc68a28 	.word	0x3fc68a28
   86ef0:	509f79fb 	.word	0x509f79fb
   86ef4:	3fd34413 	.word	0x3fd34413
   86ef8:	7ff00000 	.word	0x7ff00000
   86efc:	00089715 	.word	0x00089715
   86f00:	00089738 	.word	0x00089738
   86f04:	00089744 	.word	0x00089744
   86f08:	3ff80000 	.word	0x3ff80000
   86f0c:	00089770 	.word	0x00089770
   86f10:	00089714 	.word	0x00089714
   86f14:	40240000 	.word	0x40240000
   86f18:	2200      	movs	r2, #0
   86f1a:	4b81      	ldr	r3, [pc, #516]	; (87120 <_dtoa_r+0x4d0>)
   86f1c:	f7fd fd9e 	bl	84a5c <__aeabi_dmul>
   86f20:	4652      	mov	r2, sl
   86f22:	465b      	mov	r3, fp
   86f24:	4606      	mov	r6, r0
   86f26:	460f      	mov	r7, r1
   86f28:	f002 f930 	bl	8918c <__aeabi_dcmpeq>
   86f2c:	2800      	cmp	r0, #0
   86f2e:	f040 83ba 	bne.w	876a6 <_dtoa_r+0xa56>
   86f32:	4642      	mov	r2, r8
   86f34:	464b      	mov	r3, r9
   86f36:	4630      	mov	r0, r6
   86f38:	4639      	mov	r1, r7
   86f3a:	f7fd feb9 	bl	84cb0 <__aeabi_ddiv>
   86f3e:	f002 f96d 	bl	8921c <__aeabi_d2iz>
   86f42:	4604      	mov	r4, r0
   86f44:	f7fd fd24 	bl	84990 <__aeabi_i2d>
   86f48:	4642      	mov	r2, r8
   86f4a:	464b      	mov	r3, r9
   86f4c:	f7fd fd86 	bl	84a5c <__aeabi_dmul>
   86f50:	4602      	mov	r2, r0
   86f52:	460b      	mov	r3, r1
   86f54:	4630      	mov	r0, r6
   86f56:	4639      	mov	r1, r7
   86f58:	f7fd fbcc 	bl	846f4 <__aeabi_dsub>
   86f5c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86f60:	f805 6b01 	strb.w	r6, [r5], #1
   86f64:	9e04      	ldr	r6, [sp, #16]
   86f66:	9f07      	ldr	r7, [sp, #28]
   86f68:	1bae      	subs	r6, r5, r6
   86f6a:	42be      	cmp	r6, r7
   86f6c:	4602      	mov	r2, r0
   86f6e:	460b      	mov	r3, r1
   86f70:	d1d2      	bne.n	86f18 <_dtoa_r+0x2c8>
   86f72:	46a0      	mov	r8, r4
   86f74:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86f78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86f7a:	4610      	mov	r0, r2
   86f7c:	4619      	mov	r1, r3
   86f7e:	f7fd fbbb 	bl	846f8 <__adddf3>
   86f82:	4606      	mov	r6, r0
   86f84:	460f      	mov	r7, r1
   86f86:	4602      	mov	r2, r0
   86f88:	460b      	mov	r3, r1
   86f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86f8e:	f002 f907 	bl	891a0 <__aeabi_dcmplt>
   86f92:	b948      	cbnz	r0, 86fa8 <_dtoa_r+0x358>
   86f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86f98:	4632      	mov	r2, r6
   86f9a:	463b      	mov	r3, r7
   86f9c:	f002 f8f6 	bl	8918c <__aeabi_dcmpeq>
   86fa0:	b1a8      	cbz	r0, 86fce <_dtoa_r+0x37e>
   86fa2:	f018 0f01 	tst.w	r8, #1
   86fa6:	d012      	beq.n	86fce <_dtoa_r+0x37e>
   86fa8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86fac:	1e6b      	subs	r3, r5, #1
   86fae:	9a04      	ldr	r2, [sp, #16]
   86fb0:	e004      	b.n	86fbc <_dtoa_r+0x36c>
   86fb2:	429a      	cmp	r2, r3
   86fb4:	f000 8402 	beq.w	877bc <_dtoa_r+0xb6c>
   86fb8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   86fbc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86fc0:	f103 0501 	add.w	r5, r3, #1
   86fc4:	d0f5      	beq.n	86fb2 <_dtoa_r+0x362>
   86fc6:	f108 0801 	add.w	r8, r8, #1
   86fca:	f883 8000 	strb.w	r8, [r3]
   86fce:	4649      	mov	r1, r9
   86fd0:	4620      	mov	r0, r4
   86fd2:	f001 f91b 	bl	8820c <_Bfree>
   86fd6:	2200      	movs	r2, #0
   86fd8:	9b02      	ldr	r3, [sp, #8]
   86fda:	702a      	strb	r2, [r5, #0]
   86fdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86fde:	3301      	adds	r3, #1
   86fe0:	6013      	str	r3, [r2, #0]
   86fe2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86fe4:	2b00      	cmp	r3, #0
   86fe6:	f000 839f 	beq.w	87728 <_dtoa_r+0xad8>
   86fea:	9804      	ldr	r0, [sp, #16]
   86fec:	601d      	str	r5, [r3, #0]
   86fee:	b01b      	add	sp, #108	; 0x6c
   86ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86ff6:	2a00      	cmp	r2, #0
   86ff8:	d03e      	beq.n	87078 <_dtoa_r+0x428>
   86ffa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86ffc:	2a01      	cmp	r2, #1
   86ffe:	f340 8311 	ble.w	87624 <_dtoa_r+0x9d4>
   87002:	9b07      	ldr	r3, [sp, #28]
   87004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87006:	1e5f      	subs	r7, r3, #1
   87008:	42ba      	cmp	r2, r7
   8700a:	f2c0 8390 	blt.w	8772e <_dtoa_r+0xade>
   8700e:	1bd7      	subs	r7, r2, r7
   87010:	9b07      	ldr	r3, [sp, #28]
   87012:	2b00      	cmp	r3, #0
   87014:	f2c0 848c 	blt.w	87930 <_dtoa_r+0xce0>
   87018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8701a:	9b07      	ldr	r3, [sp, #28]
   8701c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8701e:	2101      	movs	r1, #1
   87020:	441a      	add	r2, r3
   87022:	920a      	str	r2, [sp, #40]	; 0x28
   87024:	9a08      	ldr	r2, [sp, #32]
   87026:	4620      	mov	r0, r4
   87028:	441a      	add	r2, r3
   8702a:	9208      	str	r2, [sp, #32]
   8702c:	f001 f98a 	bl	88344 <__i2b>
   87030:	4606      	mov	r6, r0
   87032:	e023      	b.n	8707c <_dtoa_r+0x42c>
   87034:	2301      	movs	r3, #1
   87036:	930e      	str	r3, [sp, #56]	; 0x38
   87038:	e6b5      	b.n	86da6 <_dtoa_r+0x156>
   8703a:	2300      	movs	r3, #0
   8703c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8703e:	930d      	str	r3, [sp, #52]	; 0x34
   87040:	9b02      	ldr	r3, [sp, #8]
   87042:	1ad2      	subs	r2, r2, r3
   87044:	425b      	negs	r3, r3
   87046:	920a      	str	r2, [sp, #40]	; 0x28
   87048:	930c      	str	r3, [sp, #48]	; 0x30
   8704a:	e6be      	b.n	86dca <_dtoa_r+0x17a>
   8704c:	f1c7 0301 	rsb	r3, r7, #1
   87050:	930a      	str	r3, [sp, #40]	; 0x28
   87052:	2300      	movs	r3, #0
   87054:	9308      	str	r3, [sp, #32]
   87056:	e6ad      	b.n	86db4 <_dtoa_r+0x164>
   87058:	9d02      	ldr	r5, [sp, #8]
   8705a:	4628      	mov	r0, r5
   8705c:	f7fd fc98 	bl	84990 <__aeabi_i2d>
   87060:	4602      	mov	r2, r0
   87062:	460b      	mov	r3, r1
   87064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   87068:	f002 f890 	bl	8918c <__aeabi_dcmpeq>
   8706c:	2800      	cmp	r0, #0
   8706e:	f47f ae86 	bne.w	86d7e <_dtoa_r+0x12e>
   87072:	1e6b      	subs	r3, r5, #1
   87074:	9302      	str	r3, [sp, #8]
   87076:	e682      	b.n	86d7e <_dtoa_r+0x12e>
   87078:	ad0a      	add	r5, sp, #40	; 0x28
   8707a:	cde0      	ldmia	r5, {r5, r6, r7}
   8707c:	2d00      	cmp	r5, #0
   8707e:	dd0c      	ble.n	8709a <_dtoa_r+0x44a>
   87080:	9908      	ldr	r1, [sp, #32]
   87082:	2900      	cmp	r1, #0
   87084:	460b      	mov	r3, r1
   87086:	dd08      	ble.n	8709a <_dtoa_r+0x44a>
   87088:	42a9      	cmp	r1, r5
   8708a:	bfa8      	it	ge
   8708c:	462b      	movge	r3, r5
   8708e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87090:	1aed      	subs	r5, r5, r3
   87092:	1ad2      	subs	r2, r2, r3
   87094:	1acb      	subs	r3, r1, r3
   87096:	920a      	str	r2, [sp, #40]	; 0x28
   87098:	9308      	str	r3, [sp, #32]
   8709a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8709c:	b1d3      	cbz	r3, 870d4 <_dtoa_r+0x484>
   8709e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   870a0:	2b00      	cmp	r3, #0
   870a2:	f000 82b8 	beq.w	87616 <_dtoa_r+0x9c6>
   870a6:	2f00      	cmp	r7, #0
   870a8:	dd10      	ble.n	870cc <_dtoa_r+0x47c>
   870aa:	4631      	mov	r1, r6
   870ac:	463a      	mov	r2, r7
   870ae:	4620      	mov	r0, r4
   870b0:	f001 f9e4 	bl	8847c <__pow5mult>
   870b4:	464a      	mov	r2, r9
   870b6:	4601      	mov	r1, r0
   870b8:	4606      	mov	r6, r0
   870ba:	4620      	mov	r0, r4
   870bc:	f001 f94c 	bl	88358 <__multiply>
   870c0:	4603      	mov	r3, r0
   870c2:	4649      	mov	r1, r9
   870c4:	4620      	mov	r0, r4
   870c6:	4699      	mov	r9, r3
   870c8:	f001 f8a0 	bl	8820c <_Bfree>
   870cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   870ce:	1bda      	subs	r2, r3, r7
   870d0:	f040 82a2 	bne.w	87618 <_dtoa_r+0x9c8>
   870d4:	2101      	movs	r1, #1
   870d6:	4620      	mov	r0, r4
   870d8:	f001 f934 	bl	88344 <__i2b>
   870dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   870de:	4680      	mov	r8, r0
   870e0:	2b00      	cmp	r3, #0
   870e2:	dd1f      	ble.n	87124 <_dtoa_r+0x4d4>
   870e4:	4601      	mov	r1, r0
   870e6:	461a      	mov	r2, r3
   870e8:	4620      	mov	r0, r4
   870ea:	f001 f9c7 	bl	8847c <__pow5mult>
   870ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   870f0:	4680      	mov	r8, r0
   870f2:	2b01      	cmp	r3, #1
   870f4:	f340 8255 	ble.w	875a2 <_dtoa_r+0x952>
   870f8:	2300      	movs	r3, #0
   870fa:	930c      	str	r3, [sp, #48]	; 0x30
   870fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87100:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87104:	6918      	ldr	r0, [r3, #16]
   87106:	f001 f8cd 	bl	882a4 <__hi0bits>
   8710a:	f1c0 0020 	rsb	r0, r0, #32
   8710e:	e013      	b.n	87138 <_dtoa_r+0x4e8>
   87110:	f1c3 0520 	rsb	r5, r3, #32
   87114:	fa0a f005 	lsl.w	r0, sl, r5
   87118:	e67b      	b.n	86e12 <_dtoa_r+0x1c2>
   8711a:	900e      	str	r0, [sp, #56]	; 0x38
   8711c:	e643      	b.n	86da6 <_dtoa_r+0x156>
   8711e:	bf00      	nop
   87120:	40240000 	.word	0x40240000
   87124:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87126:	2b01      	cmp	r3, #1
   87128:	f340 8285 	ble.w	87636 <_dtoa_r+0x9e6>
   8712c:	2300      	movs	r3, #0
   8712e:	930c      	str	r3, [sp, #48]	; 0x30
   87130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87132:	2001      	movs	r0, #1
   87134:	2b00      	cmp	r3, #0
   87136:	d1e1      	bne.n	870fc <_dtoa_r+0x4ac>
   87138:	9a08      	ldr	r2, [sp, #32]
   8713a:	4410      	add	r0, r2
   8713c:	f010 001f 	ands.w	r0, r0, #31
   87140:	f000 80a1 	beq.w	87286 <_dtoa_r+0x636>
   87144:	f1c0 0320 	rsb	r3, r0, #32
   87148:	2b04      	cmp	r3, #4
   8714a:	f340 8486 	ble.w	87a5a <_dtoa_r+0xe0a>
   8714e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87150:	f1c0 001c 	rsb	r0, r0, #28
   87154:	4403      	add	r3, r0
   87156:	930a      	str	r3, [sp, #40]	; 0x28
   87158:	4613      	mov	r3, r2
   8715a:	4403      	add	r3, r0
   8715c:	4405      	add	r5, r0
   8715e:	9308      	str	r3, [sp, #32]
   87160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87162:	2b00      	cmp	r3, #0
   87164:	dd05      	ble.n	87172 <_dtoa_r+0x522>
   87166:	4649      	mov	r1, r9
   87168:	461a      	mov	r2, r3
   8716a:	4620      	mov	r0, r4
   8716c:	f001 f9d6 	bl	8851c <__lshift>
   87170:	4681      	mov	r9, r0
   87172:	9b08      	ldr	r3, [sp, #32]
   87174:	2b00      	cmp	r3, #0
   87176:	dd05      	ble.n	87184 <_dtoa_r+0x534>
   87178:	4641      	mov	r1, r8
   8717a:	461a      	mov	r2, r3
   8717c:	4620      	mov	r0, r4
   8717e:	f001 f9cd 	bl	8851c <__lshift>
   87182:	4680      	mov	r8, r0
   87184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87186:	2b00      	cmp	r3, #0
   87188:	f040 8086 	bne.w	87298 <_dtoa_r+0x648>
   8718c:	9b07      	ldr	r3, [sp, #28]
   8718e:	2b00      	cmp	r3, #0
   87190:	f340 8264 	ble.w	8765c <_dtoa_r+0xa0c>
   87194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87196:	2b00      	cmp	r3, #0
   87198:	f000 8098 	beq.w	872cc <_dtoa_r+0x67c>
   8719c:	2d00      	cmp	r5, #0
   8719e:	dd05      	ble.n	871ac <_dtoa_r+0x55c>
   871a0:	4631      	mov	r1, r6
   871a2:	462a      	mov	r2, r5
   871a4:	4620      	mov	r0, r4
   871a6:	f001 f9b9 	bl	8851c <__lshift>
   871aa:	4606      	mov	r6, r0
   871ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   871ae:	2b00      	cmp	r3, #0
   871b0:	f040 8336 	bne.w	87820 <_dtoa_r+0xbd0>
   871b4:	9608      	str	r6, [sp, #32]
   871b6:	9b07      	ldr	r3, [sp, #28]
   871b8:	9a04      	ldr	r2, [sp, #16]
   871ba:	3b01      	subs	r3, #1
   871bc:	18d3      	adds	r3, r2, r3
   871be:	930b      	str	r3, [sp, #44]	; 0x2c
   871c0:	4617      	mov	r7, r2
   871c2:	f00a 0301 	and.w	r3, sl, #1
   871c6:	46c2      	mov	sl, r8
   871c8:	f8dd b020 	ldr.w	fp, [sp, #32]
   871cc:	930c      	str	r3, [sp, #48]	; 0x30
   871ce:	4651      	mov	r1, sl
   871d0:	4648      	mov	r0, r9
   871d2:	f7ff fca9 	bl	86b28 <quorem>
   871d6:	4631      	mov	r1, r6
   871d8:	4605      	mov	r5, r0
   871da:	4648      	mov	r0, r9
   871dc:	f001 f9ee 	bl	885bc <__mcmp>
   871e0:	465a      	mov	r2, fp
   871e2:	9007      	str	r0, [sp, #28]
   871e4:	4651      	mov	r1, sl
   871e6:	4620      	mov	r0, r4
   871e8:	f001 fa04 	bl	885f4 <__mdiff>
   871ec:	68c2      	ldr	r2, [r0, #12]
   871ee:	4680      	mov	r8, r0
   871f0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   871f4:	2a00      	cmp	r2, #0
   871f6:	f040 8229 	bne.w	8764c <_dtoa_r+0x9fc>
   871fa:	4601      	mov	r1, r0
   871fc:	4648      	mov	r0, r9
   871fe:	930a      	str	r3, [sp, #40]	; 0x28
   87200:	f001 f9dc 	bl	885bc <__mcmp>
   87204:	4641      	mov	r1, r8
   87206:	9008      	str	r0, [sp, #32]
   87208:	4620      	mov	r0, r4
   8720a:	f000 ffff 	bl	8820c <_Bfree>
   8720e:	9a08      	ldr	r2, [sp, #32]
   87210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87212:	b932      	cbnz	r2, 87222 <_dtoa_r+0x5d2>
   87214:	9924      	ldr	r1, [sp, #144]	; 0x90
   87216:	b921      	cbnz	r1, 87222 <_dtoa_r+0x5d2>
   87218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8721a:	2a00      	cmp	r2, #0
   8721c:	f000 83ee 	beq.w	879fc <_dtoa_r+0xdac>
   87220:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87222:	9907      	ldr	r1, [sp, #28]
   87224:	2900      	cmp	r1, #0
   87226:	f2c0 829f 	blt.w	87768 <_dtoa_r+0xb18>
   8722a:	d105      	bne.n	87238 <_dtoa_r+0x5e8>
   8722c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8722e:	b919      	cbnz	r1, 87238 <_dtoa_r+0x5e8>
   87230:	990c      	ldr	r1, [sp, #48]	; 0x30
   87232:	2900      	cmp	r1, #0
   87234:	f000 8298 	beq.w	87768 <_dtoa_r+0xb18>
   87238:	2a00      	cmp	r2, #0
   8723a:	f300 8305 	bgt.w	87848 <_dtoa_r+0xbf8>
   8723e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87240:	f107 0801 	add.w	r8, r7, #1
   87244:	4297      	cmp	r7, r2
   87246:	703b      	strb	r3, [r7, #0]
   87248:	4645      	mov	r5, r8
   8724a:	f000 830b 	beq.w	87864 <_dtoa_r+0xc14>
   8724e:	4649      	mov	r1, r9
   87250:	2300      	movs	r3, #0
   87252:	220a      	movs	r2, #10
   87254:	4620      	mov	r0, r4
   87256:	f000 ffe3 	bl	88220 <__multadd>
   8725a:	455e      	cmp	r6, fp
   8725c:	4681      	mov	r9, r0
   8725e:	4631      	mov	r1, r6
   87260:	f04f 0300 	mov.w	r3, #0
   87264:	f04f 020a 	mov.w	r2, #10
   87268:	4620      	mov	r0, r4
   8726a:	f000 81e9 	beq.w	87640 <_dtoa_r+0x9f0>
   8726e:	f000 ffd7 	bl	88220 <__multadd>
   87272:	4659      	mov	r1, fp
   87274:	4606      	mov	r6, r0
   87276:	2300      	movs	r3, #0
   87278:	220a      	movs	r2, #10
   8727a:	4620      	mov	r0, r4
   8727c:	f000 ffd0 	bl	88220 <__multadd>
   87280:	4647      	mov	r7, r8
   87282:	4683      	mov	fp, r0
   87284:	e7a3      	b.n	871ce <_dtoa_r+0x57e>
   87286:	201c      	movs	r0, #28
   87288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8728a:	4405      	add	r5, r0
   8728c:	4403      	add	r3, r0
   8728e:	930a      	str	r3, [sp, #40]	; 0x28
   87290:	9b08      	ldr	r3, [sp, #32]
   87292:	4403      	add	r3, r0
   87294:	9308      	str	r3, [sp, #32]
   87296:	e763      	b.n	87160 <_dtoa_r+0x510>
   87298:	4641      	mov	r1, r8
   8729a:	4648      	mov	r0, r9
   8729c:	f001 f98e 	bl	885bc <__mcmp>
   872a0:	2800      	cmp	r0, #0
   872a2:	f6bf af73 	bge.w	8718c <_dtoa_r+0x53c>
   872a6:	9f02      	ldr	r7, [sp, #8]
   872a8:	4649      	mov	r1, r9
   872aa:	2300      	movs	r3, #0
   872ac:	220a      	movs	r2, #10
   872ae:	4620      	mov	r0, r4
   872b0:	3f01      	subs	r7, #1
   872b2:	9702      	str	r7, [sp, #8]
   872b4:	f000 ffb4 	bl	88220 <__multadd>
   872b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   872ba:	4681      	mov	r9, r0
   872bc:	2b00      	cmp	r3, #0
   872be:	f040 83b5 	bne.w	87a2c <_dtoa_r+0xddc>
   872c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   872c4:	2b00      	cmp	r3, #0
   872c6:	f340 83be 	ble.w	87a46 <_dtoa_r+0xdf6>
   872ca:	9307      	str	r3, [sp, #28]
   872cc:	f8dd a010 	ldr.w	sl, [sp, #16]
   872d0:	9f07      	ldr	r7, [sp, #28]
   872d2:	4655      	mov	r5, sl
   872d4:	e006      	b.n	872e4 <_dtoa_r+0x694>
   872d6:	4649      	mov	r1, r9
   872d8:	2300      	movs	r3, #0
   872da:	220a      	movs	r2, #10
   872dc:	4620      	mov	r0, r4
   872de:	f000 ff9f 	bl	88220 <__multadd>
   872e2:	4681      	mov	r9, r0
   872e4:	4641      	mov	r1, r8
   872e6:	4648      	mov	r0, r9
   872e8:	f7ff fc1e 	bl	86b28 <quorem>
   872ec:	3030      	adds	r0, #48	; 0x30
   872ee:	f805 0b01 	strb.w	r0, [r5], #1
   872f2:	eba5 030a 	sub.w	r3, r5, sl
   872f6:	42bb      	cmp	r3, r7
   872f8:	dbed      	blt.n	872d6 <_dtoa_r+0x686>
   872fa:	9b04      	ldr	r3, [sp, #16]
   872fc:	9a07      	ldr	r2, [sp, #28]
   872fe:	4682      	mov	sl, r0
   87300:	2a01      	cmp	r2, #1
   87302:	bfac      	ite	ge
   87304:	189b      	addge	r3, r3, r2
   87306:	3301      	addlt	r3, #1
   87308:	f04f 0b00 	mov.w	fp, #0
   8730c:	461d      	mov	r5, r3
   8730e:	4649      	mov	r1, r9
   87310:	2201      	movs	r2, #1
   87312:	4620      	mov	r0, r4
   87314:	f001 f902 	bl	8851c <__lshift>
   87318:	4641      	mov	r1, r8
   8731a:	4681      	mov	r9, r0
   8731c:	f001 f94e 	bl	885bc <__mcmp>
   87320:	2800      	cmp	r0, #0
   87322:	f340 823f 	ble.w	877a4 <_dtoa_r+0xb54>
   87326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8732a:	1e6b      	subs	r3, r5, #1
   8732c:	9904      	ldr	r1, [sp, #16]
   8732e:	e004      	b.n	8733a <_dtoa_r+0x6ea>
   87330:	428b      	cmp	r3, r1
   87332:	f000 81ae 	beq.w	87692 <_dtoa_r+0xa42>
   87336:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8733a:	2a39      	cmp	r2, #57	; 0x39
   8733c:	f103 0501 	add.w	r5, r3, #1
   87340:	d0f6      	beq.n	87330 <_dtoa_r+0x6e0>
   87342:	3201      	adds	r2, #1
   87344:	701a      	strb	r2, [r3, #0]
   87346:	4641      	mov	r1, r8
   87348:	4620      	mov	r0, r4
   8734a:	f000 ff5f 	bl	8820c <_Bfree>
   8734e:	2e00      	cmp	r6, #0
   87350:	f43f ae3d 	beq.w	86fce <_dtoa_r+0x37e>
   87354:	f1bb 0f00 	cmp.w	fp, #0
   87358:	d005      	beq.n	87366 <_dtoa_r+0x716>
   8735a:	45b3      	cmp	fp, r6
   8735c:	d003      	beq.n	87366 <_dtoa_r+0x716>
   8735e:	4659      	mov	r1, fp
   87360:	4620      	mov	r0, r4
   87362:	f000 ff53 	bl	8820c <_Bfree>
   87366:	4631      	mov	r1, r6
   87368:	4620      	mov	r0, r4
   8736a:	f000 ff4f 	bl	8820c <_Bfree>
   8736e:	e62e      	b.n	86fce <_dtoa_r+0x37e>
   87370:	2300      	movs	r3, #0
   87372:	930b      	str	r3, [sp, #44]	; 0x2c
   87374:	9b02      	ldr	r3, [sp, #8]
   87376:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87378:	4413      	add	r3, r2
   8737a:	930f      	str	r3, [sp, #60]	; 0x3c
   8737c:	3301      	adds	r3, #1
   8737e:	2b01      	cmp	r3, #1
   87380:	461f      	mov	r7, r3
   87382:	461e      	mov	r6, r3
   87384:	bfb8      	it	lt
   87386:	2701      	movlt	r7, #1
   87388:	9307      	str	r3, [sp, #28]
   8738a:	2100      	movs	r1, #0
   8738c:	2f17      	cmp	r7, #23
   8738e:	6461      	str	r1, [r4, #68]	; 0x44
   87390:	d90a      	bls.n	873a8 <_dtoa_r+0x758>
   87392:	2201      	movs	r2, #1
   87394:	2304      	movs	r3, #4
   87396:	005b      	lsls	r3, r3, #1
   87398:	f103 0014 	add.w	r0, r3, #20
   8739c:	4287      	cmp	r7, r0
   8739e:	4611      	mov	r1, r2
   873a0:	f102 0201 	add.w	r2, r2, #1
   873a4:	d2f7      	bcs.n	87396 <_dtoa_r+0x746>
   873a6:	6461      	str	r1, [r4, #68]	; 0x44
   873a8:	4620      	mov	r0, r4
   873aa:	f000 ff09 	bl	881c0 <_Balloc>
   873ae:	2e0e      	cmp	r6, #14
   873b0:	9004      	str	r0, [sp, #16]
   873b2:	6420      	str	r0, [r4, #64]	; 0x40
   873b4:	f63f ad47 	bhi.w	86e46 <_dtoa_r+0x1f6>
   873b8:	2d00      	cmp	r5, #0
   873ba:	f43f ad44 	beq.w	86e46 <_dtoa_r+0x1f6>
   873be:	9902      	ldr	r1, [sp, #8]
   873c0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   873c4:	2900      	cmp	r1, #0
   873c6:	f340 8203 	ble.w	877d0 <_dtoa_r+0xb80>
   873ca:	4bb9      	ldr	r3, [pc, #740]	; (876b0 <_dtoa_r+0xa60>)
   873cc:	f001 020f 	and.w	r2, r1, #15
   873d0:	110d      	asrs	r5, r1, #4
   873d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   873d6:	06e9      	lsls	r1, r5, #27
   873d8:	e9d3 6700 	ldrd	r6, r7, [r3]
   873dc:	f140 81af 	bpl.w	8773e <_dtoa_r+0xaee>
   873e0:	4bb4      	ldr	r3, [pc, #720]	; (876b4 <_dtoa_r+0xa64>)
   873e2:	4650      	mov	r0, sl
   873e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   873e8:	4659      	mov	r1, fp
   873ea:	f7fd fc61 	bl	84cb0 <__aeabi_ddiv>
   873ee:	f04f 0a03 	mov.w	sl, #3
   873f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   873f6:	f005 050f 	and.w	r5, r5, #15
   873fa:	b18d      	cbz	r5, 87420 <_dtoa_r+0x7d0>
   873fc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 876b4 <_dtoa_r+0xa64>
   87400:	07ea      	lsls	r2, r5, #31
   87402:	d509      	bpl.n	87418 <_dtoa_r+0x7c8>
   87404:	e9d8 2300 	ldrd	r2, r3, [r8]
   87408:	4630      	mov	r0, r6
   8740a:	4639      	mov	r1, r7
   8740c:	f7fd fb26 	bl	84a5c <__aeabi_dmul>
   87410:	4606      	mov	r6, r0
   87412:	460f      	mov	r7, r1
   87414:	f10a 0a01 	add.w	sl, sl, #1
   87418:	106d      	asrs	r5, r5, #1
   8741a:	f108 0808 	add.w	r8, r8, #8
   8741e:	d1ef      	bne.n	87400 <_dtoa_r+0x7b0>
   87420:	463b      	mov	r3, r7
   87422:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87426:	4632      	mov	r2, r6
   87428:	f7fd fc42 	bl	84cb0 <__aeabi_ddiv>
   8742c:	4607      	mov	r7, r0
   8742e:	4688      	mov	r8, r1
   87430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87432:	b143      	cbz	r3, 87446 <_dtoa_r+0x7f6>
   87434:	2200      	movs	r2, #0
   87436:	4ba0      	ldr	r3, [pc, #640]	; (876b8 <_dtoa_r+0xa68>)
   87438:	4638      	mov	r0, r7
   8743a:	4641      	mov	r1, r8
   8743c:	f001 feb0 	bl	891a0 <__aeabi_dcmplt>
   87440:	2800      	cmp	r0, #0
   87442:	f040 8287 	bne.w	87954 <_dtoa_r+0xd04>
   87446:	4650      	mov	r0, sl
   87448:	f7fd faa2 	bl	84990 <__aeabi_i2d>
   8744c:	463a      	mov	r2, r7
   8744e:	4643      	mov	r3, r8
   87450:	f7fd fb04 	bl	84a5c <__aeabi_dmul>
   87454:	4b99      	ldr	r3, [pc, #612]	; (876bc <_dtoa_r+0xa6c>)
   87456:	2200      	movs	r2, #0
   87458:	f7fd f94e 	bl	846f8 <__adddf3>
   8745c:	9b07      	ldr	r3, [sp, #28]
   8745e:	4605      	mov	r5, r0
   87460:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87464:	2b00      	cmp	r3, #0
   87466:	f000 813f 	beq.w	876e8 <_dtoa_r+0xa98>
   8746a:	9b02      	ldr	r3, [sp, #8]
   8746c:	9315      	str	r3, [sp, #84]	; 0x54
   8746e:	9b07      	ldr	r3, [sp, #28]
   87470:	9312      	str	r3, [sp, #72]	; 0x48
   87472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87474:	2b00      	cmp	r3, #0
   87476:	f000 81fb 	beq.w	87870 <_dtoa_r+0xc20>
   8747a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8747c:	4b8c      	ldr	r3, [pc, #560]	; (876b0 <_dtoa_r+0xa60>)
   8747e:	2000      	movs	r0, #0
   87480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87484:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87488:	498d      	ldr	r1, [pc, #564]	; (876c0 <_dtoa_r+0xa70>)
   8748a:	f7fd fc11 	bl	84cb0 <__aeabi_ddiv>
   8748e:	462a      	mov	r2, r5
   87490:	4633      	mov	r3, r6
   87492:	f7fd f92f 	bl	846f4 <__aeabi_dsub>
   87496:	4682      	mov	sl, r0
   87498:	468b      	mov	fp, r1
   8749a:	4638      	mov	r0, r7
   8749c:	4641      	mov	r1, r8
   8749e:	f001 febd 	bl	8921c <__aeabi_d2iz>
   874a2:	4605      	mov	r5, r0
   874a4:	f7fd fa74 	bl	84990 <__aeabi_i2d>
   874a8:	4602      	mov	r2, r0
   874aa:	460b      	mov	r3, r1
   874ac:	4638      	mov	r0, r7
   874ae:	4641      	mov	r1, r8
   874b0:	f7fd f920 	bl	846f4 <__aeabi_dsub>
   874b4:	3530      	adds	r5, #48	; 0x30
   874b6:	fa5f f885 	uxtb.w	r8, r5
   874ba:	9d04      	ldr	r5, [sp, #16]
   874bc:	4606      	mov	r6, r0
   874be:	460f      	mov	r7, r1
   874c0:	f885 8000 	strb.w	r8, [r5]
   874c4:	4602      	mov	r2, r0
   874c6:	460b      	mov	r3, r1
   874c8:	4650      	mov	r0, sl
   874ca:	4659      	mov	r1, fp
   874cc:	3501      	adds	r5, #1
   874ce:	f001 fe85 	bl	891dc <__aeabi_dcmpgt>
   874d2:	2800      	cmp	r0, #0
   874d4:	d154      	bne.n	87580 <_dtoa_r+0x930>
   874d6:	4632      	mov	r2, r6
   874d8:	463b      	mov	r3, r7
   874da:	2000      	movs	r0, #0
   874dc:	4976      	ldr	r1, [pc, #472]	; (876b8 <_dtoa_r+0xa68>)
   874de:	f7fd f909 	bl	846f4 <__aeabi_dsub>
   874e2:	4602      	mov	r2, r0
   874e4:	460b      	mov	r3, r1
   874e6:	4650      	mov	r0, sl
   874e8:	4659      	mov	r1, fp
   874ea:	f001 fe77 	bl	891dc <__aeabi_dcmpgt>
   874ee:	2800      	cmp	r0, #0
   874f0:	f040 8270 	bne.w	879d4 <_dtoa_r+0xd84>
   874f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   874f6:	2a01      	cmp	r2, #1
   874f8:	f000 8112 	beq.w	87720 <_dtoa_r+0xad0>
   874fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   874fe:	9a04      	ldr	r2, [sp, #16]
   87500:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87504:	4413      	add	r3, r2
   87506:	4699      	mov	r9, r3
   87508:	e00f      	b.n	8752a <_dtoa_r+0x8da>
   8750a:	4632      	mov	r2, r6
   8750c:	463b      	mov	r3, r7
   8750e:	2000      	movs	r0, #0
   87510:	4969      	ldr	r1, [pc, #420]	; (876b8 <_dtoa_r+0xa68>)
   87512:	f7fd f8ef 	bl	846f4 <__aeabi_dsub>
   87516:	4652      	mov	r2, sl
   87518:	465b      	mov	r3, fp
   8751a:	f001 fe41 	bl	891a0 <__aeabi_dcmplt>
   8751e:	2800      	cmp	r0, #0
   87520:	f040 8256 	bne.w	879d0 <_dtoa_r+0xd80>
   87524:	454d      	cmp	r5, r9
   87526:	f000 80f9 	beq.w	8771c <_dtoa_r+0xacc>
   8752a:	4650      	mov	r0, sl
   8752c:	4659      	mov	r1, fp
   8752e:	2200      	movs	r2, #0
   87530:	4b64      	ldr	r3, [pc, #400]	; (876c4 <_dtoa_r+0xa74>)
   87532:	f7fd fa93 	bl	84a5c <__aeabi_dmul>
   87536:	2200      	movs	r2, #0
   87538:	4b62      	ldr	r3, [pc, #392]	; (876c4 <_dtoa_r+0xa74>)
   8753a:	4682      	mov	sl, r0
   8753c:	468b      	mov	fp, r1
   8753e:	4630      	mov	r0, r6
   87540:	4639      	mov	r1, r7
   87542:	f7fd fa8b 	bl	84a5c <__aeabi_dmul>
   87546:	460f      	mov	r7, r1
   87548:	4606      	mov	r6, r0
   8754a:	f001 fe67 	bl	8921c <__aeabi_d2iz>
   8754e:	4680      	mov	r8, r0
   87550:	f7fd fa1e 	bl	84990 <__aeabi_i2d>
   87554:	4602      	mov	r2, r0
   87556:	460b      	mov	r3, r1
   87558:	4630      	mov	r0, r6
   8755a:	4639      	mov	r1, r7
   8755c:	f7fd f8ca 	bl	846f4 <__aeabi_dsub>
   87560:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87564:	fa5f f888 	uxtb.w	r8, r8
   87568:	f805 8b01 	strb.w	r8, [r5], #1
   8756c:	4652      	mov	r2, sl
   8756e:	465b      	mov	r3, fp
   87570:	4606      	mov	r6, r0
   87572:	460f      	mov	r7, r1
   87574:	f001 fe14 	bl	891a0 <__aeabi_dcmplt>
   87578:	2800      	cmp	r0, #0
   8757a:	d0c6      	beq.n	8750a <_dtoa_r+0x8ba>
   8757c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87580:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87582:	9302      	str	r3, [sp, #8]
   87584:	e523      	b.n	86fce <_dtoa_r+0x37e>
   87586:	2300      	movs	r3, #0
   87588:	930b      	str	r3, [sp, #44]	; 0x2c
   8758a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8758c:	2b00      	cmp	r3, #0
   8758e:	f340 80dd 	ble.w	8774c <_dtoa_r+0xafc>
   87592:	461f      	mov	r7, r3
   87594:	461e      	mov	r6, r3
   87596:	930f      	str	r3, [sp, #60]	; 0x3c
   87598:	9307      	str	r3, [sp, #28]
   8759a:	e6f6      	b.n	8738a <_dtoa_r+0x73a>
   8759c:	2301      	movs	r3, #1
   8759e:	930b      	str	r3, [sp, #44]	; 0x2c
   875a0:	e7f3      	b.n	8758a <_dtoa_r+0x93a>
   875a2:	f1ba 0f00 	cmp.w	sl, #0
   875a6:	f47f ada7 	bne.w	870f8 <_dtoa_r+0x4a8>
   875aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   875ae:	2b00      	cmp	r3, #0
   875b0:	f47f adbc 	bne.w	8712c <_dtoa_r+0x4dc>
   875b4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   875b8:	0d3f      	lsrs	r7, r7, #20
   875ba:	053f      	lsls	r7, r7, #20
   875bc:	2f00      	cmp	r7, #0
   875be:	f000 820d 	beq.w	879dc <_dtoa_r+0xd8c>
   875c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875c4:	3301      	adds	r3, #1
   875c6:	930a      	str	r3, [sp, #40]	; 0x28
   875c8:	9b08      	ldr	r3, [sp, #32]
   875ca:	3301      	adds	r3, #1
   875cc:	9308      	str	r3, [sp, #32]
   875ce:	2301      	movs	r3, #1
   875d0:	930c      	str	r3, [sp, #48]	; 0x30
   875d2:	e5ad      	b.n	87130 <_dtoa_r+0x4e0>
   875d4:	9b07      	ldr	r3, [sp, #28]
   875d6:	2b00      	cmp	r3, #0
   875d8:	f73f ac48 	bgt.w	86e6c <_dtoa_r+0x21c>
   875dc:	f040 8222 	bne.w	87a24 <_dtoa_r+0xdd4>
   875e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   875e4:	2200      	movs	r2, #0
   875e6:	4b38      	ldr	r3, [pc, #224]	; (876c8 <_dtoa_r+0xa78>)
   875e8:	f7fd fa38 	bl	84a5c <__aeabi_dmul>
   875ec:	4652      	mov	r2, sl
   875ee:	465b      	mov	r3, fp
   875f0:	f001 fdea 	bl	891c8 <__aeabi_dcmpge>
   875f4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   875f8:	4646      	mov	r6, r8
   875fa:	2800      	cmp	r0, #0
   875fc:	d041      	beq.n	87682 <_dtoa_r+0xa32>
   875fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87600:	9d04      	ldr	r5, [sp, #16]
   87602:	43db      	mvns	r3, r3
   87604:	9302      	str	r3, [sp, #8]
   87606:	4641      	mov	r1, r8
   87608:	4620      	mov	r0, r4
   8760a:	f000 fdff 	bl	8820c <_Bfree>
   8760e:	2e00      	cmp	r6, #0
   87610:	f43f acdd 	beq.w	86fce <_dtoa_r+0x37e>
   87614:	e6a7      	b.n	87366 <_dtoa_r+0x716>
   87616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87618:	4649      	mov	r1, r9
   8761a:	4620      	mov	r0, r4
   8761c:	f000 ff2e 	bl	8847c <__pow5mult>
   87620:	4681      	mov	r9, r0
   87622:	e557      	b.n	870d4 <_dtoa_r+0x484>
   87624:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87626:	2a00      	cmp	r2, #0
   87628:	f000 8188 	beq.w	8793c <_dtoa_r+0xcec>
   8762c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87630:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87632:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87634:	e4f2      	b.n	8701c <_dtoa_r+0x3cc>
   87636:	f1ba 0f00 	cmp.w	sl, #0
   8763a:	f47f ad77 	bne.w	8712c <_dtoa_r+0x4dc>
   8763e:	e7b4      	b.n	875aa <_dtoa_r+0x95a>
   87640:	f000 fdee 	bl	88220 <__multadd>
   87644:	4647      	mov	r7, r8
   87646:	4606      	mov	r6, r0
   87648:	4683      	mov	fp, r0
   8764a:	e5c0      	b.n	871ce <_dtoa_r+0x57e>
   8764c:	4601      	mov	r1, r0
   8764e:	4620      	mov	r0, r4
   87650:	9308      	str	r3, [sp, #32]
   87652:	f000 fddb 	bl	8820c <_Bfree>
   87656:	2201      	movs	r2, #1
   87658:	9b08      	ldr	r3, [sp, #32]
   8765a:	e5e2      	b.n	87222 <_dtoa_r+0x5d2>
   8765c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8765e:	2b02      	cmp	r3, #2
   87660:	f77f ad98 	ble.w	87194 <_dtoa_r+0x544>
   87664:	9b07      	ldr	r3, [sp, #28]
   87666:	2b00      	cmp	r3, #0
   87668:	d1c9      	bne.n	875fe <_dtoa_r+0x9ae>
   8766a:	4641      	mov	r1, r8
   8766c:	2205      	movs	r2, #5
   8766e:	4620      	mov	r0, r4
   87670:	f000 fdd6 	bl	88220 <__multadd>
   87674:	4601      	mov	r1, r0
   87676:	4680      	mov	r8, r0
   87678:	4648      	mov	r0, r9
   8767a:	f000 ff9f 	bl	885bc <__mcmp>
   8767e:	2800      	cmp	r0, #0
   87680:	ddbd      	ble.n	875fe <_dtoa_r+0x9ae>
   87682:	2331      	movs	r3, #49	; 0x31
   87684:	9a02      	ldr	r2, [sp, #8]
   87686:	9904      	ldr	r1, [sp, #16]
   87688:	3201      	adds	r2, #1
   8768a:	9202      	str	r2, [sp, #8]
   8768c:	700b      	strb	r3, [r1, #0]
   8768e:	1c4d      	adds	r5, r1, #1
   87690:	e7b9      	b.n	87606 <_dtoa_r+0x9b6>
   87692:	2331      	movs	r3, #49	; 0x31
   87694:	9a02      	ldr	r2, [sp, #8]
   87696:	3201      	adds	r2, #1
   87698:	9202      	str	r2, [sp, #8]
   8769a:	9a04      	ldr	r2, [sp, #16]
   8769c:	7013      	strb	r3, [r2, #0]
   8769e:	e652      	b.n	87346 <_dtoa_r+0x6f6>
   876a0:	2301      	movs	r3, #1
   876a2:	930b      	str	r3, [sp, #44]	; 0x2c
   876a4:	e666      	b.n	87374 <_dtoa_r+0x724>
   876a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   876aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   876ac:	e48f      	b.n	86fce <_dtoa_r+0x37e>
   876ae:	bf00      	nop
   876b0:	00089770 	.word	0x00089770
   876b4:	00089748 	.word	0x00089748
   876b8:	3ff00000 	.word	0x3ff00000
   876bc:	401c0000 	.word	0x401c0000
   876c0:	3fe00000 	.word	0x3fe00000
   876c4:	40240000 	.word	0x40240000
   876c8:	40140000 	.word	0x40140000
   876cc:	4650      	mov	r0, sl
   876ce:	f7fd f95f 	bl	84990 <__aeabi_i2d>
   876d2:	463a      	mov	r2, r7
   876d4:	4643      	mov	r3, r8
   876d6:	f7fd f9c1 	bl	84a5c <__aeabi_dmul>
   876da:	2200      	movs	r2, #0
   876dc:	4bc1      	ldr	r3, [pc, #772]	; (879e4 <_dtoa_r+0xd94>)
   876de:	f7fd f80b 	bl	846f8 <__adddf3>
   876e2:	4605      	mov	r5, r0
   876e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   876e8:	4641      	mov	r1, r8
   876ea:	2200      	movs	r2, #0
   876ec:	4bbe      	ldr	r3, [pc, #760]	; (879e8 <_dtoa_r+0xd98>)
   876ee:	4638      	mov	r0, r7
   876f0:	f7fd f800 	bl	846f4 <__aeabi_dsub>
   876f4:	462a      	mov	r2, r5
   876f6:	4633      	mov	r3, r6
   876f8:	4682      	mov	sl, r0
   876fa:	468b      	mov	fp, r1
   876fc:	f001 fd6e 	bl	891dc <__aeabi_dcmpgt>
   87700:	4680      	mov	r8, r0
   87702:	2800      	cmp	r0, #0
   87704:	f040 8110 	bne.w	87928 <_dtoa_r+0xcd8>
   87708:	462a      	mov	r2, r5
   8770a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8770e:	4650      	mov	r0, sl
   87710:	4659      	mov	r1, fp
   87712:	f001 fd45 	bl	891a0 <__aeabi_dcmplt>
   87716:	b118      	cbz	r0, 87720 <_dtoa_r+0xad0>
   87718:	4646      	mov	r6, r8
   8771a:	e770      	b.n	875fe <_dtoa_r+0x9ae>
   8771c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87720:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87724:	f7ff bb8f 	b.w	86e46 <_dtoa_r+0x1f6>
   87728:	9804      	ldr	r0, [sp, #16]
   8772a:	f7ff bac0 	b.w	86cae <_dtoa_r+0x5e>
   8772e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87732:	1afb      	subs	r3, r7, r3
   87734:	441a      	add	r2, r3
   87736:	970c      	str	r7, [sp, #48]	; 0x30
   87738:	920d      	str	r2, [sp, #52]	; 0x34
   8773a:	2700      	movs	r7, #0
   8773c:	e468      	b.n	87010 <_dtoa_r+0x3c0>
   8773e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87742:	f04f 0a02 	mov.w	sl, #2
   87746:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8774a:	e656      	b.n	873fa <_dtoa_r+0x7aa>
   8774c:	2100      	movs	r1, #0
   8774e:	2301      	movs	r3, #1
   87750:	4620      	mov	r0, r4
   87752:	6461      	str	r1, [r4, #68]	; 0x44
   87754:	9325      	str	r3, [sp, #148]	; 0x94
   87756:	f000 fd33 	bl	881c0 <_Balloc>
   8775a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8775c:	9004      	str	r0, [sp, #16]
   8775e:	9307      	str	r3, [sp, #28]
   87760:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87762:	6420      	str	r0, [r4, #64]	; 0x40
   87764:	930f      	str	r3, [sp, #60]	; 0x3c
   87766:	e627      	b.n	873b8 <_dtoa_r+0x768>
   87768:	2a00      	cmp	r2, #0
   8776a:	46d0      	mov	r8, sl
   8776c:	f8cd b020 	str.w	fp, [sp, #32]
   87770:	469a      	mov	sl, r3
   87772:	dd11      	ble.n	87798 <_dtoa_r+0xb48>
   87774:	4649      	mov	r1, r9
   87776:	2201      	movs	r2, #1
   87778:	4620      	mov	r0, r4
   8777a:	f000 fecf 	bl	8851c <__lshift>
   8777e:	4641      	mov	r1, r8
   87780:	4681      	mov	r9, r0
   87782:	f000 ff1b 	bl	885bc <__mcmp>
   87786:	2800      	cmp	r0, #0
   87788:	f340 8145 	ble.w	87a16 <_dtoa_r+0xdc6>
   8778c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87790:	f000 8105 	beq.w	8799e <_dtoa_r+0xd4e>
   87794:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   87798:	46b3      	mov	fp, r6
   8779a:	f887 a000 	strb.w	sl, [r7]
   8779e:	1c7d      	adds	r5, r7, #1
   877a0:	9e08      	ldr	r6, [sp, #32]
   877a2:	e5d0      	b.n	87346 <_dtoa_r+0x6f6>
   877a4:	d104      	bne.n	877b0 <_dtoa_r+0xb60>
   877a6:	f01a 0f01 	tst.w	sl, #1
   877aa:	d001      	beq.n	877b0 <_dtoa_r+0xb60>
   877ac:	e5bb      	b.n	87326 <_dtoa_r+0x6d6>
   877ae:	4615      	mov	r5, r2
   877b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   877b4:	1e6a      	subs	r2, r5, #1
   877b6:	2b30      	cmp	r3, #48	; 0x30
   877b8:	d0f9      	beq.n	877ae <_dtoa_r+0xb5e>
   877ba:	e5c4      	b.n	87346 <_dtoa_r+0x6f6>
   877bc:	2230      	movs	r2, #48	; 0x30
   877be:	9904      	ldr	r1, [sp, #16]
   877c0:	700a      	strb	r2, [r1, #0]
   877c2:	9a02      	ldr	r2, [sp, #8]
   877c4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   877c8:	3201      	adds	r2, #1
   877ca:	9202      	str	r2, [sp, #8]
   877cc:	f7ff bbfb 	b.w	86fc6 <_dtoa_r+0x376>
   877d0:	f000 80bb 	beq.w	8794a <_dtoa_r+0xcfa>
   877d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   877d8:	9b02      	ldr	r3, [sp, #8]
   877da:	f04f 0a02 	mov.w	sl, #2
   877de:	425d      	negs	r5, r3
   877e0:	4b82      	ldr	r3, [pc, #520]	; (879ec <_dtoa_r+0xd9c>)
   877e2:	f005 020f 	and.w	r2, r5, #15
   877e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   877ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   877ee:	f7fd f935 	bl	84a5c <__aeabi_dmul>
   877f2:	112d      	asrs	r5, r5, #4
   877f4:	4607      	mov	r7, r0
   877f6:	4688      	mov	r8, r1
   877f8:	f43f ae1a 	beq.w	87430 <_dtoa_r+0x7e0>
   877fc:	4e7c      	ldr	r6, [pc, #496]	; (879f0 <_dtoa_r+0xda0>)
   877fe:	07eb      	lsls	r3, r5, #31
   87800:	d509      	bpl.n	87816 <_dtoa_r+0xbc6>
   87802:	e9d6 2300 	ldrd	r2, r3, [r6]
   87806:	4638      	mov	r0, r7
   87808:	4641      	mov	r1, r8
   8780a:	f7fd f927 	bl	84a5c <__aeabi_dmul>
   8780e:	4607      	mov	r7, r0
   87810:	4688      	mov	r8, r1
   87812:	f10a 0a01 	add.w	sl, sl, #1
   87816:	106d      	asrs	r5, r5, #1
   87818:	f106 0608 	add.w	r6, r6, #8
   8781c:	d1ef      	bne.n	877fe <_dtoa_r+0xbae>
   8781e:	e607      	b.n	87430 <_dtoa_r+0x7e0>
   87820:	6871      	ldr	r1, [r6, #4]
   87822:	4620      	mov	r0, r4
   87824:	f000 fccc 	bl	881c0 <_Balloc>
   87828:	4605      	mov	r5, r0
   8782a:	6933      	ldr	r3, [r6, #16]
   8782c:	f106 010c 	add.w	r1, r6, #12
   87830:	3302      	adds	r3, #2
   87832:	009a      	lsls	r2, r3, #2
   87834:	300c      	adds	r0, #12
   87836:	f000 fc41 	bl	880bc <memcpy>
   8783a:	4629      	mov	r1, r5
   8783c:	2201      	movs	r2, #1
   8783e:	4620      	mov	r0, r4
   87840:	f000 fe6c 	bl	8851c <__lshift>
   87844:	9008      	str	r0, [sp, #32]
   87846:	e4b6      	b.n	871b6 <_dtoa_r+0x566>
   87848:	2b39      	cmp	r3, #57	; 0x39
   8784a:	f8cd b020 	str.w	fp, [sp, #32]
   8784e:	46d0      	mov	r8, sl
   87850:	f000 80a5 	beq.w	8799e <_dtoa_r+0xd4e>
   87854:	f103 0a01 	add.w	sl, r3, #1
   87858:	46b3      	mov	fp, r6
   8785a:	f887 a000 	strb.w	sl, [r7]
   8785e:	1c7d      	adds	r5, r7, #1
   87860:	9e08      	ldr	r6, [sp, #32]
   87862:	e570      	b.n	87346 <_dtoa_r+0x6f6>
   87864:	465a      	mov	r2, fp
   87866:	46d0      	mov	r8, sl
   87868:	46b3      	mov	fp, r6
   8786a:	469a      	mov	sl, r3
   8786c:	4616      	mov	r6, r2
   8786e:	e54e      	b.n	8730e <_dtoa_r+0x6be>
   87870:	9812      	ldr	r0, [sp, #72]	; 0x48
   87872:	495e      	ldr	r1, [pc, #376]	; (879ec <_dtoa_r+0xd9c>)
   87874:	462a      	mov	r2, r5
   87876:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8787a:	4633      	mov	r3, r6
   8787c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87880:	f7fd f8ec 	bl	84a5c <__aeabi_dmul>
   87884:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87888:	4638      	mov	r0, r7
   8788a:	4641      	mov	r1, r8
   8788c:	f001 fcc6 	bl	8921c <__aeabi_d2iz>
   87890:	4605      	mov	r5, r0
   87892:	f7fd f87d 	bl	84990 <__aeabi_i2d>
   87896:	4602      	mov	r2, r0
   87898:	460b      	mov	r3, r1
   8789a:	4638      	mov	r0, r7
   8789c:	4641      	mov	r1, r8
   8789e:	f7fc ff29 	bl	846f4 <__aeabi_dsub>
   878a2:	4606      	mov	r6, r0
   878a4:	9812      	ldr	r0, [sp, #72]	; 0x48
   878a6:	9a04      	ldr	r2, [sp, #16]
   878a8:	3530      	adds	r5, #48	; 0x30
   878aa:	2801      	cmp	r0, #1
   878ac:	7015      	strb	r5, [r2, #0]
   878ae:	460f      	mov	r7, r1
   878b0:	f102 0501 	add.w	r5, r2, #1
   878b4:	d026      	beq.n	87904 <_dtoa_r+0xcb4>
   878b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   878b8:	9a04      	ldr	r2, [sp, #16]
   878ba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   878be:	4413      	add	r3, r2
   878c0:	f04f 0a00 	mov.w	sl, #0
   878c4:	4699      	mov	r9, r3
   878c6:	f8df b130 	ldr.w	fp, [pc, #304]	; 879f8 <_dtoa_r+0xda8>
   878ca:	4652      	mov	r2, sl
   878cc:	465b      	mov	r3, fp
   878ce:	4630      	mov	r0, r6
   878d0:	4639      	mov	r1, r7
   878d2:	f7fd f8c3 	bl	84a5c <__aeabi_dmul>
   878d6:	460f      	mov	r7, r1
   878d8:	4606      	mov	r6, r0
   878da:	f001 fc9f 	bl	8921c <__aeabi_d2iz>
   878de:	4680      	mov	r8, r0
   878e0:	f7fd f856 	bl	84990 <__aeabi_i2d>
   878e4:	4602      	mov	r2, r0
   878e6:	460b      	mov	r3, r1
   878e8:	4630      	mov	r0, r6
   878ea:	4639      	mov	r1, r7
   878ec:	f7fc ff02 	bl	846f4 <__aeabi_dsub>
   878f0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   878f4:	f805 8b01 	strb.w	r8, [r5], #1
   878f8:	454d      	cmp	r5, r9
   878fa:	4606      	mov	r6, r0
   878fc:	460f      	mov	r7, r1
   878fe:	d1e4      	bne.n	878ca <_dtoa_r+0xc7a>
   87900:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87904:	2200      	movs	r2, #0
   87906:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8790a:	4b3a      	ldr	r3, [pc, #232]	; (879f4 <_dtoa_r+0xda4>)
   8790c:	f7fc fef4 	bl	846f8 <__adddf3>
   87910:	4632      	mov	r2, r6
   87912:	463b      	mov	r3, r7
   87914:	f001 fc44 	bl	891a0 <__aeabi_dcmplt>
   87918:	2800      	cmp	r0, #0
   8791a:	d046      	beq.n	879aa <_dtoa_r+0xd5a>
   8791c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8791e:	9302      	str	r3, [sp, #8]
   87920:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87924:	f7ff bb42 	b.w	86fac <_dtoa_r+0x35c>
   87928:	f04f 0800 	mov.w	r8, #0
   8792c:	4646      	mov	r6, r8
   8792e:	e6a8      	b.n	87682 <_dtoa_r+0xa32>
   87930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87932:	9a07      	ldr	r2, [sp, #28]
   87934:	1a9d      	subs	r5, r3, r2
   87936:	2300      	movs	r3, #0
   87938:	f7ff bb70 	b.w	8701c <_dtoa_r+0x3cc>
   8793c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8793e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87940:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87944:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87946:	f7ff bb69 	b.w	8701c <_dtoa_r+0x3cc>
   8794a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8794e:	f04f 0a02 	mov.w	sl, #2
   87952:	e56d      	b.n	87430 <_dtoa_r+0x7e0>
   87954:	9b07      	ldr	r3, [sp, #28]
   87956:	2b00      	cmp	r3, #0
   87958:	f43f aeb8 	beq.w	876cc <_dtoa_r+0xa7c>
   8795c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8795e:	2b00      	cmp	r3, #0
   87960:	f77f aede 	ble.w	87720 <_dtoa_r+0xad0>
   87964:	2200      	movs	r2, #0
   87966:	4b24      	ldr	r3, [pc, #144]	; (879f8 <_dtoa_r+0xda8>)
   87968:	4638      	mov	r0, r7
   8796a:	4641      	mov	r1, r8
   8796c:	f7fd f876 	bl	84a5c <__aeabi_dmul>
   87970:	4607      	mov	r7, r0
   87972:	4688      	mov	r8, r1
   87974:	f10a 0001 	add.w	r0, sl, #1
   87978:	f7fd f80a 	bl	84990 <__aeabi_i2d>
   8797c:	463a      	mov	r2, r7
   8797e:	4643      	mov	r3, r8
   87980:	f7fd f86c 	bl	84a5c <__aeabi_dmul>
   87984:	2200      	movs	r2, #0
   87986:	4b17      	ldr	r3, [pc, #92]	; (879e4 <_dtoa_r+0xd94>)
   87988:	f7fc feb6 	bl	846f8 <__adddf3>
   8798c:	9a02      	ldr	r2, [sp, #8]
   8798e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87990:	3a01      	subs	r2, #1
   87992:	4605      	mov	r5, r0
   87994:	9215      	str	r2, [sp, #84]	; 0x54
   87996:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8799a:	9312      	str	r3, [sp, #72]	; 0x48
   8799c:	e569      	b.n	87472 <_dtoa_r+0x822>
   8799e:	2239      	movs	r2, #57	; 0x39
   879a0:	46b3      	mov	fp, r6
   879a2:	703a      	strb	r2, [r7, #0]
   879a4:	9e08      	ldr	r6, [sp, #32]
   879a6:	1c7d      	adds	r5, r7, #1
   879a8:	e4bf      	b.n	8732a <_dtoa_r+0x6da>
   879aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   879ae:	2000      	movs	r0, #0
   879b0:	4910      	ldr	r1, [pc, #64]	; (879f4 <_dtoa_r+0xda4>)
   879b2:	f7fc fe9f 	bl	846f4 <__aeabi_dsub>
   879b6:	4632      	mov	r2, r6
   879b8:	463b      	mov	r3, r7
   879ba:	f001 fc0f 	bl	891dc <__aeabi_dcmpgt>
   879be:	b908      	cbnz	r0, 879c4 <_dtoa_r+0xd74>
   879c0:	e6ae      	b.n	87720 <_dtoa_r+0xad0>
   879c2:	4615      	mov	r5, r2
   879c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   879c8:	1e6a      	subs	r2, r5, #1
   879ca:	2b30      	cmp	r3, #48	; 0x30
   879cc:	d0f9      	beq.n	879c2 <_dtoa_r+0xd72>
   879ce:	e5d7      	b.n	87580 <_dtoa_r+0x930>
   879d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   879d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   879d6:	9302      	str	r3, [sp, #8]
   879d8:	f7ff bae8 	b.w	86fac <_dtoa_r+0x35c>
   879dc:	970c      	str	r7, [sp, #48]	; 0x30
   879de:	f7ff bba7 	b.w	87130 <_dtoa_r+0x4e0>
   879e2:	bf00      	nop
   879e4:	401c0000 	.word	0x401c0000
   879e8:	40140000 	.word	0x40140000
   879ec:	00089770 	.word	0x00089770
   879f0:	00089748 	.word	0x00089748
   879f4:	3fe00000 	.word	0x3fe00000
   879f8:	40240000 	.word	0x40240000
   879fc:	2b39      	cmp	r3, #57	; 0x39
   879fe:	f8cd b020 	str.w	fp, [sp, #32]
   87a02:	46d0      	mov	r8, sl
   87a04:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87a08:	469a      	mov	sl, r3
   87a0a:	d0c8      	beq.n	8799e <_dtoa_r+0xd4e>
   87a0c:	f1bb 0f00 	cmp.w	fp, #0
   87a10:	f73f aec0 	bgt.w	87794 <_dtoa_r+0xb44>
   87a14:	e6c0      	b.n	87798 <_dtoa_r+0xb48>
   87a16:	f47f aebf 	bne.w	87798 <_dtoa_r+0xb48>
   87a1a:	f01a 0f01 	tst.w	sl, #1
   87a1e:	f43f aebb 	beq.w	87798 <_dtoa_r+0xb48>
   87a22:	e6b3      	b.n	8778c <_dtoa_r+0xb3c>
   87a24:	f04f 0800 	mov.w	r8, #0
   87a28:	4646      	mov	r6, r8
   87a2a:	e5e8      	b.n	875fe <_dtoa_r+0x9ae>
   87a2c:	4631      	mov	r1, r6
   87a2e:	2300      	movs	r3, #0
   87a30:	220a      	movs	r2, #10
   87a32:	4620      	mov	r0, r4
   87a34:	f000 fbf4 	bl	88220 <__multadd>
   87a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a3a:	4606      	mov	r6, r0
   87a3c:	2b00      	cmp	r3, #0
   87a3e:	dd07      	ble.n	87a50 <_dtoa_r+0xe00>
   87a40:	9307      	str	r3, [sp, #28]
   87a42:	f7ff bbab 	b.w	8719c <_dtoa_r+0x54c>
   87a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a48:	2b02      	cmp	r3, #2
   87a4a:	dc1f      	bgt.n	87a8c <_dtoa_r+0xe3c>
   87a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a4e:	e43c      	b.n	872ca <_dtoa_r+0x67a>
   87a50:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a52:	2b02      	cmp	r3, #2
   87a54:	dc1a      	bgt.n	87a8c <_dtoa_r+0xe3c>
   87a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a58:	e7f2      	b.n	87a40 <_dtoa_r+0xdf0>
   87a5a:	f43f ab81 	beq.w	87160 <_dtoa_r+0x510>
   87a5e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87a62:	e411      	b.n	87288 <_dtoa_r+0x638>
   87a64:	2500      	movs	r5, #0
   87a66:	4620      	mov	r0, r4
   87a68:	6465      	str	r5, [r4, #68]	; 0x44
   87a6a:	4629      	mov	r1, r5
   87a6c:	f000 fba8 	bl	881c0 <_Balloc>
   87a70:	f04f 33ff 	mov.w	r3, #4294967295
   87a74:	9307      	str	r3, [sp, #28]
   87a76:	930f      	str	r3, [sp, #60]	; 0x3c
   87a78:	2301      	movs	r3, #1
   87a7a:	9004      	str	r0, [sp, #16]
   87a7c:	9525      	str	r5, [sp, #148]	; 0x94
   87a7e:	6420      	str	r0, [r4, #64]	; 0x40
   87a80:	930b      	str	r3, [sp, #44]	; 0x2c
   87a82:	f7ff b9e0 	b.w	86e46 <_dtoa_r+0x1f6>
   87a86:	2501      	movs	r5, #1
   87a88:	f7ff b9a8 	b.w	86ddc <_dtoa_r+0x18c>
   87a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a8e:	9307      	str	r3, [sp, #28]
   87a90:	e5e8      	b.n	87664 <_dtoa_r+0xa14>
   87a92:	bf00      	nop

00087a94 <__libc_fini_array>:
   87a94:	b538      	push	{r3, r4, r5, lr}
   87a96:	4c0a      	ldr	r4, [pc, #40]	; (87ac0 <__libc_fini_array+0x2c>)
   87a98:	4d0a      	ldr	r5, [pc, #40]	; (87ac4 <__libc_fini_array+0x30>)
   87a9a:	1b64      	subs	r4, r4, r5
   87a9c:	10a4      	asrs	r4, r4, #2
   87a9e:	d00a      	beq.n	87ab6 <__libc_fini_array+0x22>
   87aa0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87aa4:	3b01      	subs	r3, #1
   87aa6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   87aaa:	3c01      	subs	r4, #1
   87aac:	f855 3904 	ldr.w	r3, [r5], #-4
   87ab0:	4798      	blx	r3
   87ab2:	2c00      	cmp	r4, #0
   87ab4:	d1f9      	bne.n	87aaa <__libc_fini_array+0x16>
   87ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87aba:	f001 bf57 	b.w	8996c <_fini>
   87abe:	bf00      	nop
   87ac0:	0008997c 	.word	0x0008997c
   87ac4:	00089978 	.word	0x00089978

00087ac8 <_localeconv_r>:
   87ac8:	4a04      	ldr	r2, [pc, #16]	; (87adc <_localeconv_r+0x14>)
   87aca:	4b05      	ldr	r3, [pc, #20]	; (87ae0 <_localeconv_r+0x18>)
   87acc:	6812      	ldr	r2, [r2, #0]
   87ace:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87ad0:	2800      	cmp	r0, #0
   87ad2:	bf08      	it	eq
   87ad4:	4618      	moveq	r0, r3
   87ad6:	30f0      	adds	r0, #240	; 0xf0
   87ad8:	4770      	bx	lr
   87ada:	bf00      	nop
   87adc:	200701a4 	.word	0x200701a4
   87ae0:	200709e4 	.word	0x200709e4

00087ae4 <__retarget_lock_acquire_recursive>:
   87ae4:	4770      	bx	lr
   87ae6:	bf00      	nop

00087ae8 <__retarget_lock_release_recursive>:
   87ae8:	4770      	bx	lr
   87aea:	bf00      	nop

00087aec <_malloc_r>:
   87aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87af0:	f101 060b 	add.w	r6, r1, #11
   87af4:	2e16      	cmp	r6, #22
   87af6:	b083      	sub	sp, #12
   87af8:	4605      	mov	r5, r0
   87afa:	f240 809e 	bls.w	87c3a <_malloc_r+0x14e>
   87afe:	f036 0607 	bics.w	r6, r6, #7
   87b02:	f100 80bd 	bmi.w	87c80 <_malloc_r+0x194>
   87b06:	42b1      	cmp	r1, r6
   87b08:	f200 80ba 	bhi.w	87c80 <_malloc_r+0x194>
   87b0c:	f000 fb4c 	bl	881a8 <__malloc_lock>
   87b10:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   87b14:	f0c0 8285 	bcc.w	88022 <_malloc_r+0x536>
   87b18:	0a73      	lsrs	r3, r6, #9
   87b1a:	f000 80b8 	beq.w	87c8e <_malloc_r+0x1a2>
   87b1e:	2b04      	cmp	r3, #4
   87b20:	f200 816c 	bhi.w	87dfc <_malloc_r+0x310>
   87b24:	09b3      	lsrs	r3, r6, #6
   87b26:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87b2a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87b2e:	00c1      	lsls	r1, r0, #3
   87b30:	4fb8      	ldr	r7, [pc, #736]	; (87e14 <_malloc_r+0x328>)
   87b32:	4439      	add	r1, r7
   87b34:	684c      	ldr	r4, [r1, #4]
   87b36:	3908      	subs	r1, #8
   87b38:	42a1      	cmp	r1, r4
   87b3a:	d106      	bne.n	87b4a <_malloc_r+0x5e>
   87b3c:	e00c      	b.n	87b58 <_malloc_r+0x6c>
   87b3e:	2a00      	cmp	r2, #0
   87b40:	f280 80ab 	bge.w	87c9a <_malloc_r+0x1ae>
   87b44:	68e4      	ldr	r4, [r4, #12]
   87b46:	42a1      	cmp	r1, r4
   87b48:	d006      	beq.n	87b58 <_malloc_r+0x6c>
   87b4a:	6863      	ldr	r3, [r4, #4]
   87b4c:	f023 0303 	bic.w	r3, r3, #3
   87b50:	1b9a      	subs	r2, r3, r6
   87b52:	2a0f      	cmp	r2, #15
   87b54:	ddf3      	ble.n	87b3e <_malloc_r+0x52>
   87b56:	4670      	mov	r0, lr
   87b58:	693c      	ldr	r4, [r7, #16]
   87b5a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 87e28 <_malloc_r+0x33c>
   87b5e:	4574      	cmp	r4, lr
   87b60:	f000 819e 	beq.w	87ea0 <_malloc_r+0x3b4>
   87b64:	6863      	ldr	r3, [r4, #4]
   87b66:	f023 0303 	bic.w	r3, r3, #3
   87b6a:	1b9a      	subs	r2, r3, r6
   87b6c:	2a0f      	cmp	r2, #15
   87b6e:	f300 8183 	bgt.w	87e78 <_malloc_r+0x38c>
   87b72:	2a00      	cmp	r2, #0
   87b74:	f8c7 e014 	str.w	lr, [r7, #20]
   87b78:	f8c7 e010 	str.w	lr, [r7, #16]
   87b7c:	f280 8091 	bge.w	87ca2 <_malloc_r+0x1b6>
   87b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   87b84:	f080 8154 	bcs.w	87e30 <_malloc_r+0x344>
   87b88:	2201      	movs	r2, #1
   87b8a:	08db      	lsrs	r3, r3, #3
   87b8c:	6879      	ldr	r1, [r7, #4]
   87b8e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   87b92:	4413      	add	r3, r2
   87b94:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87b98:	fa02 f20c 	lsl.w	r2, r2, ip
   87b9c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87ba0:	430a      	orrs	r2, r1
   87ba2:	f1ac 0108 	sub.w	r1, ip, #8
   87ba6:	60e1      	str	r1, [r4, #12]
   87ba8:	f8c4 8008 	str.w	r8, [r4, #8]
   87bac:	607a      	str	r2, [r7, #4]
   87bae:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87bb2:	f8c8 400c 	str.w	r4, [r8, #12]
   87bb6:	2401      	movs	r4, #1
   87bb8:	1083      	asrs	r3, r0, #2
   87bba:	409c      	lsls	r4, r3
   87bbc:	4294      	cmp	r4, r2
   87bbe:	d87d      	bhi.n	87cbc <_malloc_r+0x1d0>
   87bc0:	4214      	tst	r4, r2
   87bc2:	d106      	bne.n	87bd2 <_malloc_r+0xe6>
   87bc4:	f020 0003 	bic.w	r0, r0, #3
   87bc8:	0064      	lsls	r4, r4, #1
   87bca:	4214      	tst	r4, r2
   87bcc:	f100 0004 	add.w	r0, r0, #4
   87bd0:	d0fa      	beq.n	87bc8 <_malloc_r+0xdc>
   87bd2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   87bd6:	46cc      	mov	ip, r9
   87bd8:	4680      	mov	r8, r0
   87bda:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87bde:	459c      	cmp	ip, r3
   87be0:	d107      	bne.n	87bf2 <_malloc_r+0x106>
   87be2:	e15f      	b.n	87ea4 <_malloc_r+0x3b8>
   87be4:	2a00      	cmp	r2, #0
   87be6:	f280 816d 	bge.w	87ec4 <_malloc_r+0x3d8>
   87bea:	68db      	ldr	r3, [r3, #12]
   87bec:	459c      	cmp	ip, r3
   87bee:	f000 8159 	beq.w	87ea4 <_malloc_r+0x3b8>
   87bf2:	6859      	ldr	r1, [r3, #4]
   87bf4:	f021 0103 	bic.w	r1, r1, #3
   87bf8:	1b8a      	subs	r2, r1, r6
   87bfa:	2a0f      	cmp	r2, #15
   87bfc:	ddf2      	ble.n	87be4 <_malloc_r+0xf8>
   87bfe:	68dc      	ldr	r4, [r3, #12]
   87c00:	f8d3 c008 	ldr.w	ip, [r3, #8]
   87c04:	f046 0801 	orr.w	r8, r6, #1
   87c08:	4628      	mov	r0, r5
   87c0a:	441e      	add	r6, r3
   87c0c:	f042 0501 	orr.w	r5, r2, #1
   87c10:	f8c3 8004 	str.w	r8, [r3, #4]
   87c14:	f8cc 400c 	str.w	r4, [ip, #12]
   87c18:	f8c4 c008 	str.w	ip, [r4, #8]
   87c1c:	617e      	str	r6, [r7, #20]
   87c1e:	613e      	str	r6, [r7, #16]
   87c20:	f8c6 e00c 	str.w	lr, [r6, #12]
   87c24:	f8c6 e008 	str.w	lr, [r6, #8]
   87c28:	6075      	str	r5, [r6, #4]
   87c2a:	505a      	str	r2, [r3, r1]
   87c2c:	9300      	str	r3, [sp, #0]
   87c2e:	f000 fac1 	bl	881b4 <__malloc_unlock>
   87c32:	9b00      	ldr	r3, [sp, #0]
   87c34:	f103 0408 	add.w	r4, r3, #8
   87c38:	e01e      	b.n	87c78 <_malloc_r+0x18c>
   87c3a:	2910      	cmp	r1, #16
   87c3c:	d820      	bhi.n	87c80 <_malloc_r+0x194>
   87c3e:	f000 fab3 	bl	881a8 <__malloc_lock>
   87c42:	2610      	movs	r6, #16
   87c44:	2318      	movs	r3, #24
   87c46:	2002      	movs	r0, #2
   87c48:	4f72      	ldr	r7, [pc, #456]	; (87e14 <_malloc_r+0x328>)
   87c4a:	443b      	add	r3, r7
   87c4c:	685c      	ldr	r4, [r3, #4]
   87c4e:	f1a3 0208 	sub.w	r2, r3, #8
   87c52:	4294      	cmp	r4, r2
   87c54:	f000 812f 	beq.w	87eb6 <_malloc_r+0x3ca>
   87c58:	6863      	ldr	r3, [r4, #4]
   87c5a:	68e1      	ldr	r1, [r4, #12]
   87c5c:	f023 0303 	bic.w	r3, r3, #3
   87c60:	4423      	add	r3, r4
   87c62:	685a      	ldr	r2, [r3, #4]
   87c64:	68a6      	ldr	r6, [r4, #8]
   87c66:	f042 0201 	orr.w	r2, r2, #1
   87c6a:	60f1      	str	r1, [r6, #12]
   87c6c:	4628      	mov	r0, r5
   87c6e:	608e      	str	r6, [r1, #8]
   87c70:	605a      	str	r2, [r3, #4]
   87c72:	f000 fa9f 	bl	881b4 <__malloc_unlock>
   87c76:	3408      	adds	r4, #8
   87c78:	4620      	mov	r0, r4
   87c7a:	b003      	add	sp, #12
   87c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c80:	2400      	movs	r4, #0
   87c82:	230c      	movs	r3, #12
   87c84:	4620      	mov	r0, r4
   87c86:	602b      	str	r3, [r5, #0]
   87c88:	b003      	add	sp, #12
   87c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c8e:	2040      	movs	r0, #64	; 0x40
   87c90:	f44f 7100 	mov.w	r1, #512	; 0x200
   87c94:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87c98:	e74a      	b.n	87b30 <_malloc_r+0x44>
   87c9a:	4423      	add	r3, r4
   87c9c:	685a      	ldr	r2, [r3, #4]
   87c9e:	68e1      	ldr	r1, [r4, #12]
   87ca0:	e7e0      	b.n	87c64 <_malloc_r+0x178>
   87ca2:	4423      	add	r3, r4
   87ca4:	685a      	ldr	r2, [r3, #4]
   87ca6:	4628      	mov	r0, r5
   87ca8:	f042 0201 	orr.w	r2, r2, #1
   87cac:	605a      	str	r2, [r3, #4]
   87cae:	3408      	adds	r4, #8
   87cb0:	f000 fa80 	bl	881b4 <__malloc_unlock>
   87cb4:	4620      	mov	r0, r4
   87cb6:	b003      	add	sp, #12
   87cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87cbc:	68bc      	ldr	r4, [r7, #8]
   87cbe:	6863      	ldr	r3, [r4, #4]
   87cc0:	f023 0803 	bic.w	r8, r3, #3
   87cc4:	45b0      	cmp	r8, r6
   87cc6:	d304      	bcc.n	87cd2 <_malloc_r+0x1e6>
   87cc8:	eba8 0306 	sub.w	r3, r8, r6
   87ccc:	2b0f      	cmp	r3, #15
   87cce:	f300 8085 	bgt.w	87ddc <_malloc_r+0x2f0>
   87cd2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 87e2c <_malloc_r+0x340>
   87cd6:	4b50      	ldr	r3, [pc, #320]	; (87e18 <_malloc_r+0x32c>)
   87cd8:	f8d9 2000 	ldr.w	r2, [r9]
   87cdc:	681b      	ldr	r3, [r3, #0]
   87cde:	3201      	adds	r2, #1
   87ce0:	4433      	add	r3, r6
   87ce2:	eb04 0a08 	add.w	sl, r4, r8
   87ce6:	f000 8154 	beq.w	87f92 <_malloc_r+0x4a6>
   87cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87cee:	330f      	adds	r3, #15
   87cf0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87cf4:	f02b 0b0f 	bic.w	fp, fp, #15
   87cf8:	4659      	mov	r1, fp
   87cfa:	4628      	mov	r0, r5
   87cfc:	f000 fd5c 	bl	887b8 <_sbrk_r>
   87d00:	1c41      	adds	r1, r0, #1
   87d02:	4602      	mov	r2, r0
   87d04:	f000 80fb 	beq.w	87efe <_malloc_r+0x412>
   87d08:	4582      	cmp	sl, r0
   87d0a:	f200 80f6 	bhi.w	87efa <_malloc_r+0x40e>
   87d0e:	4b43      	ldr	r3, [pc, #268]	; (87e1c <_malloc_r+0x330>)
   87d10:	6819      	ldr	r1, [r3, #0]
   87d12:	4459      	add	r1, fp
   87d14:	6019      	str	r1, [r3, #0]
   87d16:	f000 814c 	beq.w	87fb2 <_malloc_r+0x4c6>
   87d1a:	f8d9 0000 	ldr.w	r0, [r9]
   87d1e:	3001      	adds	r0, #1
   87d20:	bf1b      	ittet	ne
   87d22:	eba2 0a0a 	subne.w	sl, r2, sl
   87d26:	4451      	addne	r1, sl
   87d28:	f8c9 2000 	streq.w	r2, [r9]
   87d2c:	6019      	strne	r1, [r3, #0]
   87d2e:	f012 0107 	ands.w	r1, r2, #7
   87d32:	f000 8114 	beq.w	87f5e <_malloc_r+0x472>
   87d36:	f1c1 0008 	rsb	r0, r1, #8
   87d3a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87d3e:	4402      	add	r2, r0
   87d40:	3108      	adds	r1, #8
   87d42:	eb02 090b 	add.w	r9, r2, fp
   87d46:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87d4a:	eba1 0909 	sub.w	r9, r1, r9
   87d4e:	4649      	mov	r1, r9
   87d50:	4628      	mov	r0, r5
   87d52:	9301      	str	r3, [sp, #4]
   87d54:	9200      	str	r2, [sp, #0]
   87d56:	f000 fd2f 	bl	887b8 <_sbrk_r>
   87d5a:	1c43      	adds	r3, r0, #1
   87d5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87d60:	f000 8142 	beq.w	87fe8 <_malloc_r+0x4fc>
   87d64:	1a80      	subs	r0, r0, r2
   87d66:	4448      	add	r0, r9
   87d68:	f040 0001 	orr.w	r0, r0, #1
   87d6c:	6819      	ldr	r1, [r3, #0]
   87d6e:	42bc      	cmp	r4, r7
   87d70:	4449      	add	r1, r9
   87d72:	60ba      	str	r2, [r7, #8]
   87d74:	6019      	str	r1, [r3, #0]
   87d76:	6050      	str	r0, [r2, #4]
   87d78:	d017      	beq.n	87daa <_malloc_r+0x2be>
   87d7a:	f1b8 0f0f 	cmp.w	r8, #15
   87d7e:	f240 80fa 	bls.w	87f76 <_malloc_r+0x48a>
   87d82:	f04f 0c05 	mov.w	ip, #5
   87d86:	6862      	ldr	r2, [r4, #4]
   87d88:	f1a8 000c 	sub.w	r0, r8, #12
   87d8c:	f020 0007 	bic.w	r0, r0, #7
   87d90:	f002 0201 	and.w	r2, r2, #1
   87d94:	eb04 0e00 	add.w	lr, r4, r0
   87d98:	4302      	orrs	r2, r0
   87d9a:	280f      	cmp	r0, #15
   87d9c:	6062      	str	r2, [r4, #4]
   87d9e:	f8ce c004 	str.w	ip, [lr, #4]
   87da2:	f8ce c008 	str.w	ip, [lr, #8]
   87da6:	f200 8116 	bhi.w	87fd6 <_malloc_r+0x4ea>
   87daa:	4b1d      	ldr	r3, [pc, #116]	; (87e20 <_malloc_r+0x334>)
   87dac:	68bc      	ldr	r4, [r7, #8]
   87dae:	681a      	ldr	r2, [r3, #0]
   87db0:	4291      	cmp	r1, r2
   87db2:	bf88      	it	hi
   87db4:	6019      	strhi	r1, [r3, #0]
   87db6:	4b1b      	ldr	r3, [pc, #108]	; (87e24 <_malloc_r+0x338>)
   87db8:	681a      	ldr	r2, [r3, #0]
   87dba:	4291      	cmp	r1, r2
   87dbc:	6862      	ldr	r2, [r4, #4]
   87dbe:	bf88      	it	hi
   87dc0:	6019      	strhi	r1, [r3, #0]
   87dc2:	f022 0203 	bic.w	r2, r2, #3
   87dc6:	4296      	cmp	r6, r2
   87dc8:	eba2 0306 	sub.w	r3, r2, r6
   87dcc:	d801      	bhi.n	87dd2 <_malloc_r+0x2e6>
   87dce:	2b0f      	cmp	r3, #15
   87dd0:	dc04      	bgt.n	87ddc <_malloc_r+0x2f0>
   87dd2:	4628      	mov	r0, r5
   87dd4:	f000 f9ee 	bl	881b4 <__malloc_unlock>
   87dd8:	2400      	movs	r4, #0
   87dda:	e74d      	b.n	87c78 <_malloc_r+0x18c>
   87ddc:	f046 0201 	orr.w	r2, r6, #1
   87de0:	f043 0301 	orr.w	r3, r3, #1
   87de4:	4426      	add	r6, r4
   87de6:	6062      	str	r2, [r4, #4]
   87de8:	4628      	mov	r0, r5
   87dea:	60be      	str	r6, [r7, #8]
   87dec:	3408      	adds	r4, #8
   87dee:	6073      	str	r3, [r6, #4]
   87df0:	f000 f9e0 	bl	881b4 <__malloc_unlock>
   87df4:	4620      	mov	r0, r4
   87df6:	b003      	add	sp, #12
   87df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87dfc:	2b14      	cmp	r3, #20
   87dfe:	d970      	bls.n	87ee2 <_malloc_r+0x3f6>
   87e00:	2b54      	cmp	r3, #84	; 0x54
   87e02:	f200 80a2 	bhi.w	87f4a <_malloc_r+0x45e>
   87e06:	0b33      	lsrs	r3, r6, #12
   87e08:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   87e0c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   87e10:	00c1      	lsls	r1, r0, #3
   87e12:	e68d      	b.n	87b30 <_malloc_r+0x44>
   87e14:	200705d4 	.word	0x200705d4
   87e18:	20070e04 	.word	0x20070e04
   87e1c:	20070dd4 	.word	0x20070dd4
   87e20:	20070dfc 	.word	0x20070dfc
   87e24:	20070e00 	.word	0x20070e00
   87e28:	200705dc 	.word	0x200705dc
   87e2c:	200709dc 	.word	0x200709dc
   87e30:	0a5a      	lsrs	r2, r3, #9
   87e32:	2a04      	cmp	r2, #4
   87e34:	d95b      	bls.n	87eee <_malloc_r+0x402>
   87e36:	2a14      	cmp	r2, #20
   87e38:	f200 80ae 	bhi.w	87f98 <_malloc_r+0x4ac>
   87e3c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   87e40:	00c9      	lsls	r1, r1, #3
   87e42:	325b      	adds	r2, #91	; 0x5b
   87e44:	eb07 0c01 	add.w	ip, r7, r1
   87e48:	5879      	ldr	r1, [r7, r1]
   87e4a:	f1ac 0c08 	sub.w	ip, ip, #8
   87e4e:	458c      	cmp	ip, r1
   87e50:	f000 8088 	beq.w	87f64 <_malloc_r+0x478>
   87e54:	684a      	ldr	r2, [r1, #4]
   87e56:	f022 0203 	bic.w	r2, r2, #3
   87e5a:	4293      	cmp	r3, r2
   87e5c:	d273      	bcs.n	87f46 <_malloc_r+0x45a>
   87e5e:	6889      	ldr	r1, [r1, #8]
   87e60:	458c      	cmp	ip, r1
   87e62:	d1f7      	bne.n	87e54 <_malloc_r+0x368>
   87e64:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87e68:	687a      	ldr	r2, [r7, #4]
   87e6a:	60e3      	str	r3, [r4, #12]
   87e6c:	f8c4 c008 	str.w	ip, [r4, #8]
   87e70:	609c      	str	r4, [r3, #8]
   87e72:	f8cc 400c 	str.w	r4, [ip, #12]
   87e76:	e69e      	b.n	87bb6 <_malloc_r+0xca>
   87e78:	f046 0c01 	orr.w	ip, r6, #1
   87e7c:	f042 0101 	orr.w	r1, r2, #1
   87e80:	4426      	add	r6, r4
   87e82:	f8c4 c004 	str.w	ip, [r4, #4]
   87e86:	4628      	mov	r0, r5
   87e88:	617e      	str	r6, [r7, #20]
   87e8a:	613e      	str	r6, [r7, #16]
   87e8c:	f8c6 e00c 	str.w	lr, [r6, #12]
   87e90:	f8c6 e008 	str.w	lr, [r6, #8]
   87e94:	6071      	str	r1, [r6, #4]
   87e96:	50e2      	str	r2, [r4, r3]
   87e98:	f000 f98c 	bl	881b4 <__malloc_unlock>
   87e9c:	3408      	adds	r4, #8
   87e9e:	e6eb      	b.n	87c78 <_malloc_r+0x18c>
   87ea0:	687a      	ldr	r2, [r7, #4]
   87ea2:	e688      	b.n	87bb6 <_malloc_r+0xca>
   87ea4:	f108 0801 	add.w	r8, r8, #1
   87ea8:	f018 0f03 	tst.w	r8, #3
   87eac:	f10c 0c08 	add.w	ip, ip, #8
   87eb0:	f47f ae93 	bne.w	87bda <_malloc_r+0xee>
   87eb4:	e02d      	b.n	87f12 <_malloc_r+0x426>
   87eb6:	68dc      	ldr	r4, [r3, #12]
   87eb8:	42a3      	cmp	r3, r4
   87eba:	bf08      	it	eq
   87ebc:	3002      	addeq	r0, #2
   87ebe:	f43f ae4b 	beq.w	87b58 <_malloc_r+0x6c>
   87ec2:	e6c9      	b.n	87c58 <_malloc_r+0x16c>
   87ec4:	461c      	mov	r4, r3
   87ec6:	4419      	add	r1, r3
   87ec8:	684a      	ldr	r2, [r1, #4]
   87eca:	68db      	ldr	r3, [r3, #12]
   87ecc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87ed0:	f042 0201 	orr.w	r2, r2, #1
   87ed4:	604a      	str	r2, [r1, #4]
   87ed6:	4628      	mov	r0, r5
   87ed8:	60f3      	str	r3, [r6, #12]
   87eda:	609e      	str	r6, [r3, #8]
   87edc:	f000 f96a 	bl	881b4 <__malloc_unlock>
   87ee0:	e6ca      	b.n	87c78 <_malloc_r+0x18c>
   87ee2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   87ee6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   87eea:	00c1      	lsls	r1, r0, #3
   87eec:	e620      	b.n	87b30 <_malloc_r+0x44>
   87eee:	099a      	lsrs	r2, r3, #6
   87ef0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   87ef4:	00c9      	lsls	r1, r1, #3
   87ef6:	3238      	adds	r2, #56	; 0x38
   87ef8:	e7a4      	b.n	87e44 <_malloc_r+0x358>
   87efa:	42bc      	cmp	r4, r7
   87efc:	d054      	beq.n	87fa8 <_malloc_r+0x4bc>
   87efe:	68bc      	ldr	r4, [r7, #8]
   87f00:	6862      	ldr	r2, [r4, #4]
   87f02:	f022 0203 	bic.w	r2, r2, #3
   87f06:	e75e      	b.n	87dc6 <_malloc_r+0x2da>
   87f08:	f859 3908 	ldr.w	r3, [r9], #-8
   87f0c:	4599      	cmp	r9, r3
   87f0e:	f040 8086 	bne.w	8801e <_malloc_r+0x532>
   87f12:	f010 0f03 	tst.w	r0, #3
   87f16:	f100 30ff 	add.w	r0, r0, #4294967295
   87f1a:	d1f5      	bne.n	87f08 <_malloc_r+0x41c>
   87f1c:	687b      	ldr	r3, [r7, #4]
   87f1e:	ea23 0304 	bic.w	r3, r3, r4
   87f22:	607b      	str	r3, [r7, #4]
   87f24:	0064      	lsls	r4, r4, #1
   87f26:	429c      	cmp	r4, r3
   87f28:	f63f aec8 	bhi.w	87cbc <_malloc_r+0x1d0>
   87f2c:	2c00      	cmp	r4, #0
   87f2e:	f43f aec5 	beq.w	87cbc <_malloc_r+0x1d0>
   87f32:	421c      	tst	r4, r3
   87f34:	4640      	mov	r0, r8
   87f36:	f47f ae4c 	bne.w	87bd2 <_malloc_r+0xe6>
   87f3a:	0064      	lsls	r4, r4, #1
   87f3c:	421c      	tst	r4, r3
   87f3e:	f100 0004 	add.w	r0, r0, #4
   87f42:	d0fa      	beq.n	87f3a <_malloc_r+0x44e>
   87f44:	e645      	b.n	87bd2 <_malloc_r+0xe6>
   87f46:	468c      	mov	ip, r1
   87f48:	e78c      	b.n	87e64 <_malloc_r+0x378>
   87f4a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87f4e:	d815      	bhi.n	87f7c <_malloc_r+0x490>
   87f50:	0bf3      	lsrs	r3, r6, #15
   87f52:	f103 0078 	add.w	r0, r3, #120	; 0x78
   87f56:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87f5a:	00c1      	lsls	r1, r0, #3
   87f5c:	e5e8      	b.n	87b30 <_malloc_r+0x44>
   87f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   87f62:	e6ee      	b.n	87d42 <_malloc_r+0x256>
   87f64:	2101      	movs	r1, #1
   87f66:	687b      	ldr	r3, [r7, #4]
   87f68:	1092      	asrs	r2, r2, #2
   87f6a:	fa01 f202 	lsl.w	r2, r1, r2
   87f6e:	431a      	orrs	r2, r3
   87f70:	607a      	str	r2, [r7, #4]
   87f72:	4663      	mov	r3, ip
   87f74:	e779      	b.n	87e6a <_malloc_r+0x37e>
   87f76:	2301      	movs	r3, #1
   87f78:	6053      	str	r3, [r2, #4]
   87f7a:	e72a      	b.n	87dd2 <_malloc_r+0x2e6>
   87f7c:	f240 5254 	movw	r2, #1364	; 0x554
   87f80:	4293      	cmp	r3, r2
   87f82:	d822      	bhi.n	87fca <_malloc_r+0x4de>
   87f84:	0cb3      	lsrs	r3, r6, #18
   87f86:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87f8a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87f8e:	00c1      	lsls	r1, r0, #3
   87f90:	e5ce      	b.n	87b30 <_malloc_r+0x44>
   87f92:	f103 0b10 	add.w	fp, r3, #16
   87f96:	e6af      	b.n	87cf8 <_malloc_r+0x20c>
   87f98:	2a54      	cmp	r2, #84	; 0x54
   87f9a:	d829      	bhi.n	87ff0 <_malloc_r+0x504>
   87f9c:	0b1a      	lsrs	r2, r3, #12
   87f9e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   87fa2:	00c9      	lsls	r1, r1, #3
   87fa4:	326e      	adds	r2, #110	; 0x6e
   87fa6:	e74d      	b.n	87e44 <_malloc_r+0x358>
   87fa8:	4b20      	ldr	r3, [pc, #128]	; (8802c <_malloc_r+0x540>)
   87faa:	6819      	ldr	r1, [r3, #0]
   87fac:	4459      	add	r1, fp
   87fae:	6019      	str	r1, [r3, #0]
   87fb0:	e6b3      	b.n	87d1a <_malloc_r+0x22e>
   87fb2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   87fb6:	2800      	cmp	r0, #0
   87fb8:	f47f aeaf 	bne.w	87d1a <_malloc_r+0x22e>
   87fbc:	eb08 030b 	add.w	r3, r8, fp
   87fc0:	68ba      	ldr	r2, [r7, #8]
   87fc2:	f043 0301 	orr.w	r3, r3, #1
   87fc6:	6053      	str	r3, [r2, #4]
   87fc8:	e6ef      	b.n	87daa <_malloc_r+0x2be>
   87fca:	207f      	movs	r0, #127	; 0x7f
   87fcc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87fd0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   87fd4:	e5ac      	b.n	87b30 <_malloc_r+0x44>
   87fd6:	f104 0108 	add.w	r1, r4, #8
   87fda:	4628      	mov	r0, r5
   87fdc:	9300      	str	r3, [sp, #0]
   87fde:	f000 fd5d 	bl	88a9c <_free_r>
   87fe2:	9b00      	ldr	r3, [sp, #0]
   87fe4:	6819      	ldr	r1, [r3, #0]
   87fe6:	e6e0      	b.n	87daa <_malloc_r+0x2be>
   87fe8:	2001      	movs	r0, #1
   87fea:	f04f 0900 	mov.w	r9, #0
   87fee:	e6bd      	b.n	87d6c <_malloc_r+0x280>
   87ff0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87ff4:	d805      	bhi.n	88002 <_malloc_r+0x516>
   87ff6:	0bda      	lsrs	r2, r3, #15
   87ff8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   87ffc:	00c9      	lsls	r1, r1, #3
   87ffe:	3277      	adds	r2, #119	; 0x77
   88000:	e720      	b.n	87e44 <_malloc_r+0x358>
   88002:	f240 5154 	movw	r1, #1364	; 0x554
   88006:	428a      	cmp	r2, r1
   88008:	d805      	bhi.n	88016 <_malloc_r+0x52a>
   8800a:	0c9a      	lsrs	r2, r3, #18
   8800c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88010:	00c9      	lsls	r1, r1, #3
   88012:	327c      	adds	r2, #124	; 0x7c
   88014:	e716      	b.n	87e44 <_malloc_r+0x358>
   88016:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8801a:	227e      	movs	r2, #126	; 0x7e
   8801c:	e712      	b.n	87e44 <_malloc_r+0x358>
   8801e:	687b      	ldr	r3, [r7, #4]
   88020:	e780      	b.n	87f24 <_malloc_r+0x438>
   88022:	08f0      	lsrs	r0, r6, #3
   88024:	f106 0308 	add.w	r3, r6, #8
   88028:	e60e      	b.n	87c48 <_malloc_r+0x15c>
   8802a:	bf00      	nop
   8802c:	20070dd4 	.word	0x20070dd4

00088030 <memchr>:
   88030:	0783      	lsls	r3, r0, #30
   88032:	b470      	push	{r4, r5, r6}
   88034:	b2cd      	uxtb	r5, r1
   88036:	d03d      	beq.n	880b4 <memchr+0x84>
   88038:	1e54      	subs	r4, r2, #1
   8803a:	b30a      	cbz	r2, 88080 <memchr+0x50>
   8803c:	7803      	ldrb	r3, [r0, #0]
   8803e:	42ab      	cmp	r3, r5
   88040:	d01f      	beq.n	88082 <memchr+0x52>
   88042:	1c43      	adds	r3, r0, #1
   88044:	e005      	b.n	88052 <memchr+0x22>
   88046:	f114 34ff 	adds.w	r4, r4, #4294967295
   8804a:	d319      	bcc.n	88080 <memchr+0x50>
   8804c:	7802      	ldrb	r2, [r0, #0]
   8804e:	42aa      	cmp	r2, r5
   88050:	d017      	beq.n	88082 <memchr+0x52>
   88052:	f013 0f03 	tst.w	r3, #3
   88056:	4618      	mov	r0, r3
   88058:	f103 0301 	add.w	r3, r3, #1
   8805c:	d1f3      	bne.n	88046 <memchr+0x16>
   8805e:	2c03      	cmp	r4, #3
   88060:	d811      	bhi.n	88086 <memchr+0x56>
   88062:	b34c      	cbz	r4, 880b8 <memchr+0x88>
   88064:	7803      	ldrb	r3, [r0, #0]
   88066:	42ab      	cmp	r3, r5
   88068:	d00b      	beq.n	88082 <memchr+0x52>
   8806a:	4404      	add	r4, r0
   8806c:	1c43      	adds	r3, r0, #1
   8806e:	e002      	b.n	88076 <memchr+0x46>
   88070:	7802      	ldrb	r2, [r0, #0]
   88072:	42aa      	cmp	r2, r5
   88074:	d005      	beq.n	88082 <memchr+0x52>
   88076:	429c      	cmp	r4, r3
   88078:	4618      	mov	r0, r3
   8807a:	f103 0301 	add.w	r3, r3, #1
   8807e:	d1f7      	bne.n	88070 <memchr+0x40>
   88080:	2000      	movs	r0, #0
   88082:	bc70      	pop	{r4, r5, r6}
   88084:	4770      	bx	lr
   88086:	0209      	lsls	r1, r1, #8
   88088:	b289      	uxth	r1, r1
   8808a:	4329      	orrs	r1, r5
   8808c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   88090:	6803      	ldr	r3, [r0, #0]
   88092:	4606      	mov	r6, r0
   88094:	404b      	eors	r3, r1
   88096:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8809a:	ea22 0303 	bic.w	r3, r2, r3
   8809e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   880a2:	f100 0004 	add.w	r0, r0, #4
   880a6:	d103      	bne.n	880b0 <memchr+0x80>
   880a8:	3c04      	subs	r4, #4
   880aa:	2c03      	cmp	r4, #3
   880ac:	d8f0      	bhi.n	88090 <memchr+0x60>
   880ae:	e7d8      	b.n	88062 <memchr+0x32>
   880b0:	4630      	mov	r0, r6
   880b2:	e7d7      	b.n	88064 <memchr+0x34>
   880b4:	4614      	mov	r4, r2
   880b6:	e7d2      	b.n	8805e <memchr+0x2e>
   880b8:	4620      	mov	r0, r4
   880ba:	e7e2      	b.n	88082 <memchr+0x52>

000880bc <memcpy>:
   880bc:	4684      	mov	ip, r0
   880be:	ea41 0300 	orr.w	r3, r1, r0
   880c2:	f013 0303 	ands.w	r3, r3, #3
   880c6:	d149      	bne.n	8815c <memcpy+0xa0>
   880c8:	3a40      	subs	r2, #64	; 0x40
   880ca:	d323      	bcc.n	88114 <memcpy+0x58>
   880cc:	680b      	ldr	r3, [r1, #0]
   880ce:	6003      	str	r3, [r0, #0]
   880d0:	684b      	ldr	r3, [r1, #4]
   880d2:	6043      	str	r3, [r0, #4]
   880d4:	688b      	ldr	r3, [r1, #8]
   880d6:	6083      	str	r3, [r0, #8]
   880d8:	68cb      	ldr	r3, [r1, #12]
   880da:	60c3      	str	r3, [r0, #12]
   880dc:	690b      	ldr	r3, [r1, #16]
   880de:	6103      	str	r3, [r0, #16]
   880e0:	694b      	ldr	r3, [r1, #20]
   880e2:	6143      	str	r3, [r0, #20]
   880e4:	698b      	ldr	r3, [r1, #24]
   880e6:	6183      	str	r3, [r0, #24]
   880e8:	69cb      	ldr	r3, [r1, #28]
   880ea:	61c3      	str	r3, [r0, #28]
   880ec:	6a0b      	ldr	r3, [r1, #32]
   880ee:	6203      	str	r3, [r0, #32]
   880f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   880f2:	6243      	str	r3, [r0, #36]	; 0x24
   880f4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   880f6:	6283      	str	r3, [r0, #40]	; 0x28
   880f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   880fa:	62c3      	str	r3, [r0, #44]	; 0x2c
   880fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   880fe:	6303      	str	r3, [r0, #48]	; 0x30
   88100:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   88102:	6343      	str	r3, [r0, #52]	; 0x34
   88104:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   88106:	6383      	str	r3, [r0, #56]	; 0x38
   88108:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8810a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8810c:	3040      	adds	r0, #64	; 0x40
   8810e:	3140      	adds	r1, #64	; 0x40
   88110:	3a40      	subs	r2, #64	; 0x40
   88112:	d2db      	bcs.n	880cc <memcpy+0x10>
   88114:	3230      	adds	r2, #48	; 0x30
   88116:	d30b      	bcc.n	88130 <memcpy+0x74>
   88118:	680b      	ldr	r3, [r1, #0]
   8811a:	6003      	str	r3, [r0, #0]
   8811c:	684b      	ldr	r3, [r1, #4]
   8811e:	6043      	str	r3, [r0, #4]
   88120:	688b      	ldr	r3, [r1, #8]
   88122:	6083      	str	r3, [r0, #8]
   88124:	68cb      	ldr	r3, [r1, #12]
   88126:	60c3      	str	r3, [r0, #12]
   88128:	3010      	adds	r0, #16
   8812a:	3110      	adds	r1, #16
   8812c:	3a10      	subs	r2, #16
   8812e:	d2f3      	bcs.n	88118 <memcpy+0x5c>
   88130:	320c      	adds	r2, #12
   88132:	d305      	bcc.n	88140 <memcpy+0x84>
   88134:	f851 3b04 	ldr.w	r3, [r1], #4
   88138:	f840 3b04 	str.w	r3, [r0], #4
   8813c:	3a04      	subs	r2, #4
   8813e:	d2f9      	bcs.n	88134 <memcpy+0x78>
   88140:	3204      	adds	r2, #4
   88142:	d008      	beq.n	88156 <memcpy+0x9a>
   88144:	07d2      	lsls	r2, r2, #31
   88146:	bf1c      	itt	ne
   88148:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8814c:	f800 3b01 	strbne.w	r3, [r0], #1
   88150:	d301      	bcc.n	88156 <memcpy+0x9a>
   88152:	880b      	ldrh	r3, [r1, #0]
   88154:	8003      	strh	r3, [r0, #0]
   88156:	4660      	mov	r0, ip
   88158:	4770      	bx	lr
   8815a:	bf00      	nop
   8815c:	2a08      	cmp	r2, #8
   8815e:	d313      	bcc.n	88188 <memcpy+0xcc>
   88160:	078b      	lsls	r3, r1, #30
   88162:	d0b1      	beq.n	880c8 <memcpy+0xc>
   88164:	f010 0303 	ands.w	r3, r0, #3
   88168:	d0ae      	beq.n	880c8 <memcpy+0xc>
   8816a:	f1c3 0304 	rsb	r3, r3, #4
   8816e:	1ad2      	subs	r2, r2, r3
   88170:	07db      	lsls	r3, r3, #31
   88172:	bf1c      	itt	ne
   88174:	f811 3b01 	ldrbne.w	r3, [r1], #1
   88178:	f800 3b01 	strbne.w	r3, [r0], #1
   8817c:	d3a4      	bcc.n	880c8 <memcpy+0xc>
   8817e:	f831 3b02 	ldrh.w	r3, [r1], #2
   88182:	f820 3b02 	strh.w	r3, [r0], #2
   88186:	e79f      	b.n	880c8 <memcpy+0xc>
   88188:	3a04      	subs	r2, #4
   8818a:	d3d9      	bcc.n	88140 <memcpy+0x84>
   8818c:	3a01      	subs	r2, #1
   8818e:	f811 3b01 	ldrb.w	r3, [r1], #1
   88192:	f800 3b01 	strb.w	r3, [r0], #1
   88196:	d2f9      	bcs.n	8818c <memcpy+0xd0>
   88198:	780b      	ldrb	r3, [r1, #0]
   8819a:	7003      	strb	r3, [r0, #0]
   8819c:	784b      	ldrb	r3, [r1, #1]
   8819e:	7043      	strb	r3, [r0, #1]
   881a0:	788b      	ldrb	r3, [r1, #2]
   881a2:	7083      	strb	r3, [r0, #2]
   881a4:	4660      	mov	r0, ip
   881a6:	4770      	bx	lr

000881a8 <__malloc_lock>:
   881a8:	4801      	ldr	r0, [pc, #4]	; (881b0 <__malloc_lock+0x8>)
   881aa:	f7ff bc9b 	b.w	87ae4 <__retarget_lock_acquire_recursive>
   881ae:	bf00      	nop
   881b0:	20070fdc 	.word	0x20070fdc

000881b4 <__malloc_unlock>:
   881b4:	4801      	ldr	r0, [pc, #4]	; (881bc <__malloc_unlock+0x8>)
   881b6:	f7ff bc97 	b.w	87ae8 <__retarget_lock_release_recursive>
   881ba:	bf00      	nop
   881bc:	20070fdc 	.word	0x20070fdc

000881c0 <_Balloc>:
   881c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   881c2:	b570      	push	{r4, r5, r6, lr}
   881c4:	4605      	mov	r5, r0
   881c6:	460c      	mov	r4, r1
   881c8:	b14b      	cbz	r3, 881de <_Balloc+0x1e>
   881ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   881ce:	b180      	cbz	r0, 881f2 <_Balloc+0x32>
   881d0:	6802      	ldr	r2, [r0, #0]
   881d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   881d6:	2300      	movs	r3, #0
   881d8:	6103      	str	r3, [r0, #16]
   881da:	60c3      	str	r3, [r0, #12]
   881dc:	bd70      	pop	{r4, r5, r6, pc}
   881de:	2221      	movs	r2, #33	; 0x21
   881e0:	2104      	movs	r1, #4
   881e2:	f000 fbdb 	bl	8899c <_calloc_r>
   881e6:	64e8      	str	r0, [r5, #76]	; 0x4c
   881e8:	4603      	mov	r3, r0
   881ea:	2800      	cmp	r0, #0
   881ec:	d1ed      	bne.n	881ca <_Balloc+0xa>
   881ee:	2000      	movs	r0, #0
   881f0:	bd70      	pop	{r4, r5, r6, pc}
   881f2:	2101      	movs	r1, #1
   881f4:	fa01 f604 	lsl.w	r6, r1, r4
   881f8:	1d72      	adds	r2, r6, #5
   881fa:	4628      	mov	r0, r5
   881fc:	0092      	lsls	r2, r2, #2
   881fe:	f000 fbcd 	bl	8899c <_calloc_r>
   88202:	2800      	cmp	r0, #0
   88204:	d0f3      	beq.n	881ee <_Balloc+0x2e>
   88206:	6044      	str	r4, [r0, #4]
   88208:	6086      	str	r6, [r0, #8]
   8820a:	e7e4      	b.n	881d6 <_Balloc+0x16>

0008820c <_Bfree>:
   8820c:	b131      	cbz	r1, 8821c <_Bfree+0x10>
   8820e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88210:	684a      	ldr	r2, [r1, #4]
   88212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88216:	6008      	str	r0, [r1, #0]
   88218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8821c:	4770      	bx	lr
   8821e:	bf00      	nop

00088220 <__multadd>:
   88220:	b5f0      	push	{r4, r5, r6, r7, lr}
   88222:	460c      	mov	r4, r1
   88224:	4605      	mov	r5, r0
   88226:	f04f 0e00 	mov.w	lr, #0
   8822a:	690e      	ldr	r6, [r1, #16]
   8822c:	b083      	sub	sp, #12
   8822e:	f101 0714 	add.w	r7, r1, #20
   88232:	6838      	ldr	r0, [r7, #0]
   88234:	f10e 0e01 	add.w	lr, lr, #1
   88238:	b281      	uxth	r1, r0
   8823a:	fb02 3301 	mla	r3, r2, r1, r3
   8823e:	0c01      	lsrs	r1, r0, #16
   88240:	0c18      	lsrs	r0, r3, #16
   88242:	fb02 0101 	mla	r1, r2, r1, r0
   88246:	b29b      	uxth	r3, r3
   88248:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8824c:	4576      	cmp	r6, lr
   8824e:	f847 3b04 	str.w	r3, [r7], #4
   88252:	ea4f 4311 	mov.w	r3, r1, lsr #16
   88256:	dcec      	bgt.n	88232 <__multadd+0x12>
   88258:	b13b      	cbz	r3, 8826a <__multadd+0x4a>
   8825a:	68a2      	ldr	r2, [r4, #8]
   8825c:	4296      	cmp	r6, r2
   8825e:	da07      	bge.n	88270 <__multadd+0x50>
   88260:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   88264:	3601      	adds	r6, #1
   88266:	6153      	str	r3, [r2, #20]
   88268:	6126      	str	r6, [r4, #16]
   8826a:	4620      	mov	r0, r4
   8826c:	b003      	add	sp, #12
   8826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88270:	6861      	ldr	r1, [r4, #4]
   88272:	4628      	mov	r0, r5
   88274:	3101      	adds	r1, #1
   88276:	9301      	str	r3, [sp, #4]
   88278:	f7ff ffa2 	bl	881c0 <_Balloc>
   8827c:	4607      	mov	r7, r0
   8827e:	6922      	ldr	r2, [r4, #16]
   88280:	f104 010c 	add.w	r1, r4, #12
   88284:	3202      	adds	r2, #2
   88286:	0092      	lsls	r2, r2, #2
   88288:	300c      	adds	r0, #12
   8828a:	f7ff ff17 	bl	880bc <memcpy>
   8828e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88290:	6861      	ldr	r1, [r4, #4]
   88292:	9b01      	ldr	r3, [sp, #4]
   88294:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88298:	6020      	str	r0, [r4, #0]
   8829a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8829e:	463c      	mov	r4, r7
   882a0:	e7de      	b.n	88260 <__multadd+0x40>
   882a2:	bf00      	nop

000882a4 <__hi0bits>:
   882a4:	0c02      	lsrs	r2, r0, #16
   882a6:	0412      	lsls	r2, r2, #16
   882a8:	4603      	mov	r3, r0
   882aa:	b9b2      	cbnz	r2, 882da <__hi0bits+0x36>
   882ac:	0403      	lsls	r3, r0, #16
   882ae:	2010      	movs	r0, #16
   882b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   882b4:	bf04      	itt	eq
   882b6:	021b      	lsleq	r3, r3, #8
   882b8:	3008      	addeq	r0, #8
   882ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   882be:	bf04      	itt	eq
   882c0:	011b      	lsleq	r3, r3, #4
   882c2:	3004      	addeq	r0, #4
   882c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   882c8:	bf04      	itt	eq
   882ca:	009b      	lsleq	r3, r3, #2
   882cc:	3002      	addeq	r0, #2
   882ce:	2b00      	cmp	r3, #0
   882d0:	db02      	blt.n	882d8 <__hi0bits+0x34>
   882d2:	005b      	lsls	r3, r3, #1
   882d4:	d403      	bmi.n	882de <__hi0bits+0x3a>
   882d6:	2020      	movs	r0, #32
   882d8:	4770      	bx	lr
   882da:	2000      	movs	r0, #0
   882dc:	e7e8      	b.n	882b0 <__hi0bits+0xc>
   882de:	3001      	adds	r0, #1
   882e0:	4770      	bx	lr
   882e2:	bf00      	nop

000882e4 <__lo0bits>:
   882e4:	6803      	ldr	r3, [r0, #0]
   882e6:	4601      	mov	r1, r0
   882e8:	f013 0207 	ands.w	r2, r3, #7
   882ec:	d007      	beq.n	882fe <__lo0bits+0x1a>
   882ee:	07da      	lsls	r2, r3, #31
   882f0:	d421      	bmi.n	88336 <__lo0bits+0x52>
   882f2:	0798      	lsls	r0, r3, #30
   882f4:	d421      	bmi.n	8833a <__lo0bits+0x56>
   882f6:	089b      	lsrs	r3, r3, #2
   882f8:	600b      	str	r3, [r1, #0]
   882fa:	2002      	movs	r0, #2
   882fc:	4770      	bx	lr
   882fe:	b298      	uxth	r0, r3
   88300:	b198      	cbz	r0, 8832a <__lo0bits+0x46>
   88302:	4610      	mov	r0, r2
   88304:	f013 0fff 	tst.w	r3, #255	; 0xff
   88308:	bf04      	itt	eq
   8830a:	0a1b      	lsreq	r3, r3, #8
   8830c:	3008      	addeq	r0, #8
   8830e:	071a      	lsls	r2, r3, #28
   88310:	bf04      	itt	eq
   88312:	091b      	lsreq	r3, r3, #4
   88314:	3004      	addeq	r0, #4
   88316:	079a      	lsls	r2, r3, #30
   88318:	bf04      	itt	eq
   8831a:	089b      	lsreq	r3, r3, #2
   8831c:	3002      	addeq	r0, #2
   8831e:	07da      	lsls	r2, r3, #31
   88320:	d407      	bmi.n	88332 <__lo0bits+0x4e>
   88322:	085b      	lsrs	r3, r3, #1
   88324:	d104      	bne.n	88330 <__lo0bits+0x4c>
   88326:	2020      	movs	r0, #32
   88328:	4770      	bx	lr
   8832a:	0c1b      	lsrs	r3, r3, #16
   8832c:	2010      	movs	r0, #16
   8832e:	e7e9      	b.n	88304 <__lo0bits+0x20>
   88330:	3001      	adds	r0, #1
   88332:	600b      	str	r3, [r1, #0]
   88334:	4770      	bx	lr
   88336:	2000      	movs	r0, #0
   88338:	4770      	bx	lr
   8833a:	085b      	lsrs	r3, r3, #1
   8833c:	600b      	str	r3, [r1, #0]
   8833e:	2001      	movs	r0, #1
   88340:	4770      	bx	lr
   88342:	bf00      	nop

00088344 <__i2b>:
   88344:	b510      	push	{r4, lr}
   88346:	460c      	mov	r4, r1
   88348:	2101      	movs	r1, #1
   8834a:	f7ff ff39 	bl	881c0 <_Balloc>
   8834e:	2201      	movs	r2, #1
   88350:	6144      	str	r4, [r0, #20]
   88352:	6102      	str	r2, [r0, #16]
   88354:	bd10      	pop	{r4, pc}
   88356:	bf00      	nop

00088358 <__multiply>:
   88358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8835c:	690c      	ldr	r4, [r1, #16]
   8835e:	6915      	ldr	r5, [r2, #16]
   88360:	b083      	sub	sp, #12
   88362:	42ac      	cmp	r4, r5
   88364:	468b      	mov	fp, r1
   88366:	4616      	mov	r6, r2
   88368:	da04      	bge.n	88374 <__multiply+0x1c>
   8836a:	4622      	mov	r2, r4
   8836c:	46b3      	mov	fp, r6
   8836e:	462c      	mov	r4, r5
   88370:	460e      	mov	r6, r1
   88372:	4615      	mov	r5, r2
   88374:	f8db 3008 	ldr.w	r3, [fp, #8]
   88378:	eb04 0805 	add.w	r8, r4, r5
   8837c:	f8db 1004 	ldr.w	r1, [fp, #4]
   88380:	4598      	cmp	r8, r3
   88382:	bfc8      	it	gt
   88384:	3101      	addgt	r1, #1
   88386:	f7ff ff1b 	bl	881c0 <_Balloc>
   8838a:	f100 0914 	add.w	r9, r0, #20
   8838e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88392:	45d1      	cmp	r9, sl
   88394:	9000      	str	r0, [sp, #0]
   88396:	d205      	bcs.n	883a4 <__multiply+0x4c>
   88398:	464b      	mov	r3, r9
   8839a:	2100      	movs	r1, #0
   8839c:	f843 1b04 	str.w	r1, [r3], #4
   883a0:	459a      	cmp	sl, r3
   883a2:	d8fb      	bhi.n	8839c <__multiply+0x44>
   883a4:	f106 0c14 	add.w	ip, r6, #20
   883a8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   883ac:	f10b 0b14 	add.w	fp, fp, #20
   883b0:	459c      	cmp	ip, r3
   883b2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   883b6:	d24b      	bcs.n	88450 <__multiply+0xf8>
   883b8:	f8cd a004 	str.w	sl, [sp, #4]
   883bc:	469a      	mov	sl, r3
   883be:	f8dc 5000 	ldr.w	r5, [ip]
   883c2:	b2af      	uxth	r7, r5
   883c4:	b1e7      	cbz	r7, 88400 <__multiply+0xa8>
   883c6:	464d      	mov	r5, r9
   883c8:	465e      	mov	r6, fp
   883ca:	2100      	movs	r1, #0
   883cc:	f856 2b04 	ldr.w	r2, [r6], #4
   883d0:	6828      	ldr	r0, [r5, #0]
   883d2:	b293      	uxth	r3, r2
   883d4:	b284      	uxth	r4, r0
   883d6:	0c12      	lsrs	r2, r2, #16
   883d8:	fb07 4303 	mla	r3, r7, r3, r4
   883dc:	0c00      	lsrs	r0, r0, #16
   883de:	fb07 0202 	mla	r2, r7, r2, r0
   883e2:	440b      	add	r3, r1
   883e4:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   883e8:	b29b      	uxth	r3, r3
   883ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   883ee:	45b6      	cmp	lr, r6
   883f0:	f845 3b04 	str.w	r3, [r5], #4
   883f4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   883f8:	d8e8      	bhi.n	883cc <__multiply+0x74>
   883fa:	6029      	str	r1, [r5, #0]
   883fc:	f8dc 5000 	ldr.w	r5, [ip]
   88400:	0c2d      	lsrs	r5, r5, #16
   88402:	d01d      	beq.n	88440 <__multiply+0xe8>
   88404:	f8d9 3000 	ldr.w	r3, [r9]
   88408:	4648      	mov	r0, r9
   8840a:	461c      	mov	r4, r3
   8840c:	4659      	mov	r1, fp
   8840e:	2200      	movs	r2, #0
   88410:	880e      	ldrh	r6, [r1, #0]
   88412:	0c24      	lsrs	r4, r4, #16
   88414:	fb05 4406 	mla	r4, r5, r6, r4
   88418:	b29b      	uxth	r3, r3
   8841a:	4422      	add	r2, r4
   8841c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88420:	f840 3b04 	str.w	r3, [r0], #4
   88424:	f851 3b04 	ldr.w	r3, [r1], #4
   88428:	6804      	ldr	r4, [r0, #0]
   8842a:	0c1b      	lsrs	r3, r3, #16
   8842c:	b2a6      	uxth	r6, r4
   8842e:	fb05 6303 	mla	r3, r5, r3, r6
   88432:	458e      	cmp	lr, r1
   88434:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88438:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8843c:	d8e8      	bhi.n	88410 <__multiply+0xb8>
   8843e:	6003      	str	r3, [r0, #0]
   88440:	f10c 0c04 	add.w	ip, ip, #4
   88444:	45e2      	cmp	sl, ip
   88446:	f109 0904 	add.w	r9, r9, #4
   8844a:	d8b8      	bhi.n	883be <__multiply+0x66>
   8844c:	f8dd a004 	ldr.w	sl, [sp, #4]
   88450:	f1b8 0f00 	cmp.w	r8, #0
   88454:	dd0b      	ble.n	8846e <__multiply+0x116>
   88456:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8845a:	f1aa 0a04 	sub.w	sl, sl, #4
   8845e:	b11b      	cbz	r3, 88468 <__multiply+0x110>
   88460:	e005      	b.n	8846e <__multiply+0x116>
   88462:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   88466:	b913      	cbnz	r3, 8846e <__multiply+0x116>
   88468:	f1b8 0801 	subs.w	r8, r8, #1
   8846c:	d1f9      	bne.n	88462 <__multiply+0x10a>
   8846e:	9800      	ldr	r0, [sp, #0]
   88470:	f8c0 8010 	str.w	r8, [r0, #16]
   88474:	b003      	add	sp, #12
   88476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8847a:	bf00      	nop

0008847c <__pow5mult>:
   8847c:	f012 0303 	ands.w	r3, r2, #3
   88480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88484:	4614      	mov	r4, r2
   88486:	4607      	mov	r7, r0
   88488:	d12e      	bne.n	884e8 <__pow5mult+0x6c>
   8848a:	460d      	mov	r5, r1
   8848c:	10a4      	asrs	r4, r4, #2
   8848e:	d01c      	beq.n	884ca <__pow5mult+0x4e>
   88490:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   88492:	b396      	cbz	r6, 884fa <__pow5mult+0x7e>
   88494:	07e3      	lsls	r3, r4, #31
   88496:	f04f 0800 	mov.w	r8, #0
   8849a:	d406      	bmi.n	884aa <__pow5mult+0x2e>
   8849c:	1064      	asrs	r4, r4, #1
   8849e:	d014      	beq.n	884ca <__pow5mult+0x4e>
   884a0:	6830      	ldr	r0, [r6, #0]
   884a2:	b1a8      	cbz	r0, 884d0 <__pow5mult+0x54>
   884a4:	4606      	mov	r6, r0
   884a6:	07e3      	lsls	r3, r4, #31
   884a8:	d5f8      	bpl.n	8849c <__pow5mult+0x20>
   884aa:	4632      	mov	r2, r6
   884ac:	4629      	mov	r1, r5
   884ae:	4638      	mov	r0, r7
   884b0:	f7ff ff52 	bl	88358 <__multiply>
   884b4:	b1b5      	cbz	r5, 884e4 <__pow5mult+0x68>
   884b6:	686a      	ldr	r2, [r5, #4]
   884b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   884ba:	1064      	asrs	r4, r4, #1
   884bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   884c0:	6029      	str	r1, [r5, #0]
   884c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   884c6:	4605      	mov	r5, r0
   884c8:	d1ea      	bne.n	884a0 <__pow5mult+0x24>
   884ca:	4628      	mov	r0, r5
   884cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   884d0:	4632      	mov	r2, r6
   884d2:	4631      	mov	r1, r6
   884d4:	4638      	mov	r0, r7
   884d6:	f7ff ff3f 	bl	88358 <__multiply>
   884da:	6030      	str	r0, [r6, #0]
   884dc:	f8c0 8000 	str.w	r8, [r0]
   884e0:	4606      	mov	r6, r0
   884e2:	e7e0      	b.n	884a6 <__pow5mult+0x2a>
   884e4:	4605      	mov	r5, r0
   884e6:	e7d9      	b.n	8849c <__pow5mult+0x20>
   884e8:	4a0b      	ldr	r2, [pc, #44]	; (88518 <__pow5mult+0x9c>)
   884ea:	3b01      	subs	r3, #1
   884ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   884f0:	2300      	movs	r3, #0
   884f2:	f7ff fe95 	bl	88220 <__multadd>
   884f6:	4605      	mov	r5, r0
   884f8:	e7c8      	b.n	8848c <__pow5mult+0x10>
   884fa:	2101      	movs	r1, #1
   884fc:	4638      	mov	r0, r7
   884fe:	f7ff fe5f 	bl	881c0 <_Balloc>
   88502:	f240 2171 	movw	r1, #625	; 0x271
   88506:	2201      	movs	r2, #1
   88508:	2300      	movs	r3, #0
   8850a:	6141      	str	r1, [r0, #20]
   8850c:	6102      	str	r2, [r0, #16]
   8850e:	4606      	mov	r6, r0
   88510:	64b8      	str	r0, [r7, #72]	; 0x48
   88512:	6003      	str	r3, [r0, #0]
   88514:	e7be      	b.n	88494 <__pow5mult+0x18>
   88516:	bf00      	nop
   88518:	00089838 	.word	0x00089838

0008851c <__lshift>:
   8851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88520:	690b      	ldr	r3, [r1, #16]
   88522:	1154      	asrs	r4, r2, #5
   88524:	eb04 0803 	add.w	r8, r4, r3
   88528:	688b      	ldr	r3, [r1, #8]
   8852a:	f108 0501 	add.w	r5, r8, #1
   8852e:	429d      	cmp	r5, r3
   88530:	460e      	mov	r6, r1
   88532:	4691      	mov	r9, r2
   88534:	4607      	mov	r7, r0
   88536:	6849      	ldr	r1, [r1, #4]
   88538:	dd04      	ble.n	88544 <__lshift+0x28>
   8853a:	005b      	lsls	r3, r3, #1
   8853c:	429d      	cmp	r5, r3
   8853e:	f101 0101 	add.w	r1, r1, #1
   88542:	dcfa      	bgt.n	8853a <__lshift+0x1e>
   88544:	4638      	mov	r0, r7
   88546:	f7ff fe3b 	bl	881c0 <_Balloc>
   8854a:	2c00      	cmp	r4, #0
   8854c:	f100 0314 	add.w	r3, r0, #20
   88550:	dd06      	ble.n	88560 <__lshift+0x44>
   88552:	2100      	movs	r1, #0
   88554:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   88558:	f843 1b04 	str.w	r1, [r3], #4
   8855c:	429a      	cmp	r2, r3
   8855e:	d1fb      	bne.n	88558 <__lshift+0x3c>
   88560:	6934      	ldr	r4, [r6, #16]
   88562:	f106 0114 	add.w	r1, r6, #20
   88566:	f019 091f 	ands.w	r9, r9, #31
   8856a:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8856e:	d01d      	beq.n	885ac <__lshift+0x90>
   88570:	2200      	movs	r2, #0
   88572:	f1c9 0c20 	rsb	ip, r9, #32
   88576:	680c      	ldr	r4, [r1, #0]
   88578:	fa04 f409 	lsl.w	r4, r4, r9
   8857c:	4314      	orrs	r4, r2
   8857e:	f843 4b04 	str.w	r4, [r3], #4
   88582:	f851 2b04 	ldr.w	r2, [r1], #4
   88586:	458e      	cmp	lr, r1
   88588:	fa22 f20c 	lsr.w	r2, r2, ip
   8858c:	d8f3      	bhi.n	88576 <__lshift+0x5a>
   8858e:	601a      	str	r2, [r3, #0]
   88590:	b10a      	cbz	r2, 88596 <__lshift+0x7a>
   88592:	f108 0502 	add.w	r5, r8, #2
   88596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88598:	6872      	ldr	r2, [r6, #4]
   8859a:	3d01      	subs	r5, #1
   8859c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   885a0:	6105      	str	r5, [r0, #16]
   885a2:	6031      	str	r1, [r6, #0]
   885a4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   885a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   885ac:	3b04      	subs	r3, #4
   885ae:	f851 2b04 	ldr.w	r2, [r1], #4
   885b2:	458e      	cmp	lr, r1
   885b4:	f843 2f04 	str.w	r2, [r3, #4]!
   885b8:	d8f9      	bhi.n	885ae <__lshift+0x92>
   885ba:	e7ec      	b.n	88596 <__lshift+0x7a>

000885bc <__mcmp>:
   885bc:	b430      	push	{r4, r5}
   885be:	690b      	ldr	r3, [r1, #16]
   885c0:	4605      	mov	r5, r0
   885c2:	6900      	ldr	r0, [r0, #16]
   885c4:	1ac0      	subs	r0, r0, r3
   885c6:	d10f      	bne.n	885e8 <__mcmp+0x2c>
   885c8:	009b      	lsls	r3, r3, #2
   885ca:	3514      	adds	r5, #20
   885cc:	3114      	adds	r1, #20
   885ce:	4419      	add	r1, r3
   885d0:	442b      	add	r3, r5
   885d2:	e001      	b.n	885d8 <__mcmp+0x1c>
   885d4:	429d      	cmp	r5, r3
   885d6:	d207      	bcs.n	885e8 <__mcmp+0x2c>
   885d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   885dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   885e0:	4294      	cmp	r4, r2
   885e2:	d0f7      	beq.n	885d4 <__mcmp+0x18>
   885e4:	d302      	bcc.n	885ec <__mcmp+0x30>
   885e6:	2001      	movs	r0, #1
   885e8:	bc30      	pop	{r4, r5}
   885ea:	4770      	bx	lr
   885ec:	f04f 30ff 	mov.w	r0, #4294967295
   885f0:	e7fa      	b.n	885e8 <__mcmp+0x2c>
   885f2:	bf00      	nop

000885f4 <__mdiff>:
   885f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   885f8:	690c      	ldr	r4, [r1, #16]
   885fa:	4689      	mov	r9, r1
   885fc:	6911      	ldr	r1, [r2, #16]
   885fe:	4692      	mov	sl, r2
   88600:	1a64      	subs	r4, r4, r1
   88602:	2c00      	cmp	r4, #0
   88604:	d117      	bne.n	88636 <__mdiff+0x42>
   88606:	0089      	lsls	r1, r1, #2
   88608:	f109 0714 	add.w	r7, r9, #20
   8860c:	f102 0614 	add.w	r6, r2, #20
   88610:	187b      	adds	r3, r7, r1
   88612:	4431      	add	r1, r6
   88614:	e001      	b.n	8861a <__mdiff+0x26>
   88616:	429f      	cmp	r7, r3
   88618:	d265      	bcs.n	886e6 <__mdiff+0xf2>
   8861a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8861e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88622:	4295      	cmp	r5, r2
   88624:	d0f7      	beq.n	88616 <__mdiff+0x22>
   88626:	d267      	bcs.n	886f8 <__mdiff+0x104>
   88628:	464b      	mov	r3, r9
   8862a:	46bb      	mov	fp, r7
   8862c:	46d1      	mov	r9, sl
   8862e:	4637      	mov	r7, r6
   88630:	469a      	mov	sl, r3
   88632:	2401      	movs	r4, #1
   88634:	e005      	b.n	88642 <__mdiff+0x4e>
   88636:	db61      	blt.n	886fc <__mdiff+0x108>
   88638:	2400      	movs	r4, #0
   8863a:	f109 0714 	add.w	r7, r9, #20
   8863e:	f10a 0b14 	add.w	fp, sl, #20
   88642:	f8d9 1004 	ldr.w	r1, [r9, #4]
   88646:	f7ff fdbb 	bl	881c0 <_Balloc>
   8864a:	465d      	mov	r5, fp
   8864c:	f04f 0800 	mov.w	r8, #0
   88650:	f8d9 e010 	ldr.w	lr, [r9, #16]
   88654:	f8da 3010 	ldr.w	r3, [sl, #16]
   88658:	463e      	mov	r6, r7
   8865a:	60c4      	str	r4, [r0, #12]
   8865c:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   88660:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   88664:	f100 0414 	add.w	r4, r0, #20
   88668:	f856 9b04 	ldr.w	r9, [r6], #4
   8866c:	f855 2b04 	ldr.w	r2, [r5], #4
   88670:	fa1f f389 	uxth.w	r3, r9
   88674:	4443      	add	r3, r8
   88676:	fa1f f882 	uxth.w	r8, r2
   8867a:	0c12      	lsrs	r2, r2, #16
   8867c:	eba3 0308 	sub.w	r3, r3, r8
   88680:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88684:	eb02 4223 	add.w	r2, r2, r3, asr #16
   88688:	b29b      	uxth	r3, r3
   8868a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8868e:	45ac      	cmp	ip, r5
   88690:	f844 3b04 	str.w	r3, [r4], #4
   88694:	ea4f 4822 	mov.w	r8, r2, asr #16
   88698:	d8e6      	bhi.n	88668 <__mdiff+0x74>
   8869a:	42b7      	cmp	r7, r6
   8869c:	d917      	bls.n	886ce <__mdiff+0xda>
   8869e:	46a4      	mov	ip, r4
   886a0:	4635      	mov	r5, r6
   886a2:	f855 3b04 	ldr.w	r3, [r5], #4
   886a6:	b299      	uxth	r1, r3
   886a8:	4441      	add	r1, r8
   886aa:	140a      	asrs	r2, r1, #16
   886ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   886b0:	b289      	uxth	r1, r1
   886b2:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   886b6:	42af      	cmp	r7, r5
   886b8:	f84c 3b04 	str.w	r3, [ip], #4
   886bc:	ea4f 4822 	mov.w	r8, r2, asr #16
   886c0:	d8ef      	bhi.n	886a2 <__mdiff+0xae>
   886c2:	43f6      	mvns	r6, r6
   886c4:	4437      	add	r7, r6
   886c6:	f027 0703 	bic.w	r7, r7, #3
   886ca:	3704      	adds	r7, #4
   886cc:	443c      	add	r4, r7
   886ce:	3c04      	subs	r4, #4
   886d0:	b92b      	cbnz	r3, 886de <__mdiff+0xea>
   886d2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   886d6:	f10e 3eff 	add.w	lr, lr, #4294967295
   886da:	2b00      	cmp	r3, #0
   886dc:	d0f9      	beq.n	886d2 <__mdiff+0xde>
   886de:	f8c0 e010 	str.w	lr, [r0, #16]
   886e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886e6:	2100      	movs	r1, #0
   886e8:	f7ff fd6a 	bl	881c0 <_Balloc>
   886ec:	2201      	movs	r2, #1
   886ee:	2300      	movs	r3, #0
   886f0:	6102      	str	r2, [r0, #16]
   886f2:	6143      	str	r3, [r0, #20]
   886f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886f8:	46b3      	mov	fp, r6
   886fa:	e7a2      	b.n	88642 <__mdiff+0x4e>
   886fc:	464b      	mov	r3, r9
   886fe:	f109 0b14 	add.w	fp, r9, #20
   88702:	f102 0714 	add.w	r7, r2, #20
   88706:	4691      	mov	r9, r2
   88708:	2401      	movs	r4, #1
   8870a:	469a      	mov	sl, r3
   8870c:	e799      	b.n	88642 <__mdiff+0x4e>
   8870e:	bf00      	nop

00088710 <__d2b>:
   88710:	b5f0      	push	{r4, r5, r6, r7, lr}
   88712:	2101      	movs	r1, #1
   88714:	b083      	sub	sp, #12
   88716:	461c      	mov	r4, r3
   88718:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8871c:	4616      	mov	r6, r2
   8871e:	f7ff fd4f 	bl	881c0 <_Balloc>
   88722:	f3c4 0413 	ubfx	r4, r4, #0, #20
   88726:	4607      	mov	r7, r0
   88728:	b10d      	cbz	r5, 8872e <__d2b+0x1e>
   8872a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8872e:	9401      	str	r4, [sp, #4]
   88730:	b306      	cbz	r6, 88774 <__d2b+0x64>
   88732:	a802      	add	r0, sp, #8
   88734:	f840 6d08 	str.w	r6, [r0, #-8]!
   88738:	f7ff fdd4 	bl	882e4 <__lo0bits>
   8873c:	2800      	cmp	r0, #0
   8873e:	d130      	bne.n	887a2 <__d2b+0x92>
   88740:	e89d 000c 	ldmia.w	sp, {r2, r3}
   88744:	617a      	str	r2, [r7, #20]
   88746:	2b00      	cmp	r3, #0
   88748:	bf0c      	ite	eq
   8874a:	2101      	moveq	r1, #1
   8874c:	2102      	movne	r1, #2
   8874e:	61bb      	str	r3, [r7, #24]
   88750:	6139      	str	r1, [r7, #16]
   88752:	b9d5      	cbnz	r5, 8878a <__d2b+0x7a>
   88754:	9a08      	ldr	r2, [sp, #32]
   88756:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8875a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8875e:	6010      	str	r0, [r2, #0]
   88760:	6918      	ldr	r0, [r3, #16]
   88762:	f7ff fd9f 	bl	882a4 <__hi0bits>
   88766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88768:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8876c:	6018      	str	r0, [r3, #0]
   8876e:	4638      	mov	r0, r7
   88770:	b003      	add	sp, #12
   88772:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88774:	a801      	add	r0, sp, #4
   88776:	f7ff fdb5 	bl	882e4 <__lo0bits>
   8877a:	2201      	movs	r2, #1
   8877c:	9b01      	ldr	r3, [sp, #4]
   8877e:	4611      	mov	r1, r2
   88780:	3020      	adds	r0, #32
   88782:	613a      	str	r2, [r7, #16]
   88784:	617b      	str	r3, [r7, #20]
   88786:	2d00      	cmp	r5, #0
   88788:	d0e4      	beq.n	88754 <__d2b+0x44>
   8878a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8878e:	9a08      	ldr	r2, [sp, #32]
   88790:	4403      	add	r3, r0
   88792:	6013      	str	r3, [r2, #0]
   88794:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88796:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8879a:	6018      	str	r0, [r3, #0]
   8879c:	4638      	mov	r0, r7
   8879e:	b003      	add	sp, #12
   887a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   887a2:	9b01      	ldr	r3, [sp, #4]
   887a4:	f1c0 0220 	rsb	r2, r0, #32
   887a8:	9900      	ldr	r1, [sp, #0]
   887aa:	fa03 f202 	lsl.w	r2, r3, r2
   887ae:	430a      	orrs	r2, r1
   887b0:	40c3      	lsrs	r3, r0
   887b2:	9301      	str	r3, [sp, #4]
   887b4:	617a      	str	r2, [r7, #20]
   887b6:	e7c6      	b.n	88746 <__d2b+0x36>

000887b8 <_sbrk_r>:
   887b8:	b538      	push	{r3, r4, r5, lr}
   887ba:	2300      	movs	r3, #0
   887bc:	4c06      	ldr	r4, [pc, #24]	; (887d8 <_sbrk_r+0x20>)
   887be:	4605      	mov	r5, r0
   887c0:	4608      	mov	r0, r1
   887c2:	6023      	str	r3, [r4, #0]
   887c4:	f7fb fd12 	bl	841ec <_sbrk>
   887c8:	1c43      	adds	r3, r0, #1
   887ca:	d000      	beq.n	887ce <_sbrk_r+0x16>
   887cc:	bd38      	pop	{r3, r4, r5, pc}
   887ce:	6823      	ldr	r3, [r4, #0]
   887d0:	2b00      	cmp	r3, #0
   887d2:	d0fb      	beq.n	887cc <_sbrk_r+0x14>
   887d4:	602b      	str	r3, [r5, #0]
   887d6:	bd38      	pop	{r3, r4, r5, pc}
   887d8:	20070ff0 	.word	0x20070ff0

000887dc <__ssprint_r>:
   887dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887e0:	6893      	ldr	r3, [r2, #8]
   887e2:	b083      	sub	sp, #12
   887e4:	4690      	mov	r8, r2
   887e6:	2b00      	cmp	r3, #0
   887e8:	d070      	beq.n	888cc <__ssprint_r+0xf0>
   887ea:	4682      	mov	sl, r0
   887ec:	460c      	mov	r4, r1
   887ee:	6817      	ldr	r7, [r2, #0]
   887f0:	688d      	ldr	r5, [r1, #8]
   887f2:	6808      	ldr	r0, [r1, #0]
   887f4:	e042      	b.n	8887c <__ssprint_r+0xa0>
   887f6:	89a3      	ldrh	r3, [r4, #12]
   887f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   887fc:	d02e      	beq.n	8885c <__ssprint_r+0x80>
   887fe:	6965      	ldr	r5, [r4, #20]
   88800:	6921      	ldr	r1, [r4, #16]
   88802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   88806:	eba0 0b01 	sub.w	fp, r0, r1
   8880a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8880e:	f10b 0001 	add.w	r0, fp, #1
   88812:	106d      	asrs	r5, r5, #1
   88814:	4430      	add	r0, r6
   88816:	42a8      	cmp	r0, r5
   88818:	462a      	mov	r2, r5
   8881a:	bf84      	itt	hi
   8881c:	4605      	movhi	r5, r0
   8881e:	462a      	movhi	r2, r5
   88820:	055b      	lsls	r3, r3, #21
   88822:	d538      	bpl.n	88896 <__ssprint_r+0xba>
   88824:	4611      	mov	r1, r2
   88826:	4650      	mov	r0, sl
   88828:	f7ff f960 	bl	87aec <_malloc_r>
   8882c:	2800      	cmp	r0, #0
   8882e:	d03c      	beq.n	888aa <__ssprint_r+0xce>
   88830:	465a      	mov	r2, fp
   88832:	6921      	ldr	r1, [r4, #16]
   88834:	9001      	str	r0, [sp, #4]
   88836:	f7ff fc41 	bl	880bc <memcpy>
   8883a:	89a2      	ldrh	r2, [r4, #12]
   8883c:	9b01      	ldr	r3, [sp, #4]
   8883e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88846:	81a2      	strh	r2, [r4, #12]
   88848:	eba5 020b 	sub.w	r2, r5, fp
   8884c:	eb03 000b 	add.w	r0, r3, fp
   88850:	6165      	str	r5, [r4, #20]
   88852:	46b3      	mov	fp, r6
   88854:	4635      	mov	r5, r6
   88856:	6123      	str	r3, [r4, #16]
   88858:	6020      	str	r0, [r4, #0]
   8885a:	60a2      	str	r2, [r4, #8]
   8885c:	465a      	mov	r2, fp
   8885e:	4649      	mov	r1, r9
   88860:	f000 fa18 	bl	88c94 <memmove>
   88864:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88868:	68a2      	ldr	r2, [r4, #8]
   8886a:	6820      	ldr	r0, [r4, #0]
   8886c:	1b55      	subs	r5, r2, r5
   8886e:	4458      	add	r0, fp
   88870:	1b9e      	subs	r6, r3, r6
   88872:	60a5      	str	r5, [r4, #8]
   88874:	6020      	str	r0, [r4, #0]
   88876:	f8c8 6008 	str.w	r6, [r8, #8]
   8887a:	b33e      	cbz	r6, 888cc <__ssprint_r+0xf0>
   8887c:	687e      	ldr	r6, [r7, #4]
   8887e:	463b      	mov	r3, r7
   88880:	3708      	adds	r7, #8
   88882:	2e00      	cmp	r6, #0
   88884:	d0fa      	beq.n	8887c <__ssprint_r+0xa0>
   88886:	42ae      	cmp	r6, r5
   88888:	f8d3 9000 	ldr.w	r9, [r3]
   8888c:	46ab      	mov	fp, r5
   8888e:	d2b2      	bcs.n	887f6 <__ssprint_r+0x1a>
   88890:	4635      	mov	r5, r6
   88892:	46b3      	mov	fp, r6
   88894:	e7e2      	b.n	8885c <__ssprint_r+0x80>
   88896:	4650      	mov	r0, sl
   88898:	f000 fa60 	bl	88d5c <_realloc_r>
   8889c:	4603      	mov	r3, r0
   8889e:	2800      	cmp	r0, #0
   888a0:	d1d2      	bne.n	88848 <__ssprint_r+0x6c>
   888a2:	6921      	ldr	r1, [r4, #16]
   888a4:	4650      	mov	r0, sl
   888a6:	f000 f8f9 	bl	88a9c <_free_r>
   888aa:	230c      	movs	r3, #12
   888ac:	2200      	movs	r2, #0
   888ae:	f04f 30ff 	mov.w	r0, #4294967295
   888b2:	f8ca 3000 	str.w	r3, [sl]
   888b6:	89a3      	ldrh	r3, [r4, #12]
   888b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   888bc:	81a3      	strh	r3, [r4, #12]
   888be:	f8c8 2008 	str.w	r2, [r8, #8]
   888c2:	f8c8 2004 	str.w	r2, [r8, #4]
   888c6:	b003      	add	sp, #12
   888c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888cc:	2000      	movs	r0, #0
   888ce:	f8c8 0004 	str.w	r0, [r8, #4]
   888d2:	b003      	add	sp, #12
   888d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000888d8 <__register_exitproc>:
   888d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   888dc:	4d2c      	ldr	r5, [pc, #176]	; (88990 <__register_exitproc+0xb8>)
   888de:	4606      	mov	r6, r0
   888e0:	6828      	ldr	r0, [r5, #0]
   888e2:	4698      	mov	r8, r3
   888e4:	460f      	mov	r7, r1
   888e6:	4691      	mov	r9, r2
   888e8:	f7ff f8fc 	bl	87ae4 <__retarget_lock_acquire_recursive>
   888ec:	4b29      	ldr	r3, [pc, #164]	; (88994 <__register_exitproc+0xbc>)
   888ee:	681c      	ldr	r4, [r3, #0]
   888f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   888f4:	2b00      	cmp	r3, #0
   888f6:	d03e      	beq.n	88976 <__register_exitproc+0x9e>
   888f8:	685a      	ldr	r2, [r3, #4]
   888fa:	2a1f      	cmp	r2, #31
   888fc:	dc1c      	bgt.n	88938 <__register_exitproc+0x60>
   888fe:	f102 0e01 	add.w	lr, r2, #1
   88902:	b176      	cbz	r6, 88922 <__register_exitproc+0x4a>
   88904:	2101      	movs	r1, #1
   88906:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8890a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8890e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   88912:	4091      	lsls	r1, r2
   88914:	4308      	orrs	r0, r1
   88916:	2e02      	cmp	r6, #2
   88918:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8891c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   88920:	d023      	beq.n	8896a <__register_exitproc+0x92>
   88922:	3202      	adds	r2, #2
   88924:	f8c3 e004 	str.w	lr, [r3, #4]
   88928:	6828      	ldr	r0, [r5, #0]
   8892a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8892e:	f7ff f8db 	bl	87ae8 <__retarget_lock_release_recursive>
   88932:	2000      	movs	r0, #0
   88934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88938:	4b17      	ldr	r3, [pc, #92]	; (88998 <__register_exitproc+0xc0>)
   8893a:	b30b      	cbz	r3, 88980 <__register_exitproc+0xa8>
   8893c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88940:	f3af 8000 	nop.w
   88944:	4603      	mov	r3, r0
   88946:	b1d8      	cbz	r0, 88980 <__register_exitproc+0xa8>
   88948:	2000      	movs	r0, #0
   8894a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8894e:	f04f 0e01 	mov.w	lr, #1
   88952:	6058      	str	r0, [r3, #4]
   88954:	6019      	str	r1, [r3, #0]
   88956:	4602      	mov	r2, r0
   88958:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8895c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88960:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88964:	2e00      	cmp	r6, #0
   88966:	d0dc      	beq.n	88922 <__register_exitproc+0x4a>
   88968:	e7cc      	b.n	88904 <__register_exitproc+0x2c>
   8896a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8896e:	4301      	orrs	r1, r0
   88970:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88974:	e7d5      	b.n	88922 <__register_exitproc+0x4a>
   88976:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8897a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8897e:	e7bb      	b.n	888f8 <__register_exitproc+0x20>
   88980:	6828      	ldr	r0, [r5, #0]
   88982:	f7ff f8b1 	bl	87ae8 <__retarget_lock_release_recursive>
   88986:	f04f 30ff 	mov.w	r0, #4294967295
   8898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8898e:	bf00      	nop
   88990:	200705d0 	.word	0x200705d0
   88994:	000896d0 	.word	0x000896d0
   88998:	00000000 	.word	0x00000000

0008899c <_calloc_r>:
   8899c:	b510      	push	{r4, lr}
   8899e:	fb02 f101 	mul.w	r1, r2, r1
   889a2:	f7ff f8a3 	bl	87aec <_malloc_r>
   889a6:	4604      	mov	r4, r0
   889a8:	b1d8      	cbz	r0, 889e2 <_calloc_r+0x46>
   889aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
   889ae:	f022 0203 	bic.w	r2, r2, #3
   889b2:	3a04      	subs	r2, #4
   889b4:	2a24      	cmp	r2, #36	; 0x24
   889b6:	d818      	bhi.n	889ea <_calloc_r+0x4e>
   889b8:	2a13      	cmp	r2, #19
   889ba:	d914      	bls.n	889e6 <_calloc_r+0x4a>
   889bc:	2300      	movs	r3, #0
   889be:	2a1b      	cmp	r2, #27
   889c0:	6003      	str	r3, [r0, #0]
   889c2:	6043      	str	r3, [r0, #4]
   889c4:	d916      	bls.n	889f4 <_calloc_r+0x58>
   889c6:	2a24      	cmp	r2, #36	; 0x24
   889c8:	6083      	str	r3, [r0, #8]
   889ca:	60c3      	str	r3, [r0, #12]
   889cc:	bf11      	iteee	ne
   889ce:	f100 0210 	addne.w	r2, r0, #16
   889d2:	6103      	streq	r3, [r0, #16]
   889d4:	6143      	streq	r3, [r0, #20]
   889d6:	f100 0218 	addeq.w	r2, r0, #24
   889da:	2300      	movs	r3, #0
   889dc:	6013      	str	r3, [r2, #0]
   889de:	6053      	str	r3, [r2, #4]
   889e0:	6093      	str	r3, [r2, #8]
   889e2:	4620      	mov	r0, r4
   889e4:	bd10      	pop	{r4, pc}
   889e6:	4602      	mov	r2, r0
   889e8:	e7f7      	b.n	889da <_calloc_r+0x3e>
   889ea:	2100      	movs	r1, #0
   889ec:	f7fc fd6a 	bl	854c4 <memset>
   889f0:	4620      	mov	r0, r4
   889f2:	bd10      	pop	{r4, pc}
   889f4:	f100 0208 	add.w	r2, r0, #8
   889f8:	e7ef      	b.n	889da <_calloc_r+0x3e>
   889fa:	bf00      	nop

000889fc <_malloc_trim_r>:
   889fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   889fe:	460c      	mov	r4, r1
   88a00:	4f23      	ldr	r7, [pc, #140]	; (88a90 <_malloc_trim_r+0x94>)
   88a02:	4606      	mov	r6, r0
   88a04:	f7ff fbd0 	bl	881a8 <__malloc_lock>
   88a08:	68bb      	ldr	r3, [r7, #8]
   88a0a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88a0e:	685d      	ldr	r5, [r3, #4]
   88a10:	310f      	adds	r1, #15
   88a12:	f025 0503 	bic.w	r5, r5, #3
   88a16:	4429      	add	r1, r5
   88a18:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88a1c:	f021 010f 	bic.w	r1, r1, #15
   88a20:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88a24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88a28:	db07      	blt.n	88a3a <_malloc_trim_r+0x3e>
   88a2a:	2100      	movs	r1, #0
   88a2c:	4630      	mov	r0, r6
   88a2e:	f7ff fec3 	bl	887b8 <_sbrk_r>
   88a32:	68bb      	ldr	r3, [r7, #8]
   88a34:	442b      	add	r3, r5
   88a36:	4298      	cmp	r0, r3
   88a38:	d004      	beq.n	88a44 <_malloc_trim_r+0x48>
   88a3a:	4630      	mov	r0, r6
   88a3c:	f7ff fbba 	bl	881b4 <__malloc_unlock>
   88a40:	2000      	movs	r0, #0
   88a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88a44:	4261      	negs	r1, r4
   88a46:	4630      	mov	r0, r6
   88a48:	f7ff feb6 	bl	887b8 <_sbrk_r>
   88a4c:	3001      	adds	r0, #1
   88a4e:	d00d      	beq.n	88a6c <_malloc_trim_r+0x70>
   88a50:	4b10      	ldr	r3, [pc, #64]	; (88a94 <_malloc_trim_r+0x98>)
   88a52:	68ba      	ldr	r2, [r7, #8]
   88a54:	6819      	ldr	r1, [r3, #0]
   88a56:	1b2d      	subs	r5, r5, r4
   88a58:	f045 0501 	orr.w	r5, r5, #1
   88a5c:	4630      	mov	r0, r6
   88a5e:	1b09      	subs	r1, r1, r4
   88a60:	6055      	str	r5, [r2, #4]
   88a62:	6019      	str	r1, [r3, #0]
   88a64:	f7ff fba6 	bl	881b4 <__malloc_unlock>
   88a68:	2001      	movs	r0, #1
   88a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88a6c:	2100      	movs	r1, #0
   88a6e:	4630      	mov	r0, r6
   88a70:	f7ff fea2 	bl	887b8 <_sbrk_r>
   88a74:	68ba      	ldr	r2, [r7, #8]
   88a76:	1a83      	subs	r3, r0, r2
   88a78:	2b0f      	cmp	r3, #15
   88a7a:	ddde      	ble.n	88a3a <_malloc_trim_r+0x3e>
   88a7c:	4c06      	ldr	r4, [pc, #24]	; (88a98 <_malloc_trim_r+0x9c>)
   88a7e:	4905      	ldr	r1, [pc, #20]	; (88a94 <_malloc_trim_r+0x98>)
   88a80:	6824      	ldr	r4, [r4, #0]
   88a82:	f043 0301 	orr.w	r3, r3, #1
   88a86:	1b00      	subs	r0, r0, r4
   88a88:	6053      	str	r3, [r2, #4]
   88a8a:	6008      	str	r0, [r1, #0]
   88a8c:	e7d5      	b.n	88a3a <_malloc_trim_r+0x3e>
   88a8e:	bf00      	nop
   88a90:	200705d4 	.word	0x200705d4
   88a94:	20070dd4 	.word	0x20070dd4
   88a98:	200709dc 	.word	0x200709dc

00088a9c <_free_r>:
   88a9c:	2900      	cmp	r1, #0
   88a9e:	d044      	beq.n	88b2a <_free_r+0x8e>
   88aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88aa4:	460d      	mov	r5, r1
   88aa6:	4680      	mov	r8, r0
   88aa8:	f7ff fb7e 	bl	881a8 <__malloc_lock>
   88aac:	f855 7c04 	ldr.w	r7, [r5, #-4]
   88ab0:	4969      	ldr	r1, [pc, #420]	; (88c58 <_free_r+0x1bc>)
   88ab2:	f1a5 0408 	sub.w	r4, r5, #8
   88ab6:	f027 0301 	bic.w	r3, r7, #1
   88aba:	18e2      	adds	r2, r4, r3
   88abc:	688e      	ldr	r6, [r1, #8]
   88abe:	6850      	ldr	r0, [r2, #4]
   88ac0:	42b2      	cmp	r2, r6
   88ac2:	f020 0003 	bic.w	r0, r0, #3
   88ac6:	d05e      	beq.n	88b86 <_free_r+0xea>
   88ac8:	07fe      	lsls	r6, r7, #31
   88aca:	6050      	str	r0, [r2, #4]
   88acc:	d40b      	bmi.n	88ae6 <_free_r+0x4a>
   88ace:	f855 7c08 	ldr.w	r7, [r5, #-8]
   88ad2:	f101 0e08 	add.w	lr, r1, #8
   88ad6:	1be4      	subs	r4, r4, r7
   88ad8:	68a5      	ldr	r5, [r4, #8]
   88ada:	443b      	add	r3, r7
   88adc:	4575      	cmp	r5, lr
   88ade:	d06d      	beq.n	88bbc <_free_r+0x120>
   88ae0:	68e7      	ldr	r7, [r4, #12]
   88ae2:	60ef      	str	r7, [r5, #12]
   88ae4:	60bd      	str	r5, [r7, #8]
   88ae6:	1815      	adds	r5, r2, r0
   88ae8:	686d      	ldr	r5, [r5, #4]
   88aea:	07ed      	lsls	r5, r5, #31
   88aec:	d53e      	bpl.n	88b6c <_free_r+0xd0>
   88aee:	f043 0201 	orr.w	r2, r3, #1
   88af2:	6062      	str	r2, [r4, #4]
   88af4:	50e3      	str	r3, [r4, r3]
   88af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88afa:	d217      	bcs.n	88b2c <_free_r+0x90>
   88afc:	2201      	movs	r2, #1
   88afe:	08db      	lsrs	r3, r3, #3
   88b00:	1098      	asrs	r0, r3, #2
   88b02:	684d      	ldr	r5, [r1, #4]
   88b04:	4413      	add	r3, r2
   88b06:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88b0a:	4082      	lsls	r2, r0
   88b0c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   88b10:	432a      	orrs	r2, r5
   88b12:	3808      	subs	r0, #8
   88b14:	60e0      	str	r0, [r4, #12]
   88b16:	60a7      	str	r7, [r4, #8]
   88b18:	604a      	str	r2, [r1, #4]
   88b1a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   88b1e:	60fc      	str	r4, [r7, #12]
   88b20:	4640      	mov	r0, r8
   88b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88b26:	f7ff bb45 	b.w	881b4 <__malloc_unlock>
   88b2a:	4770      	bx	lr
   88b2c:	0a5a      	lsrs	r2, r3, #9
   88b2e:	2a04      	cmp	r2, #4
   88b30:	d852      	bhi.n	88bd8 <_free_r+0x13c>
   88b32:	099a      	lsrs	r2, r3, #6
   88b34:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88b38:	00ff      	lsls	r7, r7, #3
   88b3a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   88b3e:	19c8      	adds	r0, r1, r7
   88b40:	59ca      	ldr	r2, [r1, r7]
   88b42:	3808      	subs	r0, #8
   88b44:	4290      	cmp	r0, r2
   88b46:	d04f      	beq.n	88be8 <_free_r+0x14c>
   88b48:	6851      	ldr	r1, [r2, #4]
   88b4a:	f021 0103 	bic.w	r1, r1, #3
   88b4e:	428b      	cmp	r3, r1
   88b50:	d232      	bcs.n	88bb8 <_free_r+0x11c>
   88b52:	6892      	ldr	r2, [r2, #8]
   88b54:	4290      	cmp	r0, r2
   88b56:	d1f7      	bne.n	88b48 <_free_r+0xac>
   88b58:	68c3      	ldr	r3, [r0, #12]
   88b5a:	60a0      	str	r0, [r4, #8]
   88b5c:	60e3      	str	r3, [r4, #12]
   88b5e:	609c      	str	r4, [r3, #8]
   88b60:	60c4      	str	r4, [r0, #12]
   88b62:	4640      	mov	r0, r8
   88b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88b68:	f7ff bb24 	b.w	881b4 <__malloc_unlock>
   88b6c:	6895      	ldr	r5, [r2, #8]
   88b6e:	4f3b      	ldr	r7, [pc, #236]	; (88c5c <_free_r+0x1c0>)
   88b70:	4403      	add	r3, r0
   88b72:	42bd      	cmp	r5, r7
   88b74:	d040      	beq.n	88bf8 <_free_r+0x15c>
   88b76:	68d0      	ldr	r0, [r2, #12]
   88b78:	f043 0201 	orr.w	r2, r3, #1
   88b7c:	60e8      	str	r0, [r5, #12]
   88b7e:	6085      	str	r5, [r0, #8]
   88b80:	6062      	str	r2, [r4, #4]
   88b82:	50e3      	str	r3, [r4, r3]
   88b84:	e7b7      	b.n	88af6 <_free_r+0x5a>
   88b86:	07ff      	lsls	r7, r7, #31
   88b88:	4403      	add	r3, r0
   88b8a:	d407      	bmi.n	88b9c <_free_r+0x100>
   88b8c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88b90:	1b64      	subs	r4, r4, r5
   88b92:	68e2      	ldr	r2, [r4, #12]
   88b94:	68a0      	ldr	r0, [r4, #8]
   88b96:	442b      	add	r3, r5
   88b98:	60c2      	str	r2, [r0, #12]
   88b9a:	6090      	str	r0, [r2, #8]
   88b9c:	4a30      	ldr	r2, [pc, #192]	; (88c60 <_free_r+0x1c4>)
   88b9e:	f043 0001 	orr.w	r0, r3, #1
   88ba2:	6812      	ldr	r2, [r2, #0]
   88ba4:	6060      	str	r0, [r4, #4]
   88ba6:	4293      	cmp	r3, r2
   88ba8:	608c      	str	r4, [r1, #8]
   88baa:	d3b9      	bcc.n	88b20 <_free_r+0x84>
   88bac:	4b2d      	ldr	r3, [pc, #180]	; (88c64 <_free_r+0x1c8>)
   88bae:	4640      	mov	r0, r8
   88bb0:	6819      	ldr	r1, [r3, #0]
   88bb2:	f7ff ff23 	bl	889fc <_malloc_trim_r>
   88bb6:	e7b3      	b.n	88b20 <_free_r+0x84>
   88bb8:	4610      	mov	r0, r2
   88bba:	e7cd      	b.n	88b58 <_free_r+0xbc>
   88bbc:	1811      	adds	r1, r2, r0
   88bbe:	6849      	ldr	r1, [r1, #4]
   88bc0:	07c9      	lsls	r1, r1, #31
   88bc2:	d444      	bmi.n	88c4e <_free_r+0x1b2>
   88bc4:	6891      	ldr	r1, [r2, #8]
   88bc6:	4403      	add	r3, r0
   88bc8:	68d2      	ldr	r2, [r2, #12]
   88bca:	f043 0001 	orr.w	r0, r3, #1
   88bce:	60ca      	str	r2, [r1, #12]
   88bd0:	6091      	str	r1, [r2, #8]
   88bd2:	6060      	str	r0, [r4, #4]
   88bd4:	50e3      	str	r3, [r4, r3]
   88bd6:	e7a3      	b.n	88b20 <_free_r+0x84>
   88bd8:	2a14      	cmp	r2, #20
   88bda:	d816      	bhi.n	88c0a <_free_r+0x16e>
   88bdc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88be0:	00ff      	lsls	r7, r7, #3
   88be2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   88be6:	e7aa      	b.n	88b3e <_free_r+0xa2>
   88be8:	2301      	movs	r3, #1
   88bea:	10aa      	asrs	r2, r5, #2
   88bec:	684d      	ldr	r5, [r1, #4]
   88bee:	4093      	lsls	r3, r2
   88bf0:	432b      	orrs	r3, r5
   88bf2:	604b      	str	r3, [r1, #4]
   88bf4:	4603      	mov	r3, r0
   88bf6:	e7b0      	b.n	88b5a <_free_r+0xbe>
   88bf8:	f043 0201 	orr.w	r2, r3, #1
   88bfc:	614c      	str	r4, [r1, #20]
   88bfe:	610c      	str	r4, [r1, #16]
   88c00:	60e5      	str	r5, [r4, #12]
   88c02:	60a5      	str	r5, [r4, #8]
   88c04:	6062      	str	r2, [r4, #4]
   88c06:	50e3      	str	r3, [r4, r3]
   88c08:	e78a      	b.n	88b20 <_free_r+0x84>
   88c0a:	2a54      	cmp	r2, #84	; 0x54
   88c0c:	d806      	bhi.n	88c1c <_free_r+0x180>
   88c0e:	0b1a      	lsrs	r2, r3, #12
   88c10:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88c14:	00ff      	lsls	r7, r7, #3
   88c16:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88c1a:	e790      	b.n	88b3e <_free_r+0xa2>
   88c1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88c20:	d806      	bhi.n	88c30 <_free_r+0x194>
   88c22:	0bda      	lsrs	r2, r3, #15
   88c24:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88c28:	00ff      	lsls	r7, r7, #3
   88c2a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88c2e:	e786      	b.n	88b3e <_free_r+0xa2>
   88c30:	f240 5054 	movw	r0, #1364	; 0x554
   88c34:	4282      	cmp	r2, r0
   88c36:	d806      	bhi.n	88c46 <_free_r+0x1aa>
   88c38:	0c9a      	lsrs	r2, r3, #18
   88c3a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88c3e:	00ff      	lsls	r7, r7, #3
   88c40:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88c44:	e77b      	b.n	88b3e <_free_r+0xa2>
   88c46:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88c4a:	257e      	movs	r5, #126	; 0x7e
   88c4c:	e777      	b.n	88b3e <_free_r+0xa2>
   88c4e:	f043 0101 	orr.w	r1, r3, #1
   88c52:	6061      	str	r1, [r4, #4]
   88c54:	6013      	str	r3, [r2, #0]
   88c56:	e763      	b.n	88b20 <_free_r+0x84>
   88c58:	200705d4 	.word	0x200705d4
   88c5c:	200705dc 	.word	0x200705dc
   88c60:	200709e0 	.word	0x200709e0
   88c64:	20070e04 	.word	0x20070e04

00088c68 <__ascii_mbtowc>:
   88c68:	b082      	sub	sp, #8
   88c6a:	b149      	cbz	r1, 88c80 <__ascii_mbtowc+0x18>
   88c6c:	b15a      	cbz	r2, 88c86 <__ascii_mbtowc+0x1e>
   88c6e:	b16b      	cbz	r3, 88c8c <__ascii_mbtowc+0x24>
   88c70:	7813      	ldrb	r3, [r2, #0]
   88c72:	600b      	str	r3, [r1, #0]
   88c74:	7812      	ldrb	r2, [r2, #0]
   88c76:	1c10      	adds	r0, r2, #0
   88c78:	bf18      	it	ne
   88c7a:	2001      	movne	r0, #1
   88c7c:	b002      	add	sp, #8
   88c7e:	4770      	bx	lr
   88c80:	a901      	add	r1, sp, #4
   88c82:	2a00      	cmp	r2, #0
   88c84:	d1f3      	bne.n	88c6e <__ascii_mbtowc+0x6>
   88c86:	4610      	mov	r0, r2
   88c88:	b002      	add	sp, #8
   88c8a:	4770      	bx	lr
   88c8c:	f06f 0001 	mvn.w	r0, #1
   88c90:	e7f4      	b.n	88c7c <__ascii_mbtowc+0x14>
   88c92:	bf00      	nop

00088c94 <memmove>:
   88c94:	4288      	cmp	r0, r1
   88c96:	b5f0      	push	{r4, r5, r6, r7, lr}
   88c98:	d90d      	bls.n	88cb6 <memmove+0x22>
   88c9a:	188b      	adds	r3, r1, r2
   88c9c:	4298      	cmp	r0, r3
   88c9e:	d20a      	bcs.n	88cb6 <memmove+0x22>
   88ca0:	1884      	adds	r4, r0, r2
   88ca2:	2a00      	cmp	r2, #0
   88ca4:	d051      	beq.n	88d4a <memmove+0xb6>
   88ca6:	4622      	mov	r2, r4
   88ca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88cac:	4299      	cmp	r1, r3
   88cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88cb2:	d1f9      	bne.n	88ca8 <memmove+0x14>
   88cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88cb6:	2a0f      	cmp	r2, #15
   88cb8:	d948      	bls.n	88d4c <memmove+0xb8>
   88cba:	ea41 0300 	orr.w	r3, r1, r0
   88cbe:	079b      	lsls	r3, r3, #30
   88cc0:	d146      	bne.n	88d50 <memmove+0xbc>
   88cc2:	4615      	mov	r5, r2
   88cc4:	f100 0410 	add.w	r4, r0, #16
   88cc8:	f101 0310 	add.w	r3, r1, #16
   88ccc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88cd0:	3d10      	subs	r5, #16
   88cd2:	f844 6c10 	str.w	r6, [r4, #-16]
   88cd6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88cda:	2d0f      	cmp	r5, #15
   88cdc:	f844 6c0c 	str.w	r6, [r4, #-12]
   88ce0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88ce4:	f104 0410 	add.w	r4, r4, #16
   88ce8:	f844 6c18 	str.w	r6, [r4, #-24]
   88cec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88cf0:	f103 0310 	add.w	r3, r3, #16
   88cf4:	f844 6c14 	str.w	r6, [r4, #-20]
   88cf8:	d8e8      	bhi.n	88ccc <memmove+0x38>
   88cfa:	f1a2 0310 	sub.w	r3, r2, #16
   88cfe:	f023 030f 	bic.w	r3, r3, #15
   88d02:	f002 0e0f 	and.w	lr, r2, #15
   88d06:	3310      	adds	r3, #16
   88d08:	f1be 0f03 	cmp.w	lr, #3
   88d0c:	4419      	add	r1, r3
   88d0e:	4403      	add	r3, r0
   88d10:	d921      	bls.n	88d56 <memmove+0xc2>
   88d12:	460e      	mov	r6, r1
   88d14:	4674      	mov	r4, lr
   88d16:	1f1d      	subs	r5, r3, #4
   88d18:	f856 7b04 	ldr.w	r7, [r6], #4
   88d1c:	3c04      	subs	r4, #4
   88d1e:	2c03      	cmp	r4, #3
   88d20:	f845 7f04 	str.w	r7, [r5, #4]!
   88d24:	d8f8      	bhi.n	88d18 <memmove+0x84>
   88d26:	f1ae 0404 	sub.w	r4, lr, #4
   88d2a:	f024 0403 	bic.w	r4, r4, #3
   88d2e:	3404      	adds	r4, #4
   88d30:	4421      	add	r1, r4
   88d32:	4423      	add	r3, r4
   88d34:	f002 0203 	and.w	r2, r2, #3
   88d38:	b162      	cbz	r2, 88d54 <memmove+0xc0>
   88d3a:	3b01      	subs	r3, #1
   88d3c:	440a      	add	r2, r1
   88d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88d42:	428a      	cmp	r2, r1
   88d44:	f803 4f01 	strb.w	r4, [r3, #1]!
   88d48:	d1f9      	bne.n	88d3e <memmove+0xaa>
   88d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88d4c:	4603      	mov	r3, r0
   88d4e:	e7f3      	b.n	88d38 <memmove+0xa4>
   88d50:	4603      	mov	r3, r0
   88d52:	e7f2      	b.n	88d3a <memmove+0xa6>
   88d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88d56:	4672      	mov	r2, lr
   88d58:	e7ee      	b.n	88d38 <memmove+0xa4>
   88d5a:	bf00      	nop

00088d5c <_realloc_r>:
   88d5c:	2900      	cmp	r1, #0
   88d5e:	f000 8094 	beq.w	88e8a <_realloc_r+0x12e>
   88d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d66:	460c      	mov	r4, r1
   88d68:	4615      	mov	r5, r2
   88d6a:	b083      	sub	sp, #12
   88d6c:	4680      	mov	r8, r0
   88d6e:	f105 060b 	add.w	r6, r5, #11
   88d72:	f7ff fa19 	bl	881a8 <__malloc_lock>
   88d76:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88d7a:	2e16      	cmp	r6, #22
   88d7c:	f02e 0703 	bic.w	r7, lr, #3
   88d80:	f1a4 0908 	sub.w	r9, r4, #8
   88d84:	d83c      	bhi.n	88e00 <_realloc_r+0xa4>
   88d86:	2210      	movs	r2, #16
   88d88:	4616      	mov	r6, r2
   88d8a:	42b5      	cmp	r5, r6
   88d8c:	d83d      	bhi.n	88e0a <_realloc_r+0xae>
   88d8e:	4297      	cmp	r7, r2
   88d90:	da43      	bge.n	88e1a <_realloc_r+0xbe>
   88d92:	4bc6      	ldr	r3, [pc, #792]	; (890ac <_realloc_r+0x350>)
   88d94:	eb09 0007 	add.w	r0, r9, r7
   88d98:	6899      	ldr	r1, [r3, #8]
   88d9a:	4288      	cmp	r0, r1
   88d9c:	f000 80c3 	beq.w	88f26 <_realloc_r+0x1ca>
   88da0:	6843      	ldr	r3, [r0, #4]
   88da2:	f023 0101 	bic.w	r1, r3, #1
   88da6:	4401      	add	r1, r0
   88da8:	6849      	ldr	r1, [r1, #4]
   88daa:	07c9      	lsls	r1, r1, #31
   88dac:	d54d      	bpl.n	88e4a <_realloc_r+0xee>
   88dae:	f01e 0f01 	tst.w	lr, #1
   88db2:	f000 809b 	beq.w	88eec <_realloc_r+0x190>
   88db6:	4629      	mov	r1, r5
   88db8:	4640      	mov	r0, r8
   88dba:	f7fe fe97 	bl	87aec <_malloc_r>
   88dbe:	4605      	mov	r5, r0
   88dc0:	2800      	cmp	r0, #0
   88dc2:	d03b      	beq.n	88e3c <_realloc_r+0xe0>
   88dc4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88dc8:	f1a0 0208 	sub.w	r2, r0, #8
   88dcc:	f023 0301 	bic.w	r3, r3, #1
   88dd0:	444b      	add	r3, r9
   88dd2:	429a      	cmp	r2, r3
   88dd4:	f000 812b 	beq.w	8902e <_realloc_r+0x2d2>
   88dd8:	1f3a      	subs	r2, r7, #4
   88dda:	2a24      	cmp	r2, #36	; 0x24
   88ddc:	f200 8118 	bhi.w	89010 <_realloc_r+0x2b4>
   88de0:	2a13      	cmp	r2, #19
   88de2:	f200 80eb 	bhi.w	88fbc <_realloc_r+0x260>
   88de6:	4603      	mov	r3, r0
   88de8:	4622      	mov	r2, r4
   88dea:	6811      	ldr	r1, [r2, #0]
   88dec:	6019      	str	r1, [r3, #0]
   88dee:	6851      	ldr	r1, [r2, #4]
   88df0:	6059      	str	r1, [r3, #4]
   88df2:	6892      	ldr	r2, [r2, #8]
   88df4:	609a      	str	r2, [r3, #8]
   88df6:	4621      	mov	r1, r4
   88df8:	4640      	mov	r0, r8
   88dfa:	f7ff fe4f 	bl	88a9c <_free_r>
   88dfe:	e01d      	b.n	88e3c <_realloc_r+0xe0>
   88e00:	f026 0607 	bic.w	r6, r6, #7
   88e04:	2e00      	cmp	r6, #0
   88e06:	4632      	mov	r2, r6
   88e08:	dabf      	bge.n	88d8a <_realloc_r+0x2e>
   88e0a:	2500      	movs	r5, #0
   88e0c:	230c      	movs	r3, #12
   88e0e:	4628      	mov	r0, r5
   88e10:	f8c8 3000 	str.w	r3, [r8]
   88e14:	b003      	add	sp, #12
   88e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e1a:	4625      	mov	r5, r4
   88e1c:	1bbb      	subs	r3, r7, r6
   88e1e:	2b0f      	cmp	r3, #15
   88e20:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88e24:	d81d      	bhi.n	88e62 <_realloc_r+0x106>
   88e26:	f002 0201 	and.w	r2, r2, #1
   88e2a:	433a      	orrs	r2, r7
   88e2c:	eb09 0107 	add.w	r1, r9, r7
   88e30:	f8c9 2004 	str.w	r2, [r9, #4]
   88e34:	684b      	ldr	r3, [r1, #4]
   88e36:	f043 0301 	orr.w	r3, r3, #1
   88e3a:	604b      	str	r3, [r1, #4]
   88e3c:	4640      	mov	r0, r8
   88e3e:	f7ff f9b9 	bl	881b4 <__malloc_unlock>
   88e42:	4628      	mov	r0, r5
   88e44:	b003      	add	sp, #12
   88e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e4a:	f023 0303 	bic.w	r3, r3, #3
   88e4e:	18f9      	adds	r1, r7, r3
   88e50:	4291      	cmp	r1, r2
   88e52:	db1d      	blt.n	88e90 <_realloc_r+0x134>
   88e54:	68c3      	ldr	r3, [r0, #12]
   88e56:	6882      	ldr	r2, [r0, #8]
   88e58:	4625      	mov	r5, r4
   88e5a:	60d3      	str	r3, [r2, #12]
   88e5c:	460f      	mov	r7, r1
   88e5e:	609a      	str	r2, [r3, #8]
   88e60:	e7dc      	b.n	88e1c <_realloc_r+0xc0>
   88e62:	f002 0201 	and.w	r2, r2, #1
   88e66:	eb09 0106 	add.w	r1, r9, r6
   88e6a:	f043 0301 	orr.w	r3, r3, #1
   88e6e:	4332      	orrs	r2, r6
   88e70:	f8c9 2004 	str.w	r2, [r9, #4]
   88e74:	444f      	add	r7, r9
   88e76:	604b      	str	r3, [r1, #4]
   88e78:	687b      	ldr	r3, [r7, #4]
   88e7a:	3108      	adds	r1, #8
   88e7c:	f043 0301 	orr.w	r3, r3, #1
   88e80:	607b      	str	r3, [r7, #4]
   88e82:	4640      	mov	r0, r8
   88e84:	f7ff fe0a 	bl	88a9c <_free_r>
   88e88:	e7d8      	b.n	88e3c <_realloc_r+0xe0>
   88e8a:	4611      	mov	r1, r2
   88e8c:	f7fe be2e 	b.w	87aec <_malloc_r>
   88e90:	f01e 0f01 	tst.w	lr, #1
   88e94:	d18f      	bne.n	88db6 <_realloc_r+0x5a>
   88e96:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88e9a:	eba9 0a01 	sub.w	sl, r9, r1
   88e9e:	f8da 1004 	ldr.w	r1, [sl, #4]
   88ea2:	f021 0103 	bic.w	r1, r1, #3
   88ea6:	440b      	add	r3, r1
   88ea8:	443b      	add	r3, r7
   88eaa:	4293      	cmp	r3, r2
   88eac:	db26      	blt.n	88efc <_realloc_r+0x1a0>
   88eae:	4655      	mov	r5, sl
   88eb0:	68c1      	ldr	r1, [r0, #12]
   88eb2:	6880      	ldr	r0, [r0, #8]
   88eb4:	1f3a      	subs	r2, r7, #4
   88eb6:	60c1      	str	r1, [r0, #12]
   88eb8:	6088      	str	r0, [r1, #8]
   88eba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88ebe:	f8da 100c 	ldr.w	r1, [sl, #12]
   88ec2:	2a24      	cmp	r2, #36	; 0x24
   88ec4:	60c1      	str	r1, [r0, #12]
   88ec6:	6088      	str	r0, [r1, #8]
   88ec8:	d826      	bhi.n	88f18 <_realloc_r+0x1bc>
   88eca:	2a13      	cmp	r2, #19
   88ecc:	f240 8081 	bls.w	88fd2 <_realloc_r+0x276>
   88ed0:	6821      	ldr	r1, [r4, #0]
   88ed2:	2a1b      	cmp	r2, #27
   88ed4:	f8ca 1008 	str.w	r1, [sl, #8]
   88ed8:	6861      	ldr	r1, [r4, #4]
   88eda:	f8ca 100c 	str.w	r1, [sl, #12]
   88ede:	f200 80ad 	bhi.w	8903c <_realloc_r+0x2e0>
   88ee2:	f104 0008 	add.w	r0, r4, #8
   88ee6:	f10a 0210 	add.w	r2, sl, #16
   88eea:	e074      	b.n	88fd6 <_realloc_r+0x27a>
   88eec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   88ef0:	eba9 0a03 	sub.w	sl, r9, r3
   88ef4:	f8da 1004 	ldr.w	r1, [sl, #4]
   88ef8:	f021 0103 	bic.w	r1, r1, #3
   88efc:	187b      	adds	r3, r7, r1
   88efe:	4293      	cmp	r3, r2
   88f00:	f6ff af59 	blt.w	88db6 <_realloc_r+0x5a>
   88f04:	4655      	mov	r5, sl
   88f06:	f8da 100c 	ldr.w	r1, [sl, #12]
   88f0a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88f0e:	1f3a      	subs	r2, r7, #4
   88f10:	2a24      	cmp	r2, #36	; 0x24
   88f12:	60c1      	str	r1, [r0, #12]
   88f14:	6088      	str	r0, [r1, #8]
   88f16:	d9d8      	bls.n	88eca <_realloc_r+0x16e>
   88f18:	4621      	mov	r1, r4
   88f1a:	4628      	mov	r0, r5
   88f1c:	461f      	mov	r7, r3
   88f1e:	46d1      	mov	r9, sl
   88f20:	f7ff feb8 	bl	88c94 <memmove>
   88f24:	e77a      	b.n	88e1c <_realloc_r+0xc0>
   88f26:	6841      	ldr	r1, [r0, #4]
   88f28:	f106 0010 	add.w	r0, r6, #16
   88f2c:	f021 0b03 	bic.w	fp, r1, #3
   88f30:	44bb      	add	fp, r7
   88f32:	4583      	cmp	fp, r0
   88f34:	da58      	bge.n	88fe8 <_realloc_r+0x28c>
   88f36:	f01e 0f01 	tst.w	lr, #1
   88f3a:	f47f af3c 	bne.w	88db6 <_realloc_r+0x5a>
   88f3e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88f42:	eba9 0a01 	sub.w	sl, r9, r1
   88f46:	f8da 1004 	ldr.w	r1, [sl, #4]
   88f4a:	f021 0103 	bic.w	r1, r1, #3
   88f4e:	448b      	add	fp, r1
   88f50:	4558      	cmp	r0, fp
   88f52:	dcd3      	bgt.n	88efc <_realloc_r+0x1a0>
   88f54:	4655      	mov	r5, sl
   88f56:	f8da 100c 	ldr.w	r1, [sl, #12]
   88f5a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88f5e:	1f3a      	subs	r2, r7, #4
   88f60:	2a24      	cmp	r2, #36	; 0x24
   88f62:	60c1      	str	r1, [r0, #12]
   88f64:	6088      	str	r0, [r1, #8]
   88f66:	f200 808d 	bhi.w	89084 <_realloc_r+0x328>
   88f6a:	2a13      	cmp	r2, #19
   88f6c:	f240 8087 	bls.w	8907e <_realloc_r+0x322>
   88f70:	6821      	ldr	r1, [r4, #0]
   88f72:	2a1b      	cmp	r2, #27
   88f74:	f8ca 1008 	str.w	r1, [sl, #8]
   88f78:	6861      	ldr	r1, [r4, #4]
   88f7a:	f8ca 100c 	str.w	r1, [sl, #12]
   88f7e:	f200 8088 	bhi.w	89092 <_realloc_r+0x336>
   88f82:	f104 0108 	add.w	r1, r4, #8
   88f86:	f10a 0210 	add.w	r2, sl, #16
   88f8a:	6808      	ldr	r0, [r1, #0]
   88f8c:	6010      	str	r0, [r2, #0]
   88f8e:	6848      	ldr	r0, [r1, #4]
   88f90:	6050      	str	r0, [r2, #4]
   88f92:	6889      	ldr	r1, [r1, #8]
   88f94:	6091      	str	r1, [r2, #8]
   88f96:	ebab 0206 	sub.w	r2, fp, r6
   88f9a:	eb0a 0106 	add.w	r1, sl, r6
   88f9e:	f042 0201 	orr.w	r2, r2, #1
   88fa2:	6099      	str	r1, [r3, #8]
   88fa4:	604a      	str	r2, [r1, #4]
   88fa6:	f8da 3004 	ldr.w	r3, [sl, #4]
   88faa:	4640      	mov	r0, r8
   88fac:	f003 0301 	and.w	r3, r3, #1
   88fb0:	431e      	orrs	r6, r3
   88fb2:	f8ca 6004 	str.w	r6, [sl, #4]
   88fb6:	f7ff f8fd 	bl	881b4 <__malloc_unlock>
   88fba:	e742      	b.n	88e42 <_realloc_r+0xe6>
   88fbc:	6823      	ldr	r3, [r4, #0]
   88fbe:	2a1b      	cmp	r2, #27
   88fc0:	6003      	str	r3, [r0, #0]
   88fc2:	6863      	ldr	r3, [r4, #4]
   88fc4:	6043      	str	r3, [r0, #4]
   88fc6:	d827      	bhi.n	89018 <_realloc_r+0x2bc>
   88fc8:	f100 0308 	add.w	r3, r0, #8
   88fcc:	f104 0208 	add.w	r2, r4, #8
   88fd0:	e70b      	b.n	88dea <_realloc_r+0x8e>
   88fd2:	4620      	mov	r0, r4
   88fd4:	462a      	mov	r2, r5
   88fd6:	6801      	ldr	r1, [r0, #0]
   88fd8:	461f      	mov	r7, r3
   88fda:	6011      	str	r1, [r2, #0]
   88fdc:	6841      	ldr	r1, [r0, #4]
   88fde:	46d1      	mov	r9, sl
   88fe0:	6051      	str	r1, [r2, #4]
   88fe2:	6883      	ldr	r3, [r0, #8]
   88fe4:	6093      	str	r3, [r2, #8]
   88fe6:	e719      	b.n	88e1c <_realloc_r+0xc0>
   88fe8:	ebab 0b06 	sub.w	fp, fp, r6
   88fec:	eb09 0106 	add.w	r1, r9, r6
   88ff0:	f04b 0201 	orr.w	r2, fp, #1
   88ff4:	6099      	str	r1, [r3, #8]
   88ff6:	604a      	str	r2, [r1, #4]
   88ff8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88ffc:	4640      	mov	r0, r8
   88ffe:	f003 0301 	and.w	r3, r3, #1
   89002:	431e      	orrs	r6, r3
   89004:	f844 6c04 	str.w	r6, [r4, #-4]
   89008:	f7ff f8d4 	bl	881b4 <__malloc_unlock>
   8900c:	4625      	mov	r5, r4
   8900e:	e718      	b.n	88e42 <_realloc_r+0xe6>
   89010:	4621      	mov	r1, r4
   89012:	f7ff fe3f 	bl	88c94 <memmove>
   89016:	e6ee      	b.n	88df6 <_realloc_r+0x9a>
   89018:	68a3      	ldr	r3, [r4, #8]
   8901a:	2a24      	cmp	r2, #36	; 0x24
   8901c:	6083      	str	r3, [r0, #8]
   8901e:	68e3      	ldr	r3, [r4, #12]
   89020:	60c3      	str	r3, [r0, #12]
   89022:	d018      	beq.n	89056 <_realloc_r+0x2fa>
   89024:	f100 0310 	add.w	r3, r0, #16
   89028:	f104 0210 	add.w	r2, r4, #16
   8902c:	e6dd      	b.n	88dea <_realloc_r+0x8e>
   8902e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89032:	4625      	mov	r5, r4
   89034:	f023 0303 	bic.w	r3, r3, #3
   89038:	441f      	add	r7, r3
   8903a:	e6ef      	b.n	88e1c <_realloc_r+0xc0>
   8903c:	68a1      	ldr	r1, [r4, #8]
   8903e:	2a24      	cmp	r2, #36	; 0x24
   89040:	f8ca 1010 	str.w	r1, [sl, #16]
   89044:	68e1      	ldr	r1, [r4, #12]
   89046:	f8ca 1014 	str.w	r1, [sl, #20]
   8904a:	d00d      	beq.n	89068 <_realloc_r+0x30c>
   8904c:	f104 0010 	add.w	r0, r4, #16
   89050:	f10a 0218 	add.w	r2, sl, #24
   89054:	e7bf      	b.n	88fd6 <_realloc_r+0x27a>
   89056:	6922      	ldr	r2, [r4, #16]
   89058:	f100 0318 	add.w	r3, r0, #24
   8905c:	6102      	str	r2, [r0, #16]
   8905e:	6961      	ldr	r1, [r4, #20]
   89060:	f104 0218 	add.w	r2, r4, #24
   89064:	6141      	str	r1, [r0, #20]
   89066:	e6c0      	b.n	88dea <_realloc_r+0x8e>
   89068:	6922      	ldr	r2, [r4, #16]
   8906a:	f104 0018 	add.w	r0, r4, #24
   8906e:	f8ca 2018 	str.w	r2, [sl, #24]
   89072:	6961      	ldr	r1, [r4, #20]
   89074:	f10a 0220 	add.w	r2, sl, #32
   89078:	f8ca 101c 	str.w	r1, [sl, #28]
   8907c:	e7ab      	b.n	88fd6 <_realloc_r+0x27a>
   8907e:	4621      	mov	r1, r4
   89080:	462a      	mov	r2, r5
   89082:	e782      	b.n	88f8a <_realloc_r+0x22e>
   89084:	4621      	mov	r1, r4
   89086:	4628      	mov	r0, r5
   89088:	9301      	str	r3, [sp, #4]
   8908a:	f7ff fe03 	bl	88c94 <memmove>
   8908e:	9b01      	ldr	r3, [sp, #4]
   89090:	e781      	b.n	88f96 <_realloc_r+0x23a>
   89092:	68a1      	ldr	r1, [r4, #8]
   89094:	2a24      	cmp	r2, #36	; 0x24
   89096:	f8ca 1010 	str.w	r1, [sl, #16]
   8909a:	68e1      	ldr	r1, [r4, #12]
   8909c:	f8ca 1014 	str.w	r1, [sl, #20]
   890a0:	d006      	beq.n	890b0 <_realloc_r+0x354>
   890a2:	f104 0110 	add.w	r1, r4, #16
   890a6:	f10a 0218 	add.w	r2, sl, #24
   890aa:	e76e      	b.n	88f8a <_realloc_r+0x22e>
   890ac:	200705d4 	.word	0x200705d4
   890b0:	6922      	ldr	r2, [r4, #16]
   890b2:	f104 0118 	add.w	r1, r4, #24
   890b6:	f8ca 2018 	str.w	r2, [sl, #24]
   890ba:	6960      	ldr	r0, [r4, #20]
   890bc:	f10a 0220 	add.w	r2, sl, #32
   890c0:	f8ca 001c 	str.w	r0, [sl, #28]
   890c4:	e761      	b.n	88f8a <_realloc_r+0x22e>
   890c6:	bf00      	nop

000890c8 <__ascii_wctomb>:
   890c8:	b119      	cbz	r1, 890d2 <__ascii_wctomb+0xa>
   890ca:	2aff      	cmp	r2, #255	; 0xff
   890cc:	d803      	bhi.n	890d6 <__ascii_wctomb+0xe>
   890ce:	700a      	strb	r2, [r1, #0]
   890d0:	2101      	movs	r1, #1
   890d2:	4608      	mov	r0, r1
   890d4:	4770      	bx	lr
   890d6:	238a      	movs	r3, #138	; 0x8a
   890d8:	f04f 31ff 	mov.w	r1, #4294967295
   890dc:	6003      	str	r3, [r0, #0]
   890de:	e7f8      	b.n	890d2 <__ascii_wctomb+0xa>

000890e0 <__gedf2>:
   890e0:	f04f 3cff 	mov.w	ip, #4294967295
   890e4:	e006      	b.n	890f4 <__cmpdf2+0x4>
   890e6:	bf00      	nop

000890e8 <__ledf2>:
   890e8:	f04f 0c01 	mov.w	ip, #1
   890ec:	e002      	b.n	890f4 <__cmpdf2+0x4>
   890ee:	bf00      	nop

000890f0 <__cmpdf2>:
   890f0:	f04f 0c01 	mov.w	ip, #1
   890f4:	f84d cd04 	str.w	ip, [sp, #-4]!
   890f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   890fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89100:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89104:	bf18      	it	ne
   89106:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8910a:	d01b      	beq.n	89144 <__cmpdf2+0x54>
   8910c:	b001      	add	sp, #4
   8910e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   89112:	bf0c      	ite	eq
   89114:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89118:	ea91 0f03 	teqne	r1, r3
   8911c:	bf02      	ittt	eq
   8911e:	ea90 0f02 	teqeq	r0, r2
   89122:	2000      	moveq	r0, #0
   89124:	4770      	bxeq	lr
   89126:	f110 0f00 	cmn.w	r0, #0
   8912a:	ea91 0f03 	teq	r1, r3
   8912e:	bf58      	it	pl
   89130:	4299      	cmppl	r1, r3
   89132:	bf08      	it	eq
   89134:	4290      	cmpeq	r0, r2
   89136:	bf2c      	ite	cs
   89138:	17d8      	asrcs	r0, r3, #31
   8913a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8913e:	f040 0001 	orr.w	r0, r0, #1
   89142:	4770      	bx	lr
   89144:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89148:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8914c:	d102      	bne.n	89154 <__cmpdf2+0x64>
   8914e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   89152:	d107      	bne.n	89164 <__cmpdf2+0x74>
   89154:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8915c:	d1d6      	bne.n	8910c <__cmpdf2+0x1c>
   8915e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   89162:	d0d3      	beq.n	8910c <__cmpdf2+0x1c>
   89164:	f85d 0b04 	ldr.w	r0, [sp], #4
   89168:	4770      	bx	lr
   8916a:	bf00      	nop

0008916c <__aeabi_cdrcmple>:
   8916c:	4684      	mov	ip, r0
   8916e:	4610      	mov	r0, r2
   89170:	4662      	mov	r2, ip
   89172:	468c      	mov	ip, r1
   89174:	4619      	mov	r1, r3
   89176:	4663      	mov	r3, ip
   89178:	e000      	b.n	8917c <__aeabi_cdcmpeq>
   8917a:	bf00      	nop

0008917c <__aeabi_cdcmpeq>:
   8917c:	b501      	push	{r0, lr}
   8917e:	f7ff ffb7 	bl	890f0 <__cmpdf2>
   89182:	2800      	cmp	r0, #0
   89184:	bf48      	it	mi
   89186:	f110 0f00 	cmnmi.w	r0, #0
   8918a:	bd01      	pop	{r0, pc}

0008918c <__aeabi_dcmpeq>:
   8918c:	f84d ed08 	str.w	lr, [sp, #-8]!
   89190:	f7ff fff4 	bl	8917c <__aeabi_cdcmpeq>
   89194:	bf0c      	ite	eq
   89196:	2001      	moveq	r0, #1
   89198:	2000      	movne	r0, #0
   8919a:	f85d fb08 	ldr.w	pc, [sp], #8
   8919e:	bf00      	nop

000891a0 <__aeabi_dcmplt>:
   891a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   891a4:	f7ff ffea 	bl	8917c <__aeabi_cdcmpeq>
   891a8:	bf34      	ite	cc
   891aa:	2001      	movcc	r0, #1
   891ac:	2000      	movcs	r0, #0
   891ae:	f85d fb08 	ldr.w	pc, [sp], #8
   891b2:	bf00      	nop

000891b4 <__aeabi_dcmple>:
   891b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   891b8:	f7ff ffe0 	bl	8917c <__aeabi_cdcmpeq>
   891bc:	bf94      	ite	ls
   891be:	2001      	movls	r0, #1
   891c0:	2000      	movhi	r0, #0
   891c2:	f85d fb08 	ldr.w	pc, [sp], #8
   891c6:	bf00      	nop

000891c8 <__aeabi_dcmpge>:
   891c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   891cc:	f7ff ffce 	bl	8916c <__aeabi_cdrcmple>
   891d0:	bf94      	ite	ls
   891d2:	2001      	movls	r0, #1
   891d4:	2000      	movhi	r0, #0
   891d6:	f85d fb08 	ldr.w	pc, [sp], #8
   891da:	bf00      	nop

000891dc <__aeabi_dcmpgt>:
   891dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   891e0:	f7ff ffc4 	bl	8916c <__aeabi_cdrcmple>
   891e4:	bf34      	ite	cc
   891e6:	2001      	movcc	r0, #1
   891e8:	2000      	movcs	r0, #0
   891ea:	f85d fb08 	ldr.w	pc, [sp], #8
   891ee:	bf00      	nop

000891f0 <__aeabi_dcmpun>:
   891f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   891f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   891f8:	d102      	bne.n	89200 <__aeabi_dcmpun+0x10>
   891fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   891fe:	d10a      	bne.n	89216 <__aeabi_dcmpun+0x26>
   89200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89204:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89208:	d102      	bne.n	89210 <__aeabi_dcmpun+0x20>
   8920a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8920e:	d102      	bne.n	89216 <__aeabi_dcmpun+0x26>
   89210:	f04f 0000 	mov.w	r0, #0
   89214:	4770      	bx	lr
   89216:	f04f 0001 	mov.w	r0, #1
   8921a:	4770      	bx	lr

0008921c <__aeabi_d2iz>:
   8921c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   89220:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89224:	d215      	bcs.n	89252 <__aeabi_d2iz+0x36>
   89226:	d511      	bpl.n	8924c <__aeabi_d2iz+0x30>
   89228:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8922c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89230:	d912      	bls.n	89258 <__aeabi_d2iz+0x3c>
   89232:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8923a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8923e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89242:	fa23 f002 	lsr.w	r0, r3, r2
   89246:	bf18      	it	ne
   89248:	4240      	negne	r0, r0
   8924a:	4770      	bx	lr
   8924c:	f04f 0000 	mov.w	r0, #0
   89250:	4770      	bx	lr
   89252:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   89256:	d105      	bne.n	89264 <__aeabi_d2iz+0x48>
   89258:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8925c:	bf08      	it	eq
   8925e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89262:	4770      	bx	lr
   89264:	f04f 0000 	mov.w	r0, #0
   89268:	4770      	bx	lr
   8926a:	bf00      	nop

0008926c <__aeabi_uldivmod>:
   8926c:	b953      	cbnz	r3, 89284 <__aeabi_uldivmod+0x18>
   8926e:	b94a      	cbnz	r2, 89284 <__aeabi_uldivmod+0x18>
   89270:	2900      	cmp	r1, #0
   89272:	bf08      	it	eq
   89274:	2800      	cmpeq	r0, #0
   89276:	bf1c      	itt	ne
   89278:	f04f 31ff 	movne.w	r1, #4294967295
   8927c:	f04f 30ff 	movne.w	r0, #4294967295
   89280:	f000 b97a 	b.w	89578 <__aeabi_idiv0>
   89284:	f1ad 0c08 	sub.w	ip, sp, #8
   89288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8928c:	f000 f806 	bl	8929c <__udivmoddi4>
   89290:	f8dd e004 	ldr.w	lr, [sp, #4]
   89294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89298:	b004      	add	sp, #16
   8929a:	4770      	bx	lr

0008929c <__udivmoddi4>:
   8929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   892a0:	468c      	mov	ip, r1
   892a2:	460e      	mov	r6, r1
   892a4:	4604      	mov	r4, r0
   892a6:	9d08      	ldr	r5, [sp, #32]
   892a8:	2b00      	cmp	r3, #0
   892aa:	d150      	bne.n	8934e <__udivmoddi4+0xb2>
   892ac:	428a      	cmp	r2, r1
   892ae:	4617      	mov	r7, r2
   892b0:	d96c      	bls.n	8938c <__udivmoddi4+0xf0>
   892b2:	fab2 fe82 	clz	lr, r2
   892b6:	f1be 0f00 	cmp.w	lr, #0
   892ba:	d00b      	beq.n	892d4 <__udivmoddi4+0x38>
   892bc:	f1ce 0c20 	rsb	ip, lr, #32
   892c0:	fa01 f60e 	lsl.w	r6, r1, lr
   892c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   892c8:	fa02 f70e 	lsl.w	r7, r2, lr
   892cc:	ea4c 0c06 	orr.w	ip, ip, r6
   892d0:	fa00 f40e 	lsl.w	r4, r0, lr
   892d4:	0c3a      	lsrs	r2, r7, #16
   892d6:	fbbc f9f2 	udiv	r9, ip, r2
   892da:	b2bb      	uxth	r3, r7
   892dc:	fb02 cc19 	mls	ip, r2, r9, ip
   892e0:	fb09 fa03 	mul.w	sl, r9, r3
   892e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   892e8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   892ec:	45b2      	cmp	sl, r6
   892ee:	d90a      	bls.n	89306 <__udivmoddi4+0x6a>
   892f0:	19f6      	adds	r6, r6, r7
   892f2:	f109 31ff 	add.w	r1, r9, #4294967295
   892f6:	f080 8125 	bcs.w	89544 <__udivmoddi4+0x2a8>
   892fa:	45b2      	cmp	sl, r6
   892fc:	f240 8122 	bls.w	89544 <__udivmoddi4+0x2a8>
   89300:	f1a9 0902 	sub.w	r9, r9, #2
   89304:	443e      	add	r6, r7
   89306:	eba6 060a 	sub.w	r6, r6, sl
   8930a:	fbb6 f0f2 	udiv	r0, r6, r2
   8930e:	fb02 6610 	mls	r6, r2, r0, r6
   89312:	fb00 f303 	mul.w	r3, r0, r3
   89316:	b2a4      	uxth	r4, r4
   89318:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8931c:	42a3      	cmp	r3, r4
   8931e:	d909      	bls.n	89334 <__udivmoddi4+0x98>
   89320:	19e4      	adds	r4, r4, r7
   89322:	f100 32ff 	add.w	r2, r0, #4294967295
   89326:	f080 810b 	bcs.w	89540 <__udivmoddi4+0x2a4>
   8932a:	42a3      	cmp	r3, r4
   8932c:	f240 8108 	bls.w	89540 <__udivmoddi4+0x2a4>
   89330:	3802      	subs	r0, #2
   89332:	443c      	add	r4, r7
   89334:	2100      	movs	r1, #0
   89336:	1ae4      	subs	r4, r4, r3
   89338:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8933c:	2d00      	cmp	r5, #0
   8933e:	d062      	beq.n	89406 <__udivmoddi4+0x16a>
   89340:	2300      	movs	r3, #0
   89342:	fa24 f40e 	lsr.w	r4, r4, lr
   89346:	602c      	str	r4, [r5, #0]
   89348:	606b      	str	r3, [r5, #4]
   8934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8934e:	428b      	cmp	r3, r1
   89350:	d907      	bls.n	89362 <__udivmoddi4+0xc6>
   89352:	2d00      	cmp	r5, #0
   89354:	d055      	beq.n	89402 <__udivmoddi4+0x166>
   89356:	2100      	movs	r1, #0
   89358:	e885 0041 	stmia.w	r5, {r0, r6}
   8935c:	4608      	mov	r0, r1
   8935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89362:	fab3 f183 	clz	r1, r3
   89366:	2900      	cmp	r1, #0
   89368:	f040 808f 	bne.w	8948a <__udivmoddi4+0x1ee>
   8936c:	42b3      	cmp	r3, r6
   8936e:	d302      	bcc.n	89376 <__udivmoddi4+0xda>
   89370:	4282      	cmp	r2, r0
   89372:	f200 80fc 	bhi.w	8956e <__udivmoddi4+0x2d2>
   89376:	1a84      	subs	r4, r0, r2
   89378:	eb66 0603 	sbc.w	r6, r6, r3
   8937c:	2001      	movs	r0, #1
   8937e:	46b4      	mov	ip, r6
   89380:	2d00      	cmp	r5, #0
   89382:	d040      	beq.n	89406 <__udivmoddi4+0x16a>
   89384:	e885 1010 	stmia.w	r5, {r4, ip}
   89388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8938c:	b912      	cbnz	r2, 89394 <__udivmoddi4+0xf8>
   8938e:	2701      	movs	r7, #1
   89390:	fbb7 f7f2 	udiv	r7, r7, r2
   89394:	fab7 fe87 	clz	lr, r7
   89398:	f1be 0f00 	cmp.w	lr, #0
   8939c:	d135      	bne.n	8940a <__udivmoddi4+0x16e>
   8939e:	2101      	movs	r1, #1
   893a0:	1bf6      	subs	r6, r6, r7
   893a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   893a6:	fa1f f887 	uxth.w	r8, r7
   893aa:	fbb6 f2fc 	udiv	r2, r6, ip
   893ae:	fb0c 6612 	mls	r6, ip, r2, r6
   893b2:	fb08 f002 	mul.w	r0, r8, r2
   893b6:	0c23      	lsrs	r3, r4, #16
   893b8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   893bc:	42b0      	cmp	r0, r6
   893be:	d907      	bls.n	893d0 <__udivmoddi4+0x134>
   893c0:	19f6      	adds	r6, r6, r7
   893c2:	f102 33ff 	add.w	r3, r2, #4294967295
   893c6:	d202      	bcs.n	893ce <__udivmoddi4+0x132>
   893c8:	42b0      	cmp	r0, r6
   893ca:	f200 80d2 	bhi.w	89572 <__udivmoddi4+0x2d6>
   893ce:	461a      	mov	r2, r3
   893d0:	1a36      	subs	r6, r6, r0
   893d2:	fbb6 f0fc 	udiv	r0, r6, ip
   893d6:	fb0c 6610 	mls	r6, ip, r0, r6
   893da:	fb08 f800 	mul.w	r8, r8, r0
   893de:	b2a3      	uxth	r3, r4
   893e0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   893e4:	45a0      	cmp	r8, r4
   893e6:	d907      	bls.n	893f8 <__udivmoddi4+0x15c>
   893e8:	19e4      	adds	r4, r4, r7
   893ea:	f100 33ff 	add.w	r3, r0, #4294967295
   893ee:	d202      	bcs.n	893f6 <__udivmoddi4+0x15a>
   893f0:	45a0      	cmp	r8, r4
   893f2:	f200 80b9 	bhi.w	89568 <__udivmoddi4+0x2cc>
   893f6:	4618      	mov	r0, r3
   893f8:	eba4 0408 	sub.w	r4, r4, r8
   893fc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   89400:	e79c      	b.n	8933c <__udivmoddi4+0xa0>
   89402:	4629      	mov	r1, r5
   89404:	4628      	mov	r0, r5
   89406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8940a:	fa07 f70e 	lsl.w	r7, r7, lr
   8940e:	f1ce 0320 	rsb	r3, lr, #32
   89412:	fa26 f203 	lsr.w	r2, r6, r3
   89416:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8941a:	fbb2 f1fc 	udiv	r1, r2, ip
   8941e:	fa1f f887 	uxth.w	r8, r7
   89422:	fb0c 2211 	mls	r2, ip, r1, r2
   89426:	fa06 f60e 	lsl.w	r6, r6, lr
   8942a:	fa20 f303 	lsr.w	r3, r0, r3
   8942e:	fb01 f908 	mul.w	r9, r1, r8
   89432:	4333      	orrs	r3, r6
   89434:	0c1e      	lsrs	r6, r3, #16
   89436:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8943a:	45b1      	cmp	r9, r6
   8943c:	fa00 f40e 	lsl.w	r4, r0, lr
   89440:	d909      	bls.n	89456 <__udivmoddi4+0x1ba>
   89442:	19f6      	adds	r6, r6, r7
   89444:	f101 32ff 	add.w	r2, r1, #4294967295
   89448:	f080 808c 	bcs.w	89564 <__udivmoddi4+0x2c8>
   8944c:	45b1      	cmp	r9, r6
   8944e:	f240 8089 	bls.w	89564 <__udivmoddi4+0x2c8>
   89452:	3902      	subs	r1, #2
   89454:	443e      	add	r6, r7
   89456:	eba6 0609 	sub.w	r6, r6, r9
   8945a:	fbb6 f0fc 	udiv	r0, r6, ip
   8945e:	fb0c 6210 	mls	r2, ip, r0, r6
   89462:	fb00 f908 	mul.w	r9, r0, r8
   89466:	b29e      	uxth	r6, r3
   89468:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8946c:	45b1      	cmp	r9, r6
   8946e:	d907      	bls.n	89480 <__udivmoddi4+0x1e4>
   89470:	19f6      	adds	r6, r6, r7
   89472:	f100 33ff 	add.w	r3, r0, #4294967295
   89476:	d271      	bcs.n	8955c <__udivmoddi4+0x2c0>
   89478:	45b1      	cmp	r9, r6
   8947a:	d96f      	bls.n	8955c <__udivmoddi4+0x2c0>
   8947c:	3802      	subs	r0, #2
   8947e:	443e      	add	r6, r7
   89480:	eba6 0609 	sub.w	r6, r6, r9
   89484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   89488:	e78f      	b.n	893aa <__udivmoddi4+0x10e>
   8948a:	f1c1 0720 	rsb	r7, r1, #32
   8948e:	fa22 f807 	lsr.w	r8, r2, r7
   89492:	408b      	lsls	r3, r1
   89494:	ea48 0303 	orr.w	r3, r8, r3
   89498:	fa26 f407 	lsr.w	r4, r6, r7
   8949c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   894a0:	fbb4 f9fe 	udiv	r9, r4, lr
   894a4:	fa1f fc83 	uxth.w	ip, r3
   894a8:	fb0e 4419 	mls	r4, lr, r9, r4
   894ac:	408e      	lsls	r6, r1
   894ae:	fa20 f807 	lsr.w	r8, r0, r7
   894b2:	fb09 fa0c 	mul.w	sl, r9, ip
   894b6:	ea48 0806 	orr.w	r8, r8, r6
   894ba:	ea4f 4618 	mov.w	r6, r8, lsr #16
   894be:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   894c2:	45a2      	cmp	sl, r4
   894c4:	fa02 f201 	lsl.w	r2, r2, r1
   894c8:	fa00 f601 	lsl.w	r6, r0, r1
   894cc:	d908      	bls.n	894e0 <__udivmoddi4+0x244>
   894ce:	18e4      	adds	r4, r4, r3
   894d0:	f109 30ff 	add.w	r0, r9, #4294967295
   894d4:	d244      	bcs.n	89560 <__udivmoddi4+0x2c4>
   894d6:	45a2      	cmp	sl, r4
   894d8:	d942      	bls.n	89560 <__udivmoddi4+0x2c4>
   894da:	f1a9 0902 	sub.w	r9, r9, #2
   894de:	441c      	add	r4, r3
   894e0:	eba4 040a 	sub.w	r4, r4, sl
   894e4:	fbb4 f0fe 	udiv	r0, r4, lr
   894e8:	fb0e 4410 	mls	r4, lr, r0, r4
   894ec:	fb00 fc0c 	mul.w	ip, r0, ip
   894f0:	fa1f f888 	uxth.w	r8, r8
   894f4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   894f8:	45a4      	cmp	ip, r4
   894fa:	d907      	bls.n	8950c <__udivmoddi4+0x270>
   894fc:	18e4      	adds	r4, r4, r3
   894fe:	f100 3eff 	add.w	lr, r0, #4294967295
   89502:	d229      	bcs.n	89558 <__udivmoddi4+0x2bc>
   89504:	45a4      	cmp	ip, r4
   89506:	d927      	bls.n	89558 <__udivmoddi4+0x2bc>
   89508:	3802      	subs	r0, #2
   8950a:	441c      	add	r4, r3
   8950c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89510:	fba0 8902 	umull	r8, r9, r0, r2
   89514:	eba4 0c0c 	sub.w	ip, r4, ip
   89518:	45cc      	cmp	ip, r9
   8951a:	46c2      	mov	sl, r8
   8951c:	46ce      	mov	lr, r9
   8951e:	d315      	bcc.n	8954c <__udivmoddi4+0x2b0>
   89520:	d012      	beq.n	89548 <__udivmoddi4+0x2ac>
   89522:	b155      	cbz	r5, 8953a <__udivmoddi4+0x29e>
   89524:	ebb6 030a 	subs.w	r3, r6, sl
   89528:	eb6c 060e 	sbc.w	r6, ip, lr
   8952c:	fa06 f707 	lsl.w	r7, r6, r7
   89530:	40cb      	lsrs	r3, r1
   89532:	431f      	orrs	r7, r3
   89534:	40ce      	lsrs	r6, r1
   89536:	602f      	str	r7, [r5, #0]
   89538:	606e      	str	r6, [r5, #4]
   8953a:	2100      	movs	r1, #0
   8953c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89540:	4610      	mov	r0, r2
   89542:	e6f7      	b.n	89334 <__udivmoddi4+0x98>
   89544:	4689      	mov	r9, r1
   89546:	e6de      	b.n	89306 <__udivmoddi4+0x6a>
   89548:	4546      	cmp	r6, r8
   8954a:	d2ea      	bcs.n	89522 <__udivmoddi4+0x286>
   8954c:	ebb8 0a02 	subs.w	sl, r8, r2
   89550:	eb69 0e03 	sbc.w	lr, r9, r3
   89554:	3801      	subs	r0, #1
   89556:	e7e4      	b.n	89522 <__udivmoddi4+0x286>
   89558:	4670      	mov	r0, lr
   8955a:	e7d7      	b.n	8950c <__udivmoddi4+0x270>
   8955c:	4618      	mov	r0, r3
   8955e:	e78f      	b.n	89480 <__udivmoddi4+0x1e4>
   89560:	4681      	mov	r9, r0
   89562:	e7bd      	b.n	894e0 <__udivmoddi4+0x244>
   89564:	4611      	mov	r1, r2
   89566:	e776      	b.n	89456 <__udivmoddi4+0x1ba>
   89568:	3802      	subs	r0, #2
   8956a:	443c      	add	r4, r7
   8956c:	e744      	b.n	893f8 <__udivmoddi4+0x15c>
   8956e:	4608      	mov	r0, r1
   89570:	e706      	b.n	89380 <__udivmoddi4+0xe4>
   89572:	3a02      	subs	r2, #2
   89574:	443e      	add	r6, r7
   89576:	e72b      	b.n	893d0 <__udivmoddi4+0x134>

00089578 <__aeabi_idiv0>:
   89578:	4770      	bx	lr
   8957a:	bf00      	nop
   8957c:	00000001 	.word	0x00000001
   89580:	00000002 	.word	0x00000002
   89584:	00000004 	.word	0x00000004
   89588:	00000008 	.word	0x00000008
   8958c:	00000010 	.word	0x00000010
   89590:	00000020 	.word	0x00000020
   89594:	00000040 	.word	0x00000040
   89598:	00000080 	.word	0x00000080
   8959c:	00000100 	.word	0x00000100
   895a0:	00000200 	.word	0x00000200
   895a4:	00000400 	.word	0x00000400
   895a8:	000f4240 	.word	0x000f4240
   895ac:	000000c0 	.word	0x000000c0
	...
   895b8:	69442020 	.word	0x69442020
   895bc:	74636572 	.word	0x74636572
   895c0:	3a6e6f69 	.word	0x3a6e6f69
   895c4:	2e332520 	.word	0x2e332520
   895c8:	20206631 	.word	0x20206631
   895cc:	00000000 	.word	0x00000000
   895d0:	696c6163 	.word	0x696c6163
   895d4:	74617262 	.word	0x74617262
   895d8:	6f632065 	.word	0x6f632065
   895dc:	7361706d 	.word	0x7361706d
   895e0:	00000073 	.word	0x00000073
   895e4:	69442020 	.word	0x69442020
   895e8:	74636572 	.word	0x74636572
   895ec:	3a6e6f69 	.word	0x3a6e6f69
   895f0:	64312520 	.word	0x64312520
   895f4:	00002020 	.word	0x00002020
   895f8:	74756873 	.word	0x74756873
   895fc:	676e6974 	.word	0x676e6974
   89600:	776f6420 	.word	0x776f6420
   89604:	2e2e2e6e 	.word	0x2e2e2e6e
   89608:	00000000 	.word	0x00000000
   8960c:	666e6f63 	.word	0x666e6f63
   89610:	206d7269 	.word	0x206d7269
   89614:	74756873 	.word	0x74756873
   89618:	6e776f64 	.word	0x6e776f64
   8961c:	0000003f 	.word	0x0000003f
   89620:	20202020 	.word	0x20202020
   89624:	534f6f6e 	.word	0x534f6f6e
   89628:	454e4f20 	.word	0x454e4f20
   8962c:	00000000 	.word	0x00000000
   89630:	74614d20 	.word	0x74614d20
   89634:	00006863 	.word	0x00006863
   89638:	6e655320 	.word	0x6e655320
   8963c:	73726f73 	.word	0x73726f73
   89640:	00000000 	.word	0x00000000
   89644:	74655320 	.word	0x74655320
   89648:	676e6974 	.word	0x676e6974
   8964c:	00000073 	.word	0x00000073
   89650:	00089620 	.word	0x00089620
   89654:	00089630 	.word	0x00089630
   89658:	00089638 	.word	0x00089638
   8965c:	00089644 	.word	0x00089644
   89660:	6c614220 	.word	0x6c614220
   89664:	0000006c 	.word	0x0000006c
   89668:	6d6f4320 	.word	0x6d6f4320
   8966c:	73736170 	.word	0x73736170
   89670:	00000000 	.word	0x00000000
   89674:	6e694c20 	.word	0x6e694c20
   89678:	00000065 	.word	0x00000065
   8967c:	00000020 	.word	0x00000020
   89680:	00089660 	.word	0x00089660
   89684:	00089668 	.word	0x00089668
   89688:	00089674 	.word	0x00089674
   8968c:	0008967c 	.word	0x0008967c
   89690:	0008967c 	.word	0x0008967c
   89694:	0008967c 	.word	0x0008967c
   89698:	0008967c 	.word	0x0008967c
   8969c:	0008967c 	.word	0x0008967c
   896a0:	0000003e 	.word	0x0000003e
   896a4:	25753325 	.word	0x25753325
   896a8:	00000025 	.word	0x00000025
   896ac:	75322520 	.word	0x75322520
   896b0:	00002525 	.word	0x00002525
   896b4:	31252020 	.word	0x31252020
   896b8:	00252575 	.word	0x00252575
   896bc:	746f6f62 	.word	0x746f6f62
   896c0:	20676e69 	.word	0x20676e69
   896c4:	534f6f6e 	.word	0x534f6f6e
   896c8:	00202020 	.word	0x00202020
   896cc:	0000002e 	.word	0x0000002e

000896d0 <_global_impure_ptr>:
   896d0:	200701a8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   896e0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   896f0:	46454443 00000000 33323130 37363534     CDEF....01234567
   89700:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   89710:	0000296c 00000030                       l)..0...

00089718 <blanks.7223>:
   89718:	20202020 20202020 20202020 20202020                     

00089728 <zeroes.7224>:
   89728:	30303030 30303030 30303030 30303030     0000000000000000
   89738:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00089748 <__mprec_bigtens>:
   89748:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89758:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89768:	7f73bf3c 75154fdd                       <.s..O.u

00089770 <__mprec_tens>:
   89770:	00000000 3ff00000 00000000 40240000     .......?......$@
   89780:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   89790:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   897a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   897b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   897c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   897d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   897e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   897f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89800:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89810:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89820:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89830:	79d99db4 44ea7843                       ...yCx.D

00089838 <p05.6055>:
   89838:	00000005 00000019 0000007d 00000043     ........}...C...
   89848:	49534f50 00000058 0000002e              POSIX.......

00089854 <_ctype_>:
   89854:	20202000 20202020 28282020 20282828     .         ((((( 
   89864:	20202020 20202020 20202020 20202020                     
   89874:	10108820 10101010 10101010 10101010      ...............
   89884:	04040410 04040404 10040404 10101010     ................
   89894:	41411010 41414141 01010101 01010101     ..AAAAAA........
   898a4:	01010101 01010101 01010101 10101010     ................
   898b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   898c4:	02020202 02020202 02020202 10101010     ................
   898d4:	00000020 00000000 00000000 00000000      ...............
	...

00089958 <_init>:
   89958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8995a:	bf00      	nop
   8995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8995e:	bc08      	pop	{r3}
   89960:	469e      	mov	lr, r3
   89962:	4770      	bx	lr

00089964 <__init_array_start>:
   89964:	00086b09 	.word	0x00086b09

00089968 <__frame_dummy_init_array_entry>:
   89968:	00080119                                ....

0008996c <_fini>:
   8996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8996e:	bf00      	nop
   89970:	bcf8      	pop	{r3, r4, r5, r6, r7}
   89972:	bc08      	pop	{r3}
   89974:	469e      	mov	lr, r3
   89976:	4770      	bx	lr

00089978 <__fini_array_start>:
   89978:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	2007019c 	.word	0x2007019c
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <print_menu>:
2007018c:	00000101                                         .

2007018d <allow_leds>:
2007018d:	02000001                                         ...

20070190 <menu_info>:
20070190:	04020202 03010101 01010101              ............

2007019c <SystemCoreClock>:
2007019c:	003d0900                                ..=.

200701a0 <update_dots>:
200701a0:	00000001                                ....

200701a4 <_impure_ptr>:
200701a4:	200701a8                                ... 

200701a8 <impure_data>:
200701a8:	00000000 20070494 200704fc 20070564     ....... ... d.. 
	...
20070250:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070260:	0005deec 0000000b 00000000 00000000     ................
	...

200705d0 <__atexit_recursive_mutex>:
200705d0:	20070fcc                                ... 

200705d4 <__malloc_av_>:
	...
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 

200709dc <__malloc_sbrk_base>:
200709dc:	ffffffff                                ....

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__global_locale>:
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00000043 00000000 00000000 00000000     C...............
	...
20070ac4:	000890c9 00088c69 00000000 00089854     ....i.......T...
20070ad4:	00089850 000896f4 000896f4 000896f4     P...............
20070ae4:	000896f4 000896f4 000896f4 000896f4     ................
20070af4:	000896f4 000896f4 ffffffff ffffffff     ................
20070b04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
